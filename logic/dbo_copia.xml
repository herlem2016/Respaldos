<?xml version="1.0" encoding="iso-8859-1" ?>
<Secciones>

  <fraccionamientos>
    <ObtenerDatosFracc>
      <sql>
        <![CDATA[            
            SELECT TOP(1) * FROM Fraccionamientos WHERE clave=@f_fraccionamiento;
        ]]>
      </sql>
    </ObtenerDatosFracc>
    
    <RegistrarDomicilio>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Tipo de registro de domicilios" db_nombre="f_regdom" form_nombre="f_regdom" requerido="true" charsize="30" tipo="string"/>
      <sql>
        <![CDATA[
            UPDATE Fraccionamientos SET domicilio=@domicilio, tipocarga_dom=@f_regdom,ext_logo=@extlogo WHERE clave=@s_fraccionamiento;
            SELECT 1 estatus,'Ok' mensaje;
        ]]>
      </sql>
    </RegistrarDomicilio>
    
    <cargar>
      <sql>
        <![CDATA[
            SELECT * FROM Cargos WHERE ISNULL(deshabilitado,0)=0 AND fraccionamiento=@s_fraccionamiento ORDER BY nombre ASC;
        ]]>
      </sql>
    </cargar>

    <Registrar>
      <campo leyenda="Nombre" db_nombre="nombre" form_nombre="nombre" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="E-mail" db_nombre="email" form_nombre="email" requerido="true" charsize="50" tipo="string"/>
      <campo leyenda="Confirmación e-mail" db_nombre="confemail" form_nombre="confemail" requerido="true" charsize="50" tipo="string"/>
      <campo leyenda="Contraseña" db_nombre="contrasena" form_nombre="contrasena" requerido="true" charsize="50" tipo="string"/>
      <campo leyenda="Confirmación contraseña" db_nombre="confcontrasena" form_nombre="confcontrasena" requerido="true" charsize="50" tipo="string"/>
      <sql>
        <![CDATA[
        BEGIN TRANSACTION T11;
        BEGIN TRY 
        DECLARE @usuario INT,@fraccionamiento INT;        
          INSERT INTO Usuarios(usuario,contrasena,correo,fecha_registro) VALUES(@nombre,@contrasena,@email,GETDATE());
          SET @usuario=@@IDENTITY;
          INSERT INTO Fraccionamientos(fecha_registro,nombre,responsable) VALUES(GETDATE(),@nombre,@usuario);
          SET @fraccionamiento=@@IDENTITY;
          UPDATE Usuarios SET fraccionamiento=@fraccionamiento WHERE clave=@usuario;
          COMMIT TRANSACTION T11;
          SELECT CONVERT(INT,@usuario) clave, 1 estatus, 'OK' mensaje, @fraccionamiento fraccionamiento;         
         END TRY BEGIN CATCH
            ROLLBACK TRANSACTION T11;
            IF ERROR_NUMBER()=2627 BEGIN
              IF (EXISTS(SELECT * FROM Usuarios WHERE RTRIM(LTRIM(correo)) like LTRIM(RTRIM(@email)) ) )BEGIN
                SELECT -1 estatus, 'Ya existe una cuenta con este E-mail, ingrese otro.' mensaje, ERROR_MESSAGE() detalle;     
              END ELSE BEGIN    
                SELECT -1 estatus, 'Ya existe una cuenta con este nombre, intente ' + @nombre + '-[Municipio]' mensaje, ERROR_MESSAGE() detalle;   
               END
            END ELSE BEGIN
              SELECT -1 estatus, 'Error al registrar:' + CONVERT(NVARCHAR(10),ERROR_NUMBER()) mensaje, ERROR_MESSAGE() detalle;      
            END
         END CATCH
        ]]>
      </sql>
    </Registrar>

    <ObtenerItem>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            SELECT * FROM Cargos WHERE  fraccionamiento=@s_fraccionamiento AND ISNULL(deshabilitado,0)=0 AND clave=@claveItem;
          ]]>
      </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE descripcion like @catalogo;
            BEGIN TRANSACTION T1;
            BEGIN TRY 
              DELETE FROM imagenes_catalogos WHERE clave=@claveItem AND catalogo=@ccatalogo AND fraccionamiento=@s_fraccionamiento; 
              DELETE FROM cargos WHERE clave=@claveItem AND fraccionamiento=@s_fraccionamiento;
              COMMIT TRANSACTION T1;
              SELECT 1 estatus, 'OK' mensaje;
            END TRY BEGIN CATCH
              ROLLBACK TRANSACTION T1;
              SELECT -1 estatus, 'Error al borrar' mensaje;
            END CATCH
            
          ]]>
      </sql>
    </EliminarItem>

  </fraccionamientos>
  
  <seguridad>    
    <ValidarAccesoFunciones>
      <campo leyenda="Funciones" db_nombre="funciones" form_nombre="funciones" requerido="true" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[        
            DECLARE @usuarioMaster INT;
            SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
            DECLARE @tieneacceso BIT;
            SELECT @tieneacceso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE usuario=@s_usuario AND activo=1 AND fraccionamiento=@s_fraccionamiento)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento)CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion IN (SELECT item FROM split(@funciones,','));/*1 es la clave de vigilancia*/            
            SELECT CASE WHEN ISNULL(@tieneacceso,0)=1 OR @usuarioMaster IS NOT NULL THEN 1 ELSE -1 END estatus;
        ]]>
      </sql>
    </ValidarAccesoFunciones>

    <ActivarAlarmaVecinal>
       <sql>
          <![CDATA[
           DECLARE @activo_AV BIT,@fechasuspension NVARCHAR(20);
           SELECT @fechasuspension=MAX(fecha), @activo_AV=CASE WHEN ISNULL(DATEDIFF(DD,GETDATE(),MAX(fecha)),4)<3  THEN 0 ELSE 1 END FROM SuspensionesAlarmaVecinal WHERE usuario=@s_usuario;
          IF @activo_AV=1 BEGIN
            DECLARE @s_domicilio INT;
            DECLARE @domicilio NVARCHAR(200);
            SELECT @s_domicilio=clave, @domicilio=('Calle ' + calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'')) FROM Domicilios WHERE clave=(SELECT TOP(1) domicilio FROM usuarios_domicilio WHERE usuario=@s_usuario AND fraccionamiento=@s_fraccionamiento);          
            INSERT INTO AlarmasVecinales(domicilio,fraccionamiento,usuario,fecha) VALUES (@s_domicilio,@s_fraccionamiento,@s_usuario,GETDATE());
            INSERT INTO Notificaciones (fraccionamiento,domicilio,usuario,mensaje,fecha,funcion) VALUES(@s_fraccionamiento,@s_domicilio,@s_usuario,'Solicitud de rondín de vigilancia para vivienda: ' + @domicilio,GETDATE(),1);
			SELECT 1 estatus, 'Solicitud realizada.' mensaje;
            SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_fun_1' para, 1 clave, 'Rondín de vigilancia solicitado para: ' + @domicilio contenido; 
           END ELSE BEGIN
            SELECT -1 estatus, 'Por el momento tiene dehabilitada esta función.' mensaje;
          END
          ]]>
        </sql>
    </ActivarAlarmaVecinal>

    <ValidarEstatusCuenta>
      <sql>
        <![CDATA[    
            DECLARE @row_count_ INT,@t_regdom NVARCHAR(30);       
            DECLARE @fracc INT;SELECT @fracc=clave,@t_regdom=tipocarga_dom FROM Fraccionamientos WHERE clave=@s_fraccionamiento;
            DECLARE @no_domicilios INT;
            SELECT @no_domicilios=COUNT(clave) FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento;
			SELECT 0 existeCompromisoSPEI;
            SELECT @s_fraccionamiento codigoActivacion,L.fecha_vencimiento, P.*,CASE WHEN @no_domicilios>P.lf THEN 1 ELSE 0 END excedePlan,
	            CASE WHEN @no_domicilios>2 OR @t_regdom like 'manual' THEN 1 ELSE 0 END yaRegistroDomis,
	            @no_domicilios conteodom,
              CASE WHEN @no_domicilios<=P.lf AND @no_domicilios>2 OR @t_regdom like 'manual' THEN 1 ELSE 0 END estatus
            FROM(SELECT [plan],MAX(fecha_vencimiento) fecha_vencimiento
	            FROM Licencias 
	            WHERE 
	             fraccionamiento=@s_fraccionamiento AND ISNULL(cancelado,0)=0 AND ((pago_electronico=1 AND response_payu=1) OR pago_fisico=1) AND CONVERT(DATE,fecha_activacion)<=CONVERT(DATE,GETDATE()) AND CONVERT(DATE,GETDATE())<=CONVERT(DATE,fecha_vencimiento)
	            GROUP BY [plan],fecha_vencimiento
            )L LEFT OUTER JOIN PlanesLicencias P ON L.[plan]=P.clave;
            SET @row_count_=@@ROWCOUNT;
            
            SELECT * FROM Fraccionamientos WHERE clave=@s_fraccionamiento;
                        
            SELECT -1 estatus, CASE WHEN @fracc IS NULL THEN 'No se encontró clave de activación.' WHEN @row_count_=0 THEN 'Licencia esta en trámite o expiró.Consulte a su administrador.' END mensaje WHERE @fracc IS NULL OR @row_count_=0;
            
        ]]>
      </sql>
    </ValidarEstatusCuenta>

    <IniciarSesion>
      <campo leyenda="E-mail" db_nombre="email" form_nombre="email" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Contraseña" db_nombre="contrasena" form_nombre="contrasena" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Fraccionamiento" db_nombre="s_fraccionamiento" form_nombre="fraccionamiento" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
		IF(EXISTS(SELECT clave FROM Usuarios WHERE correo like @email AND contrasena=@contrasena AND ISNULL(deshabilitado,0)=0))BEGIN
            DECLARE @usuario INT, @s_fracc INT;			
            SELECT @usuario=clave,@s_fracc=fraccionamiento FROM Usuarios WHERE correo like @email AND contrasena=@contrasena;
            DECLARE @es_resp_fracc INT;
            SELECT @es_resp_fracc=responsable FROM Fraccionamientos WHERE responsable=@usuario AND clave=@s_fracc;            
            DECLARE @ya_verifico BIT;
            SELECT @ya_verifico=es_responsable FROM Usuarios_domicilio WHERE usuario=@usuario AND es_responsable=1 AND fraccionamiento=@s_fracc;
            DECLARE @es_vigilancia BIT;
            SELECT @es_vigilancia=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fracc AND usuario=@usuario AND activo=1 AND fraccionamiento=@s_fracc)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fracc) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=1;/*1 es la clave de vigilancia*/
            
            DECLARE @es_adminivo BIT;
            SELECT @es_adminivo=CASE WHEN clave_cargo IS NOT NULL THEN 1 ELSE 0 END FROM Administracion WHERE usuario=@usuario AND activo=1 AND fraccionamiento=@s_fracc;
            
            DECLARE @solo_rev_ucuotas BIT;
            SELECT @solo_rev_ucuotas=CASE WHEN clave_cargo=17 THEN 1 ELSE 0 END FROM Administracion WHERE usuario=@usuario AND activo=1 AND fraccionamiento=@s_fracc;
            
            DECLARE @domicilios NVARCHAR(500);                          
            SET @domicilios=STUFF((
                SELECT ',' + CONVERT(NVARCHAR(10),domicilio)
                  FROM usuarios_domicilio DU WHERE usuario=@usuario ORDER BY domicilio ASC
                  FOR XML PATH('')
                ), 1, 1, ''); 
				
            DECLARE @fecha_vencimiento DATE, @estatus INT,@mensaje NVARCHAR(200);
			SELECT @fecha_vencimiento=MAX(fecha_vencimiento) 
	            FROM Licencias 
	            WHERE 
	             fraccionamiento=@s_fracc AND ISNULL(cancelado,0)=0 AND ((pago_electronico=1 AND response_payu=1) OR pago_fisico=1) AND CONVERT(DATE,fecha_activacion)<=CONVERT(DATE,GETDATE()) AND CONVERT(DATE,GETDATE())<=CONVERT(DATE,fecha_vencimiento)
	            GROUP BY [plan],fecha_vencimiento
				
			  IF @fecha_vencimiento >= GETDATE()
				SELECT @estatus=CASE WHEN @s_fracc=@s_fraccionamiento THEN 1 ELSE 2 END, @mensaje='OK'
			  ELSE
				SELECT @estatus=2, @mensaje='No se encontró licencia activa de servicio.'
			
            SELECT @s_fracc,@s_fraccionamiento, @estatus estatus, @mensaje mensaje, @es_adminivo es_adminivo,@es_vigilancia es_vigilancia,@solo_rev_ucuotas solo_rev_ucuotas, @ya_verifico ya_verifico, CONVERT(BIT,CASE WHEN @es_resp_fracc=U.clave THEN 1 ELSE 0 END) es_resp_fracc, 1 estatus,'OK' mensaje, U.*, U.usuario + ' ' + ISNULL(apellidos,'') nombre, F.nombre s_nfracc, @domicilios domicilios,
            ISNULL(C.nombre,'Usuario Residente') cargo,F.domicilio fdomicilio
            FROM (SELECT * FROM Usuarios WHERE clave=@usuario AND fraccionamiento=@s_fracc) U INNER JOIN fraccionamientos F ON U.fraccionamiento=F.clave
            LEFT OUTER JOIN Administracion A ON U.clave=A.usuario AND A.activo=1 AND U.fraccionamiento=A.fraccionamiento LEFT OUTER JOIN (SELECT * FROM Cargos WHERE fraccionamiento=@s_fracc)C ON C.clave=A.clave_cargo /*AND C.fraccionamiento=A.fraccionamiento*/            
          END ELSE BEGIN
             SELECT -1 estatus, 'No se encontro usuario' mensaje;
          END
        ]]>
      </sql>
    </IniciarSesion>
	
    <RecuperarAcceso>  
      <campo leyenda="E-mail" db_nombre="email" form_nombre="email" requerido="true" charsize="100" tipo="string"/> 
      <campo leyenda="Clave de Fraccionamiento" db_nombre="s_fraccionamiento" form_nombre="s_fraccionamiento" requerido="true" charsize="0" tipo="int"/> 
        <mail />
        <sql>
          <![CDATA[      
            SET LANGUAGE ESPAÑOL;
			  DECLARE @usuario INT,@domicilio INT, @n_usuario NVARCHAR(200),@contrasena NVARCHAR(100);			  
			  
			  DECLARE @s_domicilio NVARCHAR(500);
			  DECLARE @nombrefrac NVARCHAR(200);SELECT TOP(1) @nombrefrac=nombre FROM Fraccionamientos WHERE clave=@s_fraccionamiento;                   
			  
			  SELECT TOP(1) @usuario=clave, @n_usuario=usuario + ' ' + ISNULL(apellidos,''), @contrasena=contrasena FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento AND correo=@email;	
			  IF(@usuario IS NOT NULL) BEGIN
				  SELECT TOP(1) @usuario=usuario, @domicilio=domicilio FROM usuarios_domicilio WHERE @usuario=usuario;
				  SELECT @s_domicilio= calle + ISNULL(' ' + numero,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'') FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio;
				  
				  INSERT INTO @tEmail(habilitarEnvio,alias,asunto,destinatarios,mensaje,cc) 
				  SELECT 1,@nombrefrac,'Datos de Acceso',@email,'<b>Domicilio: </b>'+ @s_domicilio + '<br/><br/><b>E-mail: </b>' + @email + '<br/><br/><b>Contraseña: </b>' + @contrasena + '<br/><h4 style="text-align:center;">........</h4>','losamorestellezadm@gmail.com'             
				  
				  SELECT 1 estatus, 'Se enviaron a su correo sus datos de acceso.' mensaje;
			  END ELSE BEGIN
				  SELECT -1 estatus, 'No se encontró el e-mail ingresado, verifique por favor.' mensaje;				
			  END
           ]]>
        </sql>
    </RecuperarAcceso>    
	

    <ObtenerFuncionesHabilitadas>   
      <sql>        
        <![CDATA[            
         DECLARE @ya_verifico BIT;
         SELECT @ya_verifico=es_responsable FROM Usuarios_domicilio WHERE usuario=@s_usuario AND es_responsable=1 AND fraccionamiento=@s_fraccionamiento;
            
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
          SELECT AC.clave clave_funcion FROM Acciones AC LEFT OUTER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) B ON AC.clave=B.clave_accion LEFT OUTER JOIN (SELECT clave_cargo FROM administracion WHERE usuario=@s_usuario AND fecha_termino IS NULL  AND fraccionamiento=@s_fraccionamiento)A ON A.clave_cargo=B.clave_cargo WHERE A.clave_cargo IS NOT NULL OR @usuarioMaster IS NOT NULL OR (AC.clave=6 AND @ya_verifico=1) GROUP BY AC.clave;
        ]]>
      </sql>
    </ObtenerFuncionesHabilitadas>       
  </seguridad>

  <propdomicilios>
    <cargar>
      <campo leyenda="Usuario" db_nombre="usuario" form_nombre="usuario" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[        
            SELECT calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'') domicilio, clave, es_responsable,observaciones_reg_resp FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D INNER JOIN (SELECT * FROM Usuarios_domicilio WHERE usuario=@usuario AND fraccionamiento=@s_fraccionamiento)UD ON D.clave=UD.domicilio ORDER BY clave DESC;
        ]]>
      </sql>
    </cargar>

    <Guardar>
      <campo leyenda="Usuario" db_nombre="claveusuario" form_nombre="claveusuario" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Domicilios" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Observaciones" db_nombre="observaciones" form_nombre="observaciones" requerido="true" charsize="500" tipo="string"/>
      <sql>
        <![CDATA[        
            UPDATE UD SET UD.domicilio=item, UD.es_responsable=1, UD.usuario_reg_resp=@s_usuario,UD.fecha_reg_resp=GETDATE(),UD.observaciones_reg_resp=@observaciones FROM (SELECT * FROM Usuarios_Domicilio WHERE fraccionamiento=@s_fraccionamiento) UD INNER JOIN (SELECT item FROM split(@domicilio,','))D ON UD.domicilio=CONVERT(INT,D.item) AND UD.usuario=@claveusuario;
            SELECT 1 estatus, 'Actualización correcta' mensaje;
        ]]>
      </sql>
    </Guardar>
    
  </propdomicilios>

  <usuarios>
    
    <PermitirAlarmaVecinal>
      <campo leyenda="Usuario" db_nombre="usuario" form_nombre="usuario" requerido="true" charsize="0" tipo="int"/>      
      <campo leyenda="Activar" db_nombre="activar" form_nombre="activar" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[        
             DECLARE @tiene_permiso BIT;          
            DECLARE @usuarioMaster INT;
            SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
            SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE usuario=@s_usuario AND fraccionamiento=@s_fraccionamiento AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=15 ;
             IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN            
               IF @activar=0 BEGIN                
                INSERT INTO SuspensionesAlarmaVecinal VALUES(@usuario,GETDATE(),@s_usuario,@s_fraccionamiento);             
               END ELSE BEGIN
                DELETE FROM SuspensionesAlarmaVecinal WHERE usuario=@usuario AND fraccionamiento=@s_fraccionamiento;                
               END
                DECLARE @activo_AV BIT,@fechasuspension NVARCHAR(20);
               SELECT @fechasuspension=MAX(fecha), @activo_AV=CASE WHEN ISNULL(DATEDIFF(DD,GETDATE(),MAX(fecha)),4)<3  THEN 0 ELSE 1 END FROM SuspensionesAlarmaVecinal WHERE usuario=@usuario AND fraccionamiento=@s_fraccionamiento;
                SELECT 1 estatus, 'Actualización realizada correctamente.' mensaje, @activo_AV activo_AV, @fechasuspension fechasuspension;            
             END ELSE BEGIN
                SELECT -1 estatus, 'No tiene habilitada esta opción' mensaje;
             END
        ]]>
      </sql>
    </PermitirAlarmaVecinal>
    
    <ActivarDesactivarUsuario>
      <campo leyenda="Usuario" db_nombre="usuario" form_nombre="usuario" requerido="true" charsize="0" tipo="int"/>    
      <campo leyenda="Activar" db_nombre="activar" form_nombre="activar" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[      
          DECLARE @tiene_permiso BIT;          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE usuario=@s_usuario AND fraccionamiento=@s_fraccionamiento AND ISNULL(activo,0)=1 )A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo AND CA.fraccionamiento=@s_fraccionamiento WHERE CA.clave_accion=16 ;
           IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
            UPDATE Usuarios SET deshabilitado=CASE WHEN @activar=1 THEN 0 ELSE 1 END WHERE clave=@usuario;
            SELECT 1 estatus, 'Actualización correcta.' mensaje, ISNULL(CASE WHEN deshabilitado=1 THEN 0 ELSE 1 END,1) activo FROM Usuarios WHERE clave=@usuario AND fraccionamiento=@s_fraccionamiento;
           END ELSE BEGIN
              SELECT -1 estatus, 'No tiene habilitada esta opción' mensaje;
           END
        ]]>
      </sql>
    </ActivarDesactivarUsuario>
    
    <cargar>      
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[        
          DECLARE @domicilio INT;
          SET @domicilio=(SELECT domicilio FROM Usuarios WHERE clave=@s_usuario AND fraccionamiento=@s_fraccionamiento);               
          DECLARE @tiene_permiso BIT;
          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
          
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE usuario=@s_usuario AND fraccionamiento=@s_fraccionamiento AND ISNULL(activo,0)=1 )A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo AND CA.fraccionamiento=@s_fraccionamiento WHERE CA.clave_accion=5 ;/* es la clave para acceder a todos los usuarios*/              
          SELECT ISNULL(A.usuario,'') + ISNULL(' ' + A.apellidos ,'') usuario, ISNULL(D.calle,'') + ISNULL(' ' + D.numero,'') + ISNULL(D.no_interior,'') + ISNULL(' Mz. ' + D.manzana,'') + ISNULL(' Lt. ' + D.lote,'') domicilio, A.*,C.nombre cargo, C.clave clave_cargo FROM (SELECT * FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento AND((@usuarioMaster IS NOT NULL OR @tiene_permiso=1 OR domicilio=@domicilio) AND(@buscar IS NULL OR usuario + ' ' + ISNULL(apellidos,'') like '%' + @buscar + '%'))) A LEFT OUTER JOIN administracion B ON A.clave=B.usuario AND B.fraccionamiento=@s_fraccionamiento AND B.activo=1 LEFT OUTER JOIN (SELECT * FROM Cargos WHERE fraccionamiento=@s_fraccionamiento) C ON C.clave=B.clave_cargo LEFT OUTER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D ON A.domicilio=D.clave ORDER BY D.calle ASC;
        ]]>
      </sql>
    </cargar>
    
    <RegistrarUsuario>
      <campo leyenda="Nombre" db_nombre="nombre" form_nombre="usuario" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Apellidos" db_nombre="apellidos" form_nombre="apellidos" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Nombre del titular" db_nombre="titular" form_nombre="titular" requerido="false" charsize="200" tipo="string"/>
      <campo leyenda="Es titular" db_nombre="es_titular" form_nombre="es_titular" requerido="true" charsize="0" tipo="bool"/>
      <campo leyenda="Teléfono" db_nombre="telefono" form_nombre="telefono" requerido="false" charsize="200" tipo="string"/>     
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="200" tipo="string"/>      
      <campo leyenda="E-mail" db_nombre="email" form_nombre="email" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Confirme E-mail" db_nombre="confemail" form_nombre="confemail" requerido="false" charsize="100" tipo="string"/>
      <campo leyenda="Contraseña" db_nombre="pass" form_nombre="contrasena" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Confirme Contraseña" db_nombre="confpass" form_nombre="confpass" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Fraccionamiento" db_nombre="s_fraccionamiento" form_nombre="s_fraccionamiento" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
        IF @pass<>@confpass BEGIN
          SELECT -1 estatus, 'No coinciden las contraseñas, por favor verifique.'
        END ELSE BEGIN
          BEGIN TRANSACTION TU;
          BEGIN TRY
            DECLARE @usuario INT;
            INSERT INTO usuarios(usuario,apellidos,correo,contrasena,fecha_registro,fraccionamiento,telefono) VALUES(@nombre,@apellidos,@email,@pass,GETDATE(),@s_fraccionamiento,@telefono);
            SET @usuario=@@IDENTITY;
            INSERT INTO usuarios_domicilio(usuario,domicilio,fraccionamiento) SELECT @usuario, CONVERT(INT,item), @s_fraccionamiento FROM split(@domicilio,',');
            SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
            COMMIT TRANSACTION TU;
           END TRY BEGIN CATCH
            ROLLBACK TRANSACTION TU;
            IF ERROR_NUMBER()=2627  SELECT -1 estatus, 'Ya ha sido dado de alta anteriormente, por favor verifique.' mensaje, ERROR_MESSAGE() detalle;
            ELSE SELECT -1 estatus, 'Error ' + CONVERT(NVARCHAR(10),ERROR_NUMBER()) + ' , por favor verifique.' mensaje, ERROR_MESSAGE() detalle;
           END CATCH  
         END
        ]]>
      </sql>
    </RegistrarUsuario>
    
    <Guardar>
      <campo leyenda="Nombre" db_nombre="nombre" form_nombre="nombre" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Apellidos" db_nombre="apellidos" form_nombre="apellidos" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="E-mail" db_nombre="email" form_nombre="email" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Confirme E-mail" db_nombre="confemail" form_nombre="confemail" requerido="false" charsize="100" tipo="string"/>
      <campo leyenda="Contraseña anterior" db_nombre="passant" form_nombre="passant" requerido="false" charsize="100" tipo="string"/>
      <campo leyenda="Contraseña" db_nombre="pass" form_nombre="pass" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Confirme Contraseña" db_nombre="confpass" form_nombre="confpass" requerido="false" charsize="100" tipo="string"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
        IF @esNuevo=1 BEGIN
          INSERT INTO usuarios(usuario,apellidos,correo,contrasena,fecha_registro,usuario_crea,fraccionamiento) VALUES(@nombre,@apellidos,@email,@pass,GETDATE(),@s_usuario,@s_fraccionamiento);
          SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
         END ELSE BEGIN
          IF(@clave IS NOT NULL)BEGIN
            UPDATE usuarios SET usuario=@nombre,apellidos=@apellidos,correo=@email,contrasena=@pass,fecha_modificacion=GETDATE(),usuario_modifica=@s_usuario WHERE clave=@clave;
            SELECT 1 estatus, 'OK' mensaje, @clave clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         ENd
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
          SET LANGUAGE ESPAÑOL;
           DECLARE @activo_AV BIT, @fechasuspension DATETIME;
           SELECT @fechasuspension=MAX(fecha), @activo_AV=CASE WHEN ISNULL(DATEDIFF(DD,GETDATE(),MAX(fecha)),4)<3  THEN 0 ELSE 1 END FROM SuspensionesAlarmaVecinal WHERE usuario=@claveItem AND fraccionamiento=@s_fraccionamiento;
           SELECT CONVERT(NVARCHAR(20),@fechasuspension,103) fechasuspension, @activo_AV activo_AV, ISNULL(A.usuario,'') + ISNULL(' ' + A.apellidos ,'') usuario, A.*,C.nombre cargo,C.clave clave_cargo FROM (SELECT * FROM usuarios WHERE clave=@claveItem AND fraccionamiento=@s_fraccionamiento) A LEFT OUTER JOIN (SELECT * FROM administracion WHERE ISNULL(activo,0)=1 AND usuario=@claveItem AND fraccionamiento=@s_fraccionamiento) B ON A.clave=B.usuario LEFT OUTER JOIN (SELECT * FROM Cargos WHERE fraccionamiento=@s_fraccionamiento) C ON C.clave=B.clave_cargo AND B.activo=1 ;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE descripcion like @catalogo;
            BEGIN TRANSACTION T1;
            BEGIN TRY 
              DELETE FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo; 
              DELETE FROM usuarios WHERE clave=@claveItem AND fraccionamiento=@s_fraccionamiento;
              COMMIT TRANSACTION T1;
              SELECT 1 estatus, 'OK' mensaje;
            END TRY BEGIN CATCH
              ROLLBACK TRANSACTION T1;
              SELECT -1 estatus, 'Error al borrar' mensaje;
            END CATCH
            
          ]]>
      </sql>      
    </EliminarItem> 
    
    <RegistrarCargoUsuario>
       <campo leyenda="Clave de usuario" db_nombre="clave_usuario" form_nombre="clave_usuario" requerido="true" charsize="0" tipo="int"/>
       <campo leyenda="Clave de cargo" db_nombre="cargo" form_nombre="cargo" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            UPDATE Administracion SET activo=0, fecha_termino=GETDATE() WHERE usuario=@clave_usuario AND fraccionamiento=@s_fraccionamiento;
            INSERT INTO Administracion(activo,fecha_registro,clave_cargo,usuario,fraccionamiento) VALUES(1,GETDATE(),@cargo,@clave_usuario,@s_fraccionamiento);
            SELECT 1 estatus, 'ok' mensaje;
        ]]>
      </sql>
    </RegistrarCargoUsuario>
    
  <RemoverCargoUsuario>
       <campo leyenda="Clave de usuario" db_nombre="clave_usuario" form_nombre="clave_usuario" requerido="true" charsize="0" tipo="int"/>
       <campo leyenda="Clave de cargo" db_nombre="cargo" form_nombre="cargo" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            UPDATE Administracion SET activo=0, fecha_termino=GETDATE() WHERE usuario=@clave_usuario AND fraccionamiento=@s_fraccionamiento;
            SELECT 1 estatus, 'ok' mensaje;
        ]]>
      </sql>
    </RemoverCargoUsuario>
    
    <BloquearNotificaciones>
       <campo leyenda="Clave de usuario" db_nombre="clave_usuario" form_nombre="clave_usuario" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            UPDATE Usuarios SET BloquearNotificaciones=1 WHERE  fraccionamiento=@s_fraccionamiento AND usuario=@clave_usuario;
            SELECT 1 estatus, 'ok' mensaje;
        ]]>
      </sql>
    </BloquearNotificaciones>
    
  </usuarios>
  
   <notificaciones>
    
    <cargar>      
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[     
        DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
          DECLARE @tf AS TABLE(clave INT);
          INSERT INTO @tf SELECT AC.clave clave_funcion FROM (SELECT * FROM Acciones WHERE  fraccionamiento=@s_fraccionamiento) AC LEFT OUTER JOIN (SELECT * FROM Cargos_Acciones WHERE  fraccionamiento=@s_fraccionamiento) B ON AC.clave=B.clave_accion LEFT OUTER JOIN (SELECT clave_cargo FROM administracion WHERE usuario=@s_usuario AND fecha_termino IS NULL AND  fraccionamiento=@s_fraccionamiento)A ON A.clave_cargo=B.clave_cargo WHERE A.clave_cargo IS NOT NULL OR @usuarioMaster=1 OR AC.clave=6 GROUP BY AC.clave;
        
          DECLARE @domicilio INT;
          SET @domicilio=(SELECT domicilio FROM Usuarios_domicilio WHERE  fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario);
         SELECT TOP(50) CONVERT(NVARCHAR(20),fecha,100) fecha,* FROM Notificaciones N WHERE fraccionamiento=@s_fraccionamiento AND (domicilio IS NULL AND funcion IS NULL AND funcion <> 1) OR domicilio=@domicilio OR funcion IN(SELECT clave FROM @tf) ORDER BY N.fecha DESC;
        ]]>
      </sql>
    </cargar>
    
    <ObtenerItem>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
           
          ]]>
        </sql>
    </ObtenerItem>
     
   <Guardar>
        <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="300" tipo="string"/>
        <campo leyenda="Mensaje" db_nombre="mensaje" form_nombre="mensaje" requerido="true" charsize="1000" tipo="string"/>        
        <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
				DECLARE @remitente NVARCHAR(100);SELECT @remitente= usuario + ISNULL(' ' + apellidos,'') FROM usuarios WHERE  fraccionamiento=@s_fraccionamiento AND clave=@s_usuario;
				INSERT INTO Notificaciones (fraccionamiento,domicilio,usuario,mensaje,fecha) VALUES(@s_fraccionamiento,@domicilio,@s_usuario, @titulo + ',  ' + @mensaje + '; ' + UPPER(@remitente),GETDATE());
				SELECT 1 estatus,'Mensaje enviado.' mensaje_; 
				SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento) + '_dom_' +  CONVERT(NVARCHAR(20),@domicilio) para, 100 clave, @titulo titulo,@mensaje + ';\t ' + UPPER(@remitente) mensaje;               
          ]]>
        </sql>
      </Guardar>
   
  </notificaciones>
  

  <cargosacciones>
    <cargar>
      <campo leyenda="Clave de cargo" db_nombre="cargo" form_nombre="cargo" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            SELECT * FROM acciones A LEFT OUTER JOIN (SELECT * FROM cargos_acciones WHERE  fraccionamiento=@s_fraccionamiento AND clave_cargo=@cargo) CA ON A.clave=CA.clave_accion;
        ]]>
      </sql>
    </cargar>
    
     <Guardar>
        <campo leyenda="Acciones" db_nombre="acciones" form_nombre="accion" requerido="true" charsize="3000" tipo="string"/>
        <campo leyenda="Clave de cargo" db_nombre="clavecargo" form_nombre="clavecargo" requerido="false" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
              DECLARE @tiene_permiso BIT;          
              DECLARE @usuarioMaster INT;
              SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
              SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=9;/* es la clave para acceder a todos los usuarios*/              
              IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
                DELETE FROM cargos_acciones WHERE  fraccionamiento=@s_fraccionamiento AND clave_cargo=@clavecargo;
                INSERT INTO cargos_acciones(clave_cargo,clave_accion,fraccionamiento) SELECT @clavecargo,item,@s_fraccionamiento FROM split(@acciones,',');      
                SELECT 1 estatus,'OK' mensaje;
              END ELSE BEGIN
                SELECT -1 estatus,'No tiene habilitada esta función' mensaje;
              END
          ]]>
        </sql>
      </Guardar>
  
  </cargosacciones>
  
  <cargos>
    
    <cargar>
      <sql>
        <![CDATA[
             DECLARE @tiene_permiso BIT;          
              DECLARE @usuarioMaster INT;
              SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
              SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE  fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=5;
              IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
                SELECT * FROM Cargos WHERE fraccionamiento=@s_fraccionamiento AND ISNULL(deshabilitado,0)=0 ORDER BY nombre ASC;
              END
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Nombre" db_nombre="nombre" form_nombre="nombre" requerido="true" charsize="50" tipo="string"/>
        <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="200" tipo="string"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
        IF @esNuevo=1 BEGIN
          INSERT INTO cargos(fecha_registro,usuario_crea,nombre,descripcion,fraccionamiento) VALUES(GETDATE(),@s_usuario,@nombre,@descripcion,@s_fraccionamiento);
          SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
         END ELSE BEGIN
          IF(@clave IS NOT NULL)BEGIN
            UPDATE cargos SET fecha_modificacion=GETDATE(),usuario_modifica=@s_usuario,nombre=@nombre,descripcion=@descripcion WHERE clave=@clave;
            SELECT 1 estatus, 'OK' mensaje, @clave clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         ENd
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT * FROM Cargos WHERE  fraccionamiento=@s_fraccionamiento AND ISNULL(deshabilitado,0)=0 AND clave=@claveItem;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE descripcion like @catalogo;
            BEGIN TRANSACTION T1;
            BEGIN TRY 
              DELETE FROM imagenes_Catalogos WHERE   clave=@claveItem AND catalogo=@ccatalogo; 
              DELETE FROM cargos WHERE  fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
              COMMIT TRANSACTION T1;
              SELECT 1 estatus, 'OK' mensaje;
            END TRY BEGIN CATCH
              ROLLBACK TRANSACTION T1;
              SELECT -1 estatus, 'Error al borrar' mensaje;
            END CATCH
            
          ]]>
      </sql>      
    </EliminarItem> 
    
  </cargos>
  
  <ap__usuarios>
    <cargar>
       <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[        
          DECLARE @domicilio INT;
          SET @domicilio=(SELECT domicilio FROM Usuarios WHERE  fraccionamiento=@s_fraccionamiento AND clave=@s_usuario);               
          DECLARE @tiene_permiso BIT;
          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
          
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE  fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE  fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=5 ;/* es la clave para acceder a todos los usuarios*/              
          SELECT ISNULL(A.usuario,'') + ISNULL(' ' + A.apellidos ,'') usuario, ISNULL(D.calle,'') + ISNULL(' ' + D.numero,'') + ISNULL(D.no_interior,'') + ISNULL(' Mz. ' + D.manzana,'') + ISNULL(' Lt. ' + D.lote,'') domicilio, A.*,C.nombre cargo, C.clave clave_cargo 
          FROM (SELECT U.* FROM (SELECT * FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento) U INNER JOIN (SELECT DISTINCT usuario FROM Reservaciones WHERE fraccionamiento=@s_fraccionamiento AND solicitud IS NULL)R ON U.clave=R.usuario WHERE ((@usuarioMaster IS NOT NULL OR @tiene_permiso=1 OR domicilio=@domicilio) AND(@buscar IS NULL OR U.usuario + ' ' + ISNULL(apellidos,'') like '%' + @buscar + '%'))) A LEFT OUTER JOIN (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento) B ON A.clave=B.usuario AND B.activo=1 LEFT OUTER JOIN (SELECT * FROM Cargos WHERE fraccionamiento=@s_fraccionamiento) C ON C.clave=B.clave_cargo LEFT OUTER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D ON A.domicilio=D.clave WHERE ISNULL(A.deshabilitado,0)<>1 ORDER BY D.calle ASC;
        ]]>
      </sql>
     </cargar>
  </ap__usuarios>
  
  <proyectos>
    
    <cargar>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[            
          SELECT indice,propuesta,titulo,  primerimg, ISNULL(AV.resueltos,0) resueltos,ISNULL(faltantes,1) faltantes 
          FROM (SELECT * FROM Proyectos WHERE fraccionamiento=@s_fraccionamiento AND @buscar IS NULL OR titulo like '%' + @buscar + '%') P LEFT OUTER JOIN 
          (SELECT proyecto,COUNT(CASE WHEN resuelto=1 THEN 1 ELSE NULL END) resueltos, COUNT(CASE WHEN ISNULL(resuelto,0)=0 THEN 1 ELSE NULL END) faltantes FROM ProyectosPresupuesto WHERE fraccionamiento=@s_fraccionamiento AND proyecto IS NOT NULL GROUP BY proyecto)AV ON P.indice=AV.proyecto 
          LEFT OUTER JOIN (SELECT * FROM (SELECT clave,ROW_NUMBER() OVER (PARTITION BY clave ORDER BY indice ASC) numerador, '_' + CONVERT(NVARCHAR(10),indice) + extension primerimg FROM [softronel].[imagenes_catalogos] WHERE catalogo=4)R WHERE numerador=1)IM ON P.indice=IM.clave
          ORDER BY fecha DESC;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Propuesta de proyecto" db_nombre="proyecto" form_nombre="proyecto" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[        
          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento; 
          
          DECLARE @clave_admin INT;
          SELECT @clave_admin=clave FROM Administracion WHERE usuario=@s_usuario AND activo=1;
          IF @clave_admin IS NOT NULL OR @usuarioMaster IS NOT NULL BEGIN
            IF @esNuevo=1 BEGIN
                INSERT INTO Proyectos(fraccionamiento,fecha,titulo,propuesta,responsable) VALUES(@s_fraccionamiento,GETDATE(),@titulo,@proyecto,@clave_admin);
                SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
                INSERT INTO Notificaciones (fraccionamiento,clave_admin,mensaje,fecha) VALUES(@s_fraccionamiento,@clave_admin,'Pasa a ejecución la iniciativa: ' + @titulo + ', que aprobó la mayoría.',GETDATE());
                SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento) para, 101 clave, 'Iniciativas' titulo,'Pasa a ejecución la iniciativa: ' + @titulo + ' , que aprobó la mayoría.' mensaje;               
             END ELSE BEGIN
                IF @clave IS NULL BEGIN
                  SELECT -1 estatus, 'Se requiere clave si desea editar.' mensaje;
                END ELSE BEGIN
                  UPDATE Proyectos SET fecha=GETDATE(),responsable=@clave_admin,titulo=@titulo WHERE indice=@clave;
                  SELECT @clave clave, 1 estatus, 'OK' mensaje;
                END
             END
           END ELSE BEGIN
            SELECT -1 estatus, 'No puede guardar, necesita estar en el comite de Administración' mensaje;
           END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
           SELECT indice clave,* FROM Proyectos WHERE  fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
           SELECT 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/proyectos/_' + CONVERT(NVARCHAR(100), clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension path, * FROM imagenes_Catalogos WHERE   clave=@claveItem AND catalogo=4/*Catalogo Proyectos*/;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          BEGIN TRY
            DELETE FROM Proyectos WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
            SELECT 1 estatus, 'OK' mensaje;
          END TRY BEGIN CATCH
            SELECT -1 estatus, 'No se puede borrar, este proyecto esta siendo referenciado por un presupuesto o gasto.' mensaje;
          END CATCH
          ]]>
      </sql>      
    </EliminarItem> 
    
    <ObtenerAvance>
      <campo leyenda="Clave de proyecto" db_nombre="proyecto" form_nombre="proyecto" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            SELECT * FROM ProyectosPresupuesto WHERE fraccionamiento=@s_fraccionamiento AND proyecto=@proyecto;
          ]]>
      </sql> 
    </ObtenerAvance>
    
  </proyectos>
  
  <estados_cuenta>
    
    <ObtenerItem>
        <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE   descripcion like @catalogo;
            SELECT 1;
            SELECT 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/' + @catalogo + '/_' + CONVERT(NVARCHAR(100), clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension path, * FROM imagenes_catalogos WHERE clave=@claveItem AND catalogo=@ccatalogo;
          ]]>
        </sql>
    </ObtenerItem>
    
    <Guardar>
      <sql>
        <![CDATA[
          SELECT 1 clave, 1 estatus, 'Continuar' mensaje; 
          ]]>
        </sql> 
    </Guardar>
  </estados_cuenta>
  
  <vigilancia>
    <RegistrarVisitaQR>
	   <campo leyenda="Clave" db_nombre="token" form_nombre="token" requerido="true" charsize="200" tipo="string"/>       
       <sql>
          <![CDATA[    
			IF EXISTS(SELECT * FROM Visitas WHERE token=@token AND DATEDIFF(mi,ISNULL(fecha,GETDATE()),GETDATE())<5 AND estatus IS NULL) BEGIN
				  DECLARE @domicilio NVARCHAR(200), @ndom INT,@visita INT;
				  SELECT @ndom=domicilio,@visita=indice FROM Visitas WHERE token=@token;
				  SELECT @domicilio='Calle ' + calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') FROM Domicilios WHERE clave=@ndom;          
				  UPDATE Visitas SET fecha=GETDATE(), estatus=1, u_realizo=@s_usuario WHERE token=@token;
				  SELECT 1 estatus, 'Visita Iniciada: ' + @domicilio mensaje, @visita visita, 1 solicitar_id;
				  SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_dom_'+ CONVERT(NVARCHAR(10),@ndom) para, 3 clave, 'La visita que programo ha llegado.', @domicilio mensaje;               
			END ELSE IF EXISTS(SELECT * FROM Visitas WHERE token=@token AND estatus = 1) BEGIN
				UPDATE Visitas SET fecha_cierre=GETDATE(), estatus=0, usuario_cierre=@s_usuario WHERE token=@token;
				SELECT 1 estatus, 'Visita Finalizada' mensaje, @visita visita, 0 solicitar_id;
			END ELSE BEGIN
				SELECT -1 estatus, 'Error, Acceso No permitido' mensaje;
			END
          ]]>
        </sql> 
	</RegistrarVisitaQR>
	
    <RegistrarRecepcion>
       <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
       <sql>
          <![CDATA[                   
               DECLARE @domicilio NVARCHAR(200);
              SELECT @domicilio=('Calle ' + calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'')) FROM Domicilios WHERE clave=(SELECT TOP(1) domicilio FROM usuarios_domicilio WHERE  fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario);          
              UPDATE Visitas SET recibido=1 WHERE  fraccionamiento=@s_fraccionamiento AND indice=@clave;
              SELECT 1 estatus, 'Resuelto' mensaje;
              SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_fun_1'+CONVERT(NVARCHAR(20),@domicilio) para, 3 clave, 'EL AVISO DE VISITA FUÉ RECIBIDO' titulo, @domicilio mensaje;                           
          ]]>
        </sql> 
    </RegistrarRecepcion>
    
    <PermitirVisita>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Permitir" db_nombre="permitir" form_nombre="permitir" requerido="true" charsize="0" tipo="bool"/>
       <sql>
          <![CDATA[          
              DECLARE @domicilio NVARCHAR(200);
              SELECT @domicilio=('Calle ' + calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'')) FROM Domicilios WHERE clave=(SELECT TOP(1) domicilio FROM usuarios_domicilio WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario);          
              UPDATE Visitas SET permitir=@permitir WHERE fraccionamiento=@s_fraccionamiento AND indice=@clave;
              SELECT 1 estatus, 'Resuelto' mensaje;
              SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_fun_1'+CONVERT(NVARCHAR(20),@domicilio) para, 3 clave, CASE WHEN @permitir=1 THEN 'PERMITIR ACCESO' ELSE 'DENEGAR ACCESO' titulo, @domicilio mensaje;               
          ]]>
        </sql> 
    </PermitirVisita>
      
    <GuardaClaveAcceso>
       <sql>
          <![CDATA[          
              UPDATE Visitas SET token=@token WHERE fraccionamiento=@s_fraccionamiento AND indice=@clave;
              SELECT 1 estatus, @token token;
          ]]>
        </sql> 
    </GuardaClaveAcceso>
    
    <ObtenerDomiciliosCoincidentes>
        <sql>
          <![CDATA[          
              SELECT calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'') domicilio, clave FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D INNER JOIN Usuarios_domicilio UD ON UD.fraccionamiento=@s_fraccionamiento AND D.clave=UD.domicilio AND UD.usuario=@s_usuario ORDER BY clave DESC;
          ]]>
        </sql>      
    </ObtenerDomiciliosCoincidentes>
    
    <BuscarDomicilio>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[          
             SET DATEFORMAT DMY;
            SET LANGUAGE ESPAÑOL;
            
            DECLARE @dia_corte NVARCHAR(5);SELECT TOP(1) @dia_corte=dia_corte FROM Config_Pagos_Hist WHERE  fraccionamiento=@s_fraccionamiento AND cat_default=1 ORDER BY fecha1 DESC;--PONER ESTE VALOR EN CONFIGURACION            
          
            DECLARE @items SMALLINT;
            SELECT @items=COUNT(item) FROM split(LTRIM(RTRIM(@buscar)), ' ');
            SELECT TOP(50)*,CONVERT(BIT,CASE WHEN MO.domicilio IS NOT NULL THEN 1 ELSE 0 END) activo FROM (SELECT titular, calle + ISNULL(' ' + numero,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt. ' + lote,'') domicilio, clave, COUNT(CASE WHEN B.item IS NOT NULL THEN 1 ELSE NULL END)cuenta FROM (SELECT * FROM Domicilios WHERE  fraccionamiento=@s_fraccionamiento) D LEFT OUTER JOIN (SELECT item FROM split(LTRIM(RTRIM(@buscar)),' '))B ON ' ' + D.calle + ISNULL(' ' + D.numero,'') + ISNULL(' ' + D.no_interior,'') like '%' + B.item + '%'  GROUP BY titular,numero,calle,segmento,no_interior, manzana,lote,clave)Q 
            LEFT OUTER JOIN(SELECT D.clave domicilio FROM(
                    SELECT domicilio,DATEADD(MM,1,MAX(CONVERT(DATE, '01-' + CONVERT(NVARCHAR(20),mes) + '-' + CONVERT(NVARCHAR(20),anio) )) )UFechaP FROM (
					            SELECT domicilio,mes,anio FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento
					            UNION ALL
					            SELECT domicilio,mes,anio FROM ConciliacionesCuotas WHERE fraccionamiento=@s_fraccionamiento
					            UNION ALL
					            SELECT domicilio,mes,anio FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento
			            )T GROUP BY domicilio
		             )A INNER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D ON A.domicilio=D.clave LEFT OUTER JOIN (SELECT dia_corte,indice FROM (SELECT dia_corte, config_pago indice, ROW_NUMBER() OVER(PARTITION BY config_pago ORDER BY fecha1 DESC) num FROM Config_Pagos_Hist WHERE fraccionamiento=@s_fraccionamiento)Aux WHERE num=1 ) CP ON  CP.indice=D.config_pago
                WHERE CASE WHEN DATEADD(DD,ISNULL(D.dia_corte,ISNULL(CP.dia_corte, @dia_corte)),UFechaP)>CONVERT(DATE,GETDATE()) THEN 1 WHEN D.prorroga>=CONVERT(DATE,GETDATE()) THEN 2 ELSE 0 END > 0
                GROUP BY D.clave
            )MO ON MO.domicilio=Q.clave
            WHERE cuenta=@items 
            ORDER BY cuenta DESC, Q.domicilio ASC;
        ]]>
      </sql>
    </BuscarDomicilio>
    
    <ObtenerPerfil>
      <sql>
        <![CDATA[        
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;    
          
            DECLARE @es_vigilancia BIT;
            DECLARE @domicilio INT;
            SELECT @es_vigilancia=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE  fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=1;/*1 es la clave de vigilancia*/
            IF @es_vigilancia IS NULL BEGIN
              SELECT @domicilio=domicilio FROM Usuarios WHERE  fraccionamiento=@s_fraccionamiento AND clave=@s_usuario;
            END
            SELECT ISNULL(@es_vigilancia, CONVERT(BIT,CASE WHEN @s_usuario=@usuarioMaster THEN 1 ELSE NULL END)) es_vigilancia,@domicilio domicilio;
        ]]>
      </sql>
    </ObtenerPerfil>

    <cargar>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
       <![CDATA[
			DECLARE @usuarioMaster INT;
			SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;        
        
          SET DATEFORMAT DMY;
            DECLARE @es_vigilancia BIT;
            DECLARE @domicilios AS TABLE (domicilio INT);
            SELECT @es_vigilancia=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1 OR @s_usuario=@usuarioMaster)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=1 ;/*1 es la clave de vigilancia*/
            IF @es_vigilancia IS NULL BEGIN
			   INSERT INTO @domicilios
              SELECT domicilio FROM Usuarios_domicilio WHERE usuario=@s_usuario;
            END
            SELECT ISNULL(@es_vigilancia, CONVERT(BIT,CASE WHEN @s_usuario=@usuarioMaster THEN 1 ELSE NULL END)) es_vigilancia, calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'') domicilio, CONVERT(NVARCHAR(20),V.fecha,113)fecha,CONVERT(NVARCHAR(20),V.fecha_programada,113)fecha_programada, V.* , (CASE WHEN fecha IS NULL AND CONVERT(DATE,fecha_programada)=CONVERT(DATE,GETDATE()) THEN 1 ELSE 0 END)orden FROM 
			(SELECT * FROM Visitas WHERE fraccionamiento=@s_fraccionamiento) V LEFT OUTER JOIN (SELECT * FROM Domicilios WHERE  fraccionamiento=@s_fraccionamiento) 
				D ON V.domicilio=D.clave WHERE ((domicilio IN (SELECT domicilio FROM @domicilios) AND @es_vigilancia IS NULL) OR @es_vigilancia IS NOT NULL  OR @s_usuario=@usuarioMaster) AND ( ((CASE WHEN ISDATE(@buscar)=1 THEN CONVERT(DATE,@buscar) ELSE NULL END)=fecha)  OR (ISDATE(@buscar)=0 AND ((D.calle + ISNULL(' ' + D.numero,'') + ISNULL(' ' + D.no_interior,'') like '%' + @buscar + '%')) )  OR @buscar IS NULL  OR(@buscar like V.token)) ORDER BY orden DESC,V.fecha DESC,V.fecha_programada DESC;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Visitante" db_nombre="visita" form_nombre="visita" requerido="false" charsize="300" tipo="string"/>
      <campo leyenda="Placas" db_nombre="placas" form_nombre="placas" requerido="false" charsize="20" tipo="string"/>
      <campo leyenda="Fecha programada" db_nombre="fecha_programada" form_nombre="fecha_programada" requerido="false" charsize="30" tipo="string"/>
      <campo leyenda="Otro" db_nombre="otro" form_nombre="otro" requerido="false" charsize="1000" tipo="string"/>
      <campo leyenda="Otro programo" db_nombre="otro_programo" form_nombre="otro_programo" requerido="false" charsize="1000" tipo="string"/>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <campo leyenda="Es vgilancia" db_nombre="es_vigilancia" form_nombre="es_vigilancia" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
          SET DATEFORMAT YMD;
          IF @esNuevo=1 BEGIN
            IF @es_vigilancia=1 BEGIN
              INSERT INTO Visitas(fraccionamiento,fecha_programo,visita,otro,U_realizo,placas,domicilio) VALUES(@s_fraccionamiento,GETDATE(),@visita,@otro,@s_usuario,@placas,@domicilio);
              SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;              
              INSERT INTO Notificaciones (domicilio,usuario,mensaje,fecha,funcion) VALUES(@domicilio,@s_usuario,'Tiene Visita:' + @visita,GETDATE(),1);              
              SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_dom_'+CONVERT(NVARCHAR(20),@domicilio) para, 2 clave, 'TIENE VISITA, DE ' + @visita contenido; 
           END ELSE BEGIN
              INSERT INTO Visitas(fraccionamiento,fecha_programo,fecha_programada,U_programo,domicilio,otro_programo) VALUES(@s_fraccionamiento,GETDATE(),@fecha_programada,@s_usuario,@domicilio,@otro_programo);
              SET @clave=CONVERT(INT,@@IDENTITY);
              INSERT INTO Notificaciones(domicilio,usuario,mensaje,fecha) VALUES(@domicilio,@s_usuario,'Programó Visita:' + @fecha_programada,GETDATE());
              SELECT @clave clave, 1 estatus, 'OK' mensaje;
           END
         END ELSE BEGIN
          IF(@clave IS NOT NULL)BEGIN
            IF @es_vigilancia=1 BEGIN
              UPDATE Visitas SET placas=@placas,visita=@visita,otro=@otro,fecha_programo=GETDATE(),u_realizo=@s_usuario WHERE  fraccionamiento=@s_fraccionamiento AND indice=@clave AND u_realizo IS NULL OR GETDATE()<=DATEADD(MI,10,fecha);
              SELECT 1 estatus, 'OK' mensaje, @clave clave;
              		SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_dom_'+CONVERT(NVARCHAR(20),@domicilio) para, 3 clave, 'TIENE VISITA: ' titulo, UPPER(@visita) mensaje; 
             END ELSE BEGIN
                UPDATE Visitas SET fecha_programada=@fecha_programada,otro_programo=@otro_programo WHERE fraccionamiento=@s_fraccionamiento AND indice=@clave AND (u_realizo IS NULL AND @s_usuario=u_programo);
                SELECT 1 estatus, 'OK' mensaje, @clave clave;                
             END
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         ENd
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT CONVERT(NVARCHAR(20),fecha_programada,103) fecha_programada,* FROM Visitas WHERE  fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE descripcion like @catalogo;
            BEGIN TRANSACTION T1;
            BEGIN TRY 
              DELETE FROM imagenes_Catalogos WHERE   clave=@claveItem AND catalogo=@ccatalogo; 
              DELETE FROM Comunicados WHERE  fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
              COMMIT TRANSACTION T1;
              SELECT 1 estatus, 'OK' mensaje;
            END TRY BEGIN CATCH
              ROLLBACK TRANSACTION T1;
              SELECT -1 estatus, 'Error al borrar' mensaje;
            END CATCH
            
          ]]>
      </sql>      
    </EliminarItem> 
    
  </vigilancia>
  
  <comunicados>
    
    <cargar>
      <campo leyenda="Busqueda" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="200" tipo="string"/>
      <sql tieneAnidacion="true" alias_xml="Items">
        <![CDATA[
			SET LANGUAGE Spanish;
            
            SELECT * FROM (VALUES('Encuesta'),('Respuesta'),('Comunicado'))Q(a);
            SELECT * FROM (VALUES('encuesta_respuesta|Encuesta,Respuesta|clave:encuesta'))B(a);
            SELECT CONVERT(NVARCHAR(20),fecha,103)fecha, A.*, CASE WHEN B.encuesta IS NOT NULL THEN 1 ELSE NULL END yaVoto FROM (SELECT * FROM Encuestas WHERE fraccionamiento=@s_fraccionamiento) A LEFT OUTER JOIN (SELECT encuesta,usuario FROM EncuestasVotacion WHERE usuario=@s_usuario GROUP BY encuesta,usuario)B ON  A.clave=B.encuesta WHERE A.activo=1 ORDER BY A.fecha;
            SELECT A.*,ISNULL(CONVERT(INT,ROUND(100.0*A.conteo/C.total,0)),0) porc, CASE WHEN B.respuesta IS NOT NULL THEN 1 ELSE NULL END respondio FROM (SELECT * FROM RespuestasEncuesta WHERE fraccionamiento=@s_fraccionamiento) A LEFT OUTER JOIN (SELECT encuesta,respuesta FROM EncuestasVotacion WHERE usuario=@s_usuario)B ON A.encuesta=B.encuesta AND A.clave=B.respuesta
              INNER JOIN(SELECT encuesta,SUM(conteo) total FROM RespuestasEncuesta WHERE activo=1 GROUP BY encuesta)C ON A.encuesta=C.encuesta WHERE A.activo=1

			SELECT primerimg,segimg,CONVERT(NVARCHAR(20),A.fecha,103) fecha,A.*,C.nombre, mensaje descripcion FROM (SELECT * FROM comunicados WHERE  fraccionamiento=@s_fraccionamiento AND (titulo like '%' + @buscar + '%' OR @buscar IS NULL)) A LEFT OUTER JOIN (SELECT * FROM administracion WHERE fraccionamiento=@s_fraccionamiento) B ON A.clave_administrador=B.clave LEFT OUTER JOIN (SELECT * FROM Cargos WHERE fraccionamiento=@s_fraccionamiento) C ON C.clave=B.clave_cargo
            LEFT OUTER JOIN (SELECT * FROM (SELECT clave,ROW_NUMBER() OVER (PARTITION BY clave ORDER BY indice ASC) numerador, '_' + CONVERT(NVARCHAR(10),indice) + extension primerimg FROM [softronel].[imagenes_catalogos] WHERE catalogo=1)R WHERE numerador=1)IM ON A.clave=IM.clave
            LEFT OUTER JOIN (SELECT * FROM (SELECT clave,ROW_NUMBER() OVER (PARTITION BY clave ORDER BY indice ASC) numerador, 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/comunicados/_' + CONVERT(NVARCHAR(100), clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension segimg FROM [softronel].[imagenes_catalogos] WHERE catalogo=1)R WHERE numerador=2)IM2 ON A.clave=IM2.clave
			
			
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="8000" tipo="string"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
          DECLARE @clave_admin INT;
          SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
        IF @esNuevo=1 BEGIN
          INSERT INTO Comunicados(fecha,clave_Administrador,titulo,mensaje,fraccionamiento) VALUES(GETDATE(),@clave_admin,@titulo,@descripcion,@s_fraccionamiento);
          SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
          INSERT INTO Notificaciones (fraccionamiento,clave_admin,mensaje,fecha) VALUES(@s_fraccionamiento,@clave_admin,'Nuevo Comunicado:' + @titulo,GETDATE());
         END ELSE BEGIN
          IF(@clave IS NOT NULL)BEGIN
            UPDATE Comunicados SET fecha=GETDATE(),clave_Administrador=@clave_admin,titulo=@titulo,mensaje=@descripcion WHERE clave=@clave;
            SELECT 1 estatus, 'OK' mensaje, @clave clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         ENd
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE descripcion like @catalogo;
            SELECT CONVERT(NVARCHAR(20),fecha,113) fecha,C.*,P.usuario + ' ' + ISNULL(P.apellidos,'') nombre,G.nombre cargo FROM (SELECT * FROM Comunicados WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem)C LEFT OUTER JOIN (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento) A ON C.clave_administrador=A.clave LEFT OUTER JOIN (SELECT * FROM usuarios WHERE fraccionamiento=@s_fraccionamiento) P ON P.clave=A.usuario LEFT OUTER JOIN (SELECT * FROM Cargos WHERE  fraccionamiento=@s_fraccionamiento) G ON A.clave_cargo=G.clave;
            SELECT 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/' + @catalogo + '/_' + CONVERT(NVARCHAR(100), clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension path, * FROM imagenes_Catalogos WHERE   clave=@claveItem AND catalogo=@ccatalogo;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @clave_admin INT;
            SELECT @clave_admin=clave FROM Administracion WHERE  fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @catalogo;
            IF @clave_admin IS NOT NULL BEGIN
              BEGIN TRANSACTION T1;
              BEGIN TRY 
                DELETE FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo; 
                DELETE FROM Comunicados WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
                COMMIT TRANSACTION T1;
                SELECT 1 estatus, 'OK' mensaje;
              END TRY BEGIN CATCH
                ROLLBACK TRANSACTION T1;
                SELECT -1 estatus, 'Error al borrar' mensaje;
              END CATCH
            END
            
          ]]>
      </sql>      
    </EliminarItem> 
    
  </comunicados>
  
  
  <convenios>
    
    <cargar>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            SELECT indice clave,* FROM Convenios WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="200" tipo="string"/>
      <campo leyenda="Porcentaje de pago" db_nombre="porc_pago" form_nombre="porc_pago" requerido="true" charsize="0" tipo="float"/>
      <campo leyenda="Porcentaje de descuento" db_nombre="porc_dcto" form_nombre="porc_dcto" requerido="true" charsize="0" tipo="float"/>
      <campo leyenda="Cantidad cuotas antiguas" db_nombre="ctd_meses_ant" form_nombre="ctd_meses_ant" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Cantidad cuotas recientes" db_nombre="ctd_meses_recientes" form_nombre="ctd_meses_recientes" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
          DECLARE @tiene_permiso BIT;          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE  fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=19;
          IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
            IF @esNuevo=1 BEGIN
              INSERT INTO Convenios(domicilio,fecha,descripcion,responsable,porcentaje_pago,porcentaje_dcto,ctd_meses_ant,ctd_meses_actuales,fraccionamiento) VALUES(@domicilio,GETDATE(),@descripcion,@s_usuario,@porc_pago,@porc_dcto,@ctd_meses_ant,@ctd_meses_recientes,@s_fraccionamiento);
              SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
              INSERT INTO Notificaciones (fraccionamiento,usuario,mensaje,fecha) VALUES(@s_fraccionamiento,@s_usuario,'Tiene un convenio de pago, Porcentaje de pago:' + CONVERT(NVARCHAR(10),@porc_pago) + ', Porcentaje de descuento:' + CONVERT(NVARCHAR(10),@porc_dcto),GETDATE());
              SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_dom_' + CONVERT(NVARCHAR(10),@domicilio) para, 'Se le asignó convenio de pago: ' titulo, CONVERT(NVARCHAR(10),@porc_dcto) + ' de descuento; ' + CONVERT(NVARCHAR(10),@porc_pago) + ' a pagar. ' mensaje, 100 clave; 
            END ELSE BEGIN
            IF(@clave IS NOT NULL)BEGIN
              UPDATE Convenios SET fecha=GETDATE(),descripcion=@descripcion,responsable=@s_usuario,porcentaje_dcto=@porc_dcto,porcentaje_pago=@porc_pago, ctd_meses_ant=@ctd_meses_ant, ctd_meses_actuales=@ctd_meses_recientes WHERE indice=@clave;
              SELECT 1 estatus, 'OK' mensaje, @clave clave;
            END ELSE 
              SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
            END
          END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
           SELECT * FROM Convenios WHERE indice=@claveItem;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[            
          DECLARE @tiene_permiso BIT;          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=19;
          IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
              BEGIN TRANSACTION T1;
              BEGIN TRY 
				UPDATE CancelacionPagos SET convenio=null WHERE fraccionamiento=@s_fraccionamiento AND convenio=@claveItem;
				UPDATE RecibosEliminados SET convenio=null WHERE fraccionamiento=@s_fraccionamiento AND convenio=@claveItem;
                DELETE FROM Convenios WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
                COMMIT TRANSACTION T1;
                SELECT 1 estatus, 'OK' mensaje;
              END TRY BEGIN CATCH
                ROLLBACK TRANSACTION T1;
                SELECT -1 estatus, 'Error al borrar' mensaje;
              END CATCH
           END 
            
          ]]>
      </sql>      
    </EliminarItem> 
    
  </convenios>
  
   <config_pagos>
	<GuardarConfPagos>
		<campo leyenda="Grupo de configuración" db_nombre="grupo_config" form_nombre="grupo_config" requerido="true" charsize="0" tipo="int"/>
		<sql>
        <![CDATA[
			UPDATE Fraccionamientos SET conf_pagos_default=@grupo_config WHERE clave=@s_fraccionamiento;
			UPDATE config_pagos_hist SET cat_default=0 WHERE fraccionamiento=@s_fraccionamiento;
            UPDATE config_pagos_hist SET cat_default=1 WHERE config_pago=@grupo_config AND fraccionamiento=@s_fraccionamiento;
			SELECT 1 estatus, CASE WHEN @@ROWCOUNT >0 THEN 'Guardado correctamente' ELSE 'No se encontraron registros con esta configuración.' END mensaje;
        ]]>
      </sql>
	</GuardarConfPagos>
    
    <cargar>
      <sql>
        <![CDATA[
            SELECT indice clave,*, CONVERT(NVARCHAR(20),fecha1,103) + '-' + CONVERT(NVARCHAR(20),fecha2,103) rango, 0.10 tasa_descuento FROM config_pagos_hist WHERE fraccionamiento=@s_fraccionamiento;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Grupo de configuración" db_nombre="grupo_config" form_nombre="grupo_config" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Fecha inicial" db_nombre="fecha1" form_nombre="fecha1" requerido="true" charsize="10" tipo="string"/>
      <campo leyenda="Fecha final" db_nombre="fecha2" form_nombre="fecha2" requerido="true" charsize="10" tipo="string"/>
      <campo leyenda="cuota" db_nombre="cuota" form_nombre="cuota" requerido="true" charsize="0" tipo="float"/>
      <campo leyenda="Porcentaje de mora" db_nombre="porcent_mora" form_nombre="porcent_mora" requerido="true" charsize="0" tipo="float"/>
      <campo leyenda="Cantidad de meses para descuento" db_nombre="ctd_mes_dcto" form_nombre="ctd_mes_dcto" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Día de corte" db_nombre="dia_corte" form_nombre="dia_corte" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Condición de pago" db_nombre="cond_pag" form_nombre="cond_pag" requerido="true" charsize="15" tipo="string"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
          DECLARE @tiene_permiso BIT;          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=19;
          IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
            IF @esNuevo=1 BEGIN
              INSERT INTO config_pagos_hist(fecha1,fecha2,config_pago,responsable,cuota,porcent_mora,ctd_mes_dcto,es_paq,es_mayor_que,dia_corte,fraccionamiento) VALUES(@fecha1,@fecha2,@grupo_config,@s_usuario,@cuota,@porcent_mora,@ctd_mes_dcto,CASE WHEN @cond_pag='es_paq' THEN 1 ELSE NULL END,CASE WHEN @cond_pag='es_mayor_que' THEN 1 ELSE NULL END,@dia_corte,@s_fraccionamiento);              
              SET @clave=@@IDENTITY;
              SELECT CONVERT(INT,@clave) clave, 1 estatus, 'OK' mensaje;
              INSERT INTO Notificaciones (fraccionamiento,usuario,mensaje,fecha) VALUES(@s_fraccionamiento,@s_usuario,'Se creo una nuava categoría de pagos',GETDATE()); 			  			  
            END ELSE BEGIN
            IF(@clave IS NOT NULL)BEGIN
              UPDATE config_pagos_hist SET fecha1=@fecha1,fecha2=@fecha2,config_pago=@grupo_config,responsable=@s_usuario,cuota=@cuota,porcent_mora=@porcent_mora,ctd_mes_dcto=@ctd_mes_dcto,es_paq=CASE WHEN @cond_pag='es_paq' THEN 1 ELSE NULL END,es_mayor_que=CASE WHEN @cond_pag='es_mayor_que' THEN 1 ELSE NULL END,dia_corte=@dia_corte WHERE indice=@clave;              
              SELECT 1 estatus, 'OK' mensaje, @clave clave;
            END ELSE 
              SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
            END
			UPDATE config_pagos_hist SET cat_default=0 WHERE fraccionamiento=@s_fraccionamiento;
			UPDATE config_pagos_hist SET cat_default=1 WHERE config_pago=(SELECT conf_pagos_default FROM Fraccionamientos WHERE clave=@s_fraccionamiento) AND fraccionamiento=@s_fraccionamiento;
          END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
           SELECT CONVERT(NVARCHAR(20),fecha1,103) fecha1, CONVERT(NVARCHAR(20),fecha2,103) fecha2,* FROM config_pagos_hist WHERE indice=@claveItem AND fraccionamiento=@s_fraccionamiento;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[            
          DECLARE @tiene_permiso BIT;          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=20;
          IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
              BEGIN TRANSACTION T1;
              BEGIN TRY 
                DELETE FROM config_pagos_hist WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
                COMMIT TRANSACTION T1;
                SELECT 1 estatus, 'OK' mensaje;
              END TRY BEGIN CATCH
                ROLLBACK TRANSACTION T1;
                SELECT -1 estatus, 'Error al borrar' mensaje;
              END CATCH
           END 
            
          ]]>
      </sql>      
    </EliminarItem> 
    
  </config_pagos>
  
  <talleres>
    
    <cargar>
      <sql>
        <![CDATA[
            SELECT primerimg,CONVERT(NVARCHAR(20),A.fecha,113) fecha1, A.* FROM (SELECT * FROM talleres WHERE  fraccionamiento=@s_fraccionamiento) A 
            LEFT OUTER JOIN (SELECT * FROM (SELECT clave,ROW_NUMBER() OVER (PARTITION BY clave ORDER BY indice ASC) numerador, '_' + CONVERT(NVARCHAR(10),indice) + extension primerimg FROM [softronel].[imagenes_catalogos] WHERE fraccionamiento=@s_fraccionamiento AND catalogo=1)R WHERE numerador=1)IM ON A.clave=IM.clave
            ORDER BY fecha DESC;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="50" tipo="string"/>
        <campo leyenda="Horario" db_nombre="horario" form_nombre="horario" requerido="true" charsize="500" tipo="string"/>
        <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="500" tipo="string"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
          DECLARE @clave_admin INT;
          SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
        IF @esNuevo=1 BEGIN
          INSERT INTO talleres(fecha,usuario,titulo,descripcion,horario,telefonos,email,vigencia,fraccionamiento) VALUES(GETDATE(),@s_usuario,@titulo,@descripcion,@horario,@telefonos,@email,@vigencia,@s_fraccionamiento);
          SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
          INSERT INTO Notificaciones (fraccionamiento,usuario,mensaje,fecha) VALUES(@s_fraccionamiento,@s_usaurio,'Se abre nuevo taller:' + @titulo,GETDATE());
         END ELSE BEGIN
          IF(@clave IS NOT NULL)BEGIN
            UPDATE talleres SET fecha=GETDATE(),usuario=@s_usaurio,titulo=@titulo,descripcion=@descripcion,horario=@horario,telefonos=@telefonos,email=@email,vigencia=@vigencia WHERE clave=@clave;
            SELECT 1 estatus, 'OK' mensaje, @clave clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         ENd
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE descripcion like @catalogo;
            SELECT CONVERT(NVARCHAR(20),fecha,113) fecha,C.*,P.usuario + ' ' + ISNULL(P.apellidos,'') nombre FROM (SELECT * FROM talleres WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem)C LEFT OUTER JOIN (SELECT * FROM usuarios WHERE fraccionamiento=@s_fraccionamiento) P ON P.clave=C.usuario;
            SELECT 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/' + @catalogo + '/_' + CONVERT(NVARCHAR(100), clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension path, * FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @clave_admin INT;
            SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @catalogo;
            IF @clave_admin IS NOT NULL BEGIN
              BEGIN TRANSACTION T1;
              BEGIN TRY 
                DELETE FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo; 
                DELETE FROM talleres WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
                COMMIT TRANSACTION T1;
                SELECT 1 estatus, 'OK' mensaje;
              END TRY BEGIN CATCH
                ROLLBACK TRANSACTION T1;
                SELECT -1 estatus, 'Error al borrar' mensaje;
              END CATCH
            END
            
          ]]>
      </sql>      
    </EliminarItem> 
    
  </talleres>
  
    
  <solicitudes_res>
     <cargar>     
      <sql>
        <![CDATA[
          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
        
          DECLARE @tiene_permiso BIT;
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=3;/* es la clave para cobro de cuotas*/
          SELECT ISNULL(T.a_cuenta,0.0) a_cuenta, CONVERT(BIT,CASE WHEN T.a_cuenta>=W.pago_neg THEN 1 ELSE 0 END) pagado,W.* FROM (SELECT * FROM SolicitudesReservacion WHERE fraccionamiento=@s_fraccionamiento AND (usaurio_reg=@s_usuario OR @usuarioMaster=1 OR @tiene_permiso=1))W LEFT OUTER JOIN  (SELECT solicitud,SUM(monto) a_cuenta FROM PagosReservaciones WHERE fraccionamiento=@s_fraccionamiento GROUP BY solicitud)T ON W.folio=T.solicitud;
        ]]>
      </sql>
    </cargar>  
  </solicitudes_res>
  
  <pagos_res>
     <cargar>        
      <campo leyenda="Folio" db_nombre="folio" form_nombre="folio" requerido="true" charsize="0" tipo="int"/>      
      <sql>
        <![CDATA[
          SET LANGUAGE ESPAÑOL;
          DECLARE @total DECIMAL(10,2);
          SELECT @total=pago_neg FROM SolicitudesReservacion WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
          SELECT A.folio, CONVERT(NVARCHAR(20),A.fecha_reg,113) fecha_reg, B.Total,A.monto abono,B.total-SUM(A.monto) OVER( ORDER BY A.fecha_reg ASC) AS restante FROM (SELECT * FROM PagosReservaciones WHERE fraccionamiento=@s_fraccionamiento AND solicitud=@folio) A INNER JOIN (SELECT Total FROM (VALUES(@total))Q(total))B ON 1=1;
        ]]>
      </sql>
    </cargar>  
    
    <RealizarPagoRes>     
      <campo leyenda="Monto" db_nombre="monto" form_nombre="abono" requerido="true" charsize="0" tipo="float"/>    
      <campo leyenda="Solicitud" db_nombre="solicitud" form_nombre="solicitud" requerido="true" charsize="0" tipo="int"/>       
      <sql>
        <![CDATA[
          DECLARE @excede BIT;DECLARE @pagado BIT;
          SELECT TOP(1) @excede=CONVERT(BIT,CASE WHEN ISNULL(T.a_cuenta,0.0) + @monto>W.pago_neg THEN 1 ELSE 0 END), @pagado=CONVERT(BIT,CASE WHEN ISNULL(T.a_cuenta,0.0)>=W.pago_neg THEN 1 ELSE 0 END) FROM (SELECT * FROM SolicitudesReservacion WHERE fraccionamiento=@s_fraccionamiento AND folio=@solicitud) W LEFT OUTER JOIN  (SELECT solicitud,SUM(monto) a_cuenta FROM PagosReservaciones WHERE fraccionamiento=@s_fraccionamiento GROUP BY solicitud)T ON W.folio=T.solicitud;
          IF @pagado=1 BEGIN
            SELECT -1 estatus,'No se puede registrar. Ya se encuentra pagada la reservación.' mensaje;
          END ELSE IF @excede=1 BEGIN
            SELECT -1 estatus,'No se puede registrar, la cantidad excedería el monto total.' mensaje;
          END ELSE IF @monto=0 BEGIN
            SELECT -1 estatus,'Debe ser mayor que 0.' mensaje;
          END ELSE  BEGIN
            INSERT INTO PagosReservaciones(monto,solicitud,usuario_reg,fecha_reg,fraccionamiento) VALUES(@monto,@solicitud,@s_usuario,GETDATE(),@s_fraccionamiento);      
            SELECT 1 estatus,'Guardado correctamente' mensaje;
          END
          
        ]]>
      </sql>
    </RealizarPagoRes>
    
  </pagos_res>
  
  <reservaciones>
    <GenerarSolicitudRes>
      <campo leyenda="Nombre" db_nombre="nombre" form_nombre="nombre" requerido="true" charsize="20" tipo="string"/>      
      <campo leyenda="Monto" db_nombre="monto" form_nombre="monto" requerido="true" charsize="0" tipo="float"/>      
      <campo leyenda="Pago a cuenta " db_nombre="pago_a_cuenta" form_nombre="pago_a_cuenta" requerido="false" charsize="0" tipo="float" default="0.0"/>      
      <campo leyenda="Observaciones" db_nombre="observaciones" form_nombre="observaciones" requerido="true" charsize="500" tipo="string"/> 
      <campo leyenda="Usuario" db_nombre="usuario" form_nombre="usuario" requerido="true" charsize="0" tipo="int"/>      
      <campo leyenda="Es nuevo" db_nombre="esnuevo" form_nombre="esnuevo" requerido="false" charsize="0" tipo="bool"/>      
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>      
      <sql>
        <![CDATA[
          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
          DECLARE @clave_admin INT;
          SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
          DECLARE @tiene_permiso BIT;
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario  AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=7;
          IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
            BEGIN TRANSACTION Tx;
            BEGIN TRY
                DECLARE @folio INT;
                INSERT INTO SolicitudesReservacion(pago_neg,observaciones,a_nombre,usaurio_reg,fecha_reg,fraccionamiento) VALUES(@monto,@observaciones,@nombre,@s_usuario,GETDATE(),@s_fraccionamiento);
                SET @folio=@@IDENTITY;
                UPDATE Reservaciones SET solicitud=@folio WHERE fraccionamiento=@s_fraccionamiento AND usuario=@usuario AND solicitud IS NULL AND ISNULL(cancelado,0)=0;
                IF @pago_a_cuenta>0.0 BEGIN
                  INSERT INTO PagosReservaciones(monto,solicitud,usuario_reg,fecha_reg,fraccionamiento) VALUES(@pago_a_cuenta,@folio,@s_usuario,GETDATE(),@s_fraccionamiento);                
                END
              SELECT @folio folio, 1 estatus, 'Guardado correctamente.' mensaje;           
             COMMIT TRANSACTION Tx;
            END TRY BEGIN CATCH
              ROLLBACK TRANSACTION Tx;
              SELECT -1 estatus, 'Error al guardar, verifique información.' mesaje, ERROR_MESSAGE() detalle;
            END CATCH
          END ELSE BEGIN
              SELECT -1 estatus, 'No tiene habilitada esta función.' mesaje;
          END
        ]]>
      </sql>
    </GenerarSolicitudRes>
     
    <ObtenercuentaReservaciones>
      <campo leyenda="Usuario" db_nombre="usuario" form_nombre="usuario" requerido="false" charsize="0" tipo="int"/>      
      <campo leyenda="Solicitud" db_nombre="solicitud" form_nombre="solicitud" requerido="false" charsize="0" tipo="int"/>      
      <campo leyenda="Cuenta en sesión" db_nombre="desesion" form_nombre="desesion" requerido="false" charsize="0" tipo="bool"/>      
      <sql>
        <![CDATA[
          IF(@desesion=1) SET @usuario=@s_usuario;
          SET DATEFORMAT DMY;
          DECLARE @t AS TABLE(fr NVARCHAR(20),inicio NVARCHAR(20),fin NVARCHAR(20),descripcion NVARCHAR(300), horas DECIMAL(10,2),importe DECIMAL(10,2),inmueble NVARCHAR(200),cuotah DECIMAL(10,2));
          INSERT INTO @t 
          SELECT CONVERT(NVARCHAR(20),fecha_reservada,106) fr, CONVERT(NVARCHAR(10),inicio,100) inicio,CONVERT(NVARCHAR(10),fin,100) fin, R.descripcion, CONVERT(DECIMAL(10,1),DATEDIFF(mi,inicio,fin)*1.0/60.0) horas, CONVERT(DECIMAL(10,2),((DATEDIFF(mi,inicio,fin))*1.0/60.0)*ISNULL(CU.cuotah,0.0)) importe,CU.titulo inmueble, ISNULL(CU.cuotah,0.0) cuotah          
          FROM (SELECT * FROM Reservaciones WHERE fraccionamiento=@s_fraccionamiento AND (solicitud=@solicitud OR (@solicitud IS NULL AND usuario=@usuario AND solicitud IS NULL))) R
          LEFT OUTER JOIN (SELECT * FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento) CU ON R.inmueble=CU.indice
          ;
          
          SELECT * FROM @t;
          SELECT SUM(horas) totalhoras, SUM(importe) total, @usuario usuario FROM @t;
      
        ]]>
      </sql>
    </ObtenercuentaReservaciones>
      
    <ObtenerReservaciones>
      <campo leyenda="Año" db_nombre="anio" form_nombre="anio" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Mes" db_nombre="mes" form_nombre="mes" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave de inmueble" db_nombre="inmueble" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            SELECT CONVERT(NVARCHAR(20),fecha_reservada,103) fr FROM Reservaciones WHERE fraccionamiento=@s_fraccionamiento AND inmueble=@inmueble AND MONTH(fecha_reservada)=@mes AND YEAR(fecha_reservada)=@anio;
        ]]>
      </sql>
    </ObtenerReservaciones>
    
    <cargar>
      <campo leyenda="Fecha" db_nombre="fecha" form_nombre="fecha" requerido="true" charsize="20" tipo="string"/>
      <campo leyenda="Clave de inmueble" db_nombre="inmueble" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          SET DATEFORMAT DMY;
          SELECT CONVERT(NVARCHAR(20),fecha_reservada,106) fr, CONVERT(NVARCHAR(10),inicio,100) inicio,CONVERT(NVARCHAR(10),fin,100) fin, R.descripcion,
          ISNULL(D.calle,'') + ISNULL(' ' + D.numero,'') + ISNULL(D.no_interior,'') + ISNULL(' Mz. ' + D.manzana,'') + ISNULL(' Lt. ' + D.lote,'') domicilio
          FROM (SELECT * FROM Reservaciones WHERE fraccionamiento=@s_fraccionamiento) R LEFT OUTER JOIN (SELECT * FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento) U ON R.usuario=U.clave LEFT OUTER JOIN (SELECT * FROM Domicilios WHERE  fraccionamiento=@s_fraccionamiento) D ON U.domicilio=D.clave WHERE inmueble=@inmueble AND fecha_reservada=@fecha;
        ]]>
      </sql>
    </cargar>    
    
    <Guardar>
      <campo leyenda="Clave de domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Fecha reservada" db_nombre="fecha_reservada" form_nombre="fecha_reservada" requerido="true" charsize="20" tipo="string"/>
      <campo leyenda="Hora inicio" db_nombre="inicio_" form_nombre="inicio" requerido="true" charsize="20" tipo="string"/>
      <campo leyenda="Hora fin" db_nombre="fin_" form_nombre="fin" requerido="true" charsize="20" tipo="string"/>
        <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Clave de inmueble" db_nombre="inmueble" form_nombre="inmueble" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[        
            SET DATEFORMAT DMY;
            DECLARE @inicio TIME;SET @inicio=CONVERT(TIME,@inicio_);
            DECLARE @fin TIME;SET @fin=CONVERT(TIME,@fin_);
            DECLARE @inmueble_s NVARCHAR(300);SELECT @inmueble_s=(UPPER(titulo) + ': ' + @fecha_reservada + ' De ' + @inicio_ + ' a ' + @fin_ + ' ;' + SUBSTRING(descripcion,0,50)) FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento AND catalogo=8 AND indice=@inmueble;
            BEGIN TRY 
                IF @inicio<@fin BEGIN
                  IF NOT EXISTS(SELECT * FROM Reservaciones WHERE fraccionamiento=@s_fraccionamiento AND CONVERT(DATE,fecha_reservada)=CONVERT(DATE,@fecha_reservada) AND ( ((inicio<@inicio AND @inicio<fin) OR (inicio<@fin AND @fin<fin)) OR (@inicio<inicio AND fin<@fin) )) BEGIN
                    IF @esNuevo=1 BEGIN
                      INSERT INTO Reservaciones(fecha,fecha_reservada,usuario,descripcion,inicio,fin,inmueble,fraccionamiento,domicilio) VALUES(GETDATE(),@fecha_reservada,@s_usuario,@descripcion,@inicio,@fin,@inmueble,@s_fraccionamiento,@domicilio);
                      SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
                      SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_fun_7' para, 'Nueva reservación: ' titulo, @inmueble_s mensaje, 100 clave; 
                     END ELSE BEGIN
                      IF(@clave IS NOT NULL)BEGIN
                        UPDATE Reservaciones SET fecha=GETDATE(),fecha_reservada=@fecha_reservada,usuario=@s_usuario,inicio=@inicio,fin=@fin WHERE indice=@clave;
                        SELECT 1 estatus, 'OK' mensaje, @clave clave;
                     END ELSE 
                        SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
                     END
                  END ELSE BEGIN
                    SELECT -1 estatus, 'Lo sentimos, este horario se cruza con otro ya reservado.' mensaje; 
                  END
               END ELSE BEGIN
                  SELECT -1 estatus, 'La hora inicio debe ser menor que la hora fin.' mensaje; 
               END
            END TRY BEGIN CATCH
              SELECT -1 estatus, 'El formato de la hora es HH:MM en 24 Hrs, por ejemplo 16:15, para indicar 4:30 pm.' mensaje 
            END CATCH
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>        
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT CONVERT(NVARCHAR(20),fecha_reservada,103) fecha_reservada, * FROM Reservaciones WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            UPDATE Reservaciones SET cancelado=1 WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem AND usuario=@s_usuario AND CONVERT(DATE,fecha)<=CONVERT(DATE,GETDATE());
          ]]>
      </sql>      
    </EliminarItem> 
    
  </reservaciones>

  <pro_propuestas>
    
     <ObtenerVotosPP>
       <campo leyenda="Clave de proyecto" db_nombre="clave" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          SELECT  ISNULL(D.calle,'') + ISNULL(' ' + D.numero,'') + ISNULL(' Mz. ' + D.manzana,'') + ISNULL(' Lt. ' + D.lote,'') domicilio, PV.voto FROM (SELECT * FROM ProyectosVotacion WHERE  fraccionamiento=@s_fraccionamiento) PV INNER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D ON PV.domicilio=D.clave WHERE PV.pro_proyecto=@clave;
        ]]>
      </sql>
    </ObtenerVotosPP>
    
    <RegistrarVotoProP>
       <campo leyenda="Clave de proyecto" db_nombre="clave" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
        <campo leyenda="Voto" db_nombre="voto" form_nombre="voto" requerido="true" charsize="0" tipo="bool"/>
        <sql>
          <![CDATA[    
              DECLARE @domicilio INT;
              SET @domicilio=(SELECT TOP(1) domicilio FROM Usuarios_domicilio WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario);
              @@subquery=[ap_domicilios.ObtenerUltimaFechaPagada]  
              IF @es_activo=1 BEGIN
                BEGIN TRY
                  INSERT INTO ProyectosVotacion(fraccionamiento,fecha,pro_proyecto,voto,usuario,domicilio) SELECT @s_fraccionamiento,GETDATE(),@clave,@voto,usuario,domicilio FROM Usuarios_domicilio WHERE usuario=@s_usuario; 
                  SELECT 1 estatus,'OK' mensaje;
                END TRY BEGIN CATCH
                  SELECT -1 estatus,'No puede volver a votar' mensaje;
                END  CATCH    
               END ELSE BEGIN
                  SELECT -1 estatus,'Lo sentimos, necesita tener estatus activo para poder votar.' mensaje, @dia_corte fechapago;
               END
            ]]>
        </sql>
    </RegistrarVotoProP>
    
    <cargar>
      <campo leyenda="Busqueda" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="200" tipo="string"/>
      <sql>
        <![CDATA[
          SET LANGUAGE Español;         
          
          DECLARE @totalDomicilios INT,@domicilio INT;
          SET @totalDomicilios=(SELECT COUNT(clave) FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento);
		  IF @totalDomicilios=0  SET @totalDomicilios=NULL;
         SELECT TOP(20)
	          A.clave,A.titulo,CONVERT(NVARCHAR(20),A.fecha,100)fecha,A.cerrado, B.voto,ISNULL(CONVERT(DECIMAL(10,2),100.0*CV.c_no/@totalDomicilios),0) porc_no,ISNULL(CONVERT(DECIMAL(10,2),CV.c_si*100.0/@totalDomicilios),0) porc_si,ISNULL(CONVERT(DECIMAL(10,2),100.0*(@totalDomicilios-ISNULL(CV.c_si+CV.c_no,0))/@totalDomicilios),0) porc_abst
          FROM (SELECT * FROM PropuestasProyectos WHERE  fraccionamiento=@s_fraccionamiento) A LEFT OUTER JOIN (SELECT pro_proyecto,domicilio,usuario,voto FROM ProyectosVotacion WHERE fraccionamiento=@s_fraccionamiento AND domicilio IN (SELECT domicilio FROM Usuarios_domicilio WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario) GROUP BY voto,pro_proyecto,domicilio,usuario)B ON  A.clave=B.pro_proyecto LEFT OUTER JOIN
          (SELECT pro_proyecto, COUNT(CASE WHEN voto=1 THEN 1 ELSE NULL END)c_si, COUNT(CASE WHEN voto=0 THEN 1 ELSE NULL END)c_no FROM ProyectosVotacion WHERE fraccionamiento=@s_fraccionamiento GROUP BY pro_proyecto)CV ON A.clave=CV.pro_proyecto WHERE @buscar IS NULL OR A.titulo like '%'+ @buscar +'%' ORDER BY A.fecha DESC;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="300" tipo="string"/>
        <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
        IF @esNuevo=1 BEGIN
          INSERT INTO PropuestasProyectos(fraccionamiento,fecha,realizo,titulo,descripcion) VALUES(@s_fraccionamiento,GETDATE(),@s_usuario,@titulo,@descripcion);
          SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
          INSERT INTO Notificaciones (fraccionamiento,usuario,mensaje,fecha) VALUES(@s_fraccionamiento,@s_usuario,'Nueva propuesta de proyecto:' + @titulo,GETDATE());
          SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento) para, 'Nueva propuesta: ' + UPPER(@titulo) mensaje, 100 clave; 
         END ELSE BEGIN
            DECLARE @realizo INT;
            SELECT @realizo=realizo FROM PropuestasProyectos WHERE fraccionamiento=@s_fraccionamiento AND clave=@clave;
            IF @realizo=@s_usuario BEGIN
              IF(@clave IS NOT NULL)BEGIN
                UPDATE PropuestasProyectos SET fecha=GETDATE(),realizo=@s_usuario,titulo=@titulo,descripcion=@descripcion WHERE clave=@clave;
                SELECT 1 estatus, 'OK' mensaje, @clave clave;
              END ELSE BEGIN
                SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
              END
            END ELSE BEGIN
                SELECT -1 estatus, 'No puede editar, debe ser quien creó este registro.' mensaje;
            END
         END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like 'pro_propuestas';
            DECLARE @voto INT;
            DECLARE @cuenta INT;
            DECLARE @domicilio INT;
            SELECT @domicilio=domicilio FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento AND clave=@s_usuario;
            SELECT @voto=MAX(CASE WHEN domicilio=@domicilio AND voto=0 THEN 2 WHEN domicilio=@domicilio AND voto=1 THEN 1 ELSE NULL END), @cuenta=COUNT(indice) FROM ProyectosVotacion WHERE fraccionamiento=@s_fraccionamiento AND pro_proyecto=@claveItem GROUP BY pro_proyecto;
            
            SELECT @voto voto, @cuenta cuenta, CASE WHEN @s_usuario=realizo THEN 1 ELSE NULL END realizo, CONVERT(NVARCHAR(20),A.fecha,113) fecha,A.*,P.usuario + ' ' + P.apellidos nombre FROM (SELECT * FROM PropuestasProyectos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem)A INNER JOIN (SELECT * FROM usuarios WHERE fraccionamiento=@s_fraccionamiento) P ON P.clave=A.realizo;
            SELECT 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/pro_propuestas/_' + CONVERT(NVARCHAR(100), clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension path, * FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @realizo INT;
            SELECT @realizo=realizo FROM PropuestasProyectos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
            IF @realizo=@s_usuario BEGIN
              DECLARE @ccatalogo INT;
              SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @catalogo;
              BEGIN TRANSACTION T1;
              BEGIN TRY 
                DELETE FROM ProyectosVotacion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND pro_proyecto=@claveItem;
                DELETE FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo; 
                DELETE FROM PropuestasProyectos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
                COMMIT TRANSACTION T1;
                SELECT 1 estatus, 'OK' mensaje;
              END TRY BEGIN CATCH
                ROLLBACK TRANSACTION T1;
                SELECT -1 estatus, 'Error al borrar, probablemente, ya alguien mas votó esta propuesta.' mensaje, ERROR_MESSAGE() detalle;
              END CATCH
             END ELSE BEGIN
              SELECT -1 estatus, 'No puede borrar, debe ser quien creó este registro.' mensaje;
             END
            
          ]]>
      </sql>      
    </EliminarItem> 
    
  </pro_propuestas>

  <regegresos>

    <cargar>
      <campo leyenda="Tipo de erogación" db_nombre="tipo_erog" form_nombre="tipo_erog" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Proyecto" db_nombre="proyecto" form_nombre="proyecto" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Actividad" db_nombre="actividad" form_nombre="actividad" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            SELECT TOP(100) CONVERT(NVARCHAR(20),fecha,100) fecha,CONVERT(NVARCHAR(20),ISNULL(fecha_pago,fecha),100) fecha_pago, * FROM RegistrosGastos RP WHERE  fraccionamiento=@s_fraccionamiento AND ((@tipo_erog=1 AND indicereferencia=@clave) OR (@tipo_erog=2 AND(proyecto=@proyecto AND actividad=@actividad))) ORDER BY RP.fecha DESC;
        ]]>
      </sql>
    </cargar>

    
    <Guardar>
      <campo leyenda="Concepto" db_nombre="concepto" form_nombre="concepto" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Fecha de pago" db_nombre="fecha_pago" form_nombre="fecha_pago" requerido="false" charsize="30" tipo="string"/>
      <campo leyenda="Importe" db_nombre="importe" form_nombre="importe" requerido="true" charsize="30" tipo="string"/>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="8000" tipo="string"/>
      <campo leyenda="Clave de referencia" db_nombre="indicereferencia" form_nombre="indicereferencia" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Tipo de eregación" db_nombre="tipo_erog" form_nombre="tipo_erog" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <campo leyenda="Proyecto" db_nombre="proyecto" form_nombre="proyecto" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Actividad" db_nombre="actividad" form_nombre="actividad" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
			DECLARE @clave_admin INT;
			SELECT @clave_admin=clave FROM Administracion WHERE usuario=@s_usuario AND activo=1;		  
			
			DECLARE @usuarioMaster INT;
			SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
			DECLARE @tiene_permiso BIT;
			SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=24;/* es la clave para registrar gastos*/
			IF @tiene_permiso=1 OR @usuarioMaster IS NOT NULL BEGIN
				IF @esNuevo=1 BEGIN
				  INSERT INTO RegistrosGastos(fecha,responsable,concepto,tipo_erog,indicereferencia,importe,descripcion,fraccionamiento,proyecto,actividad,fecha_pago) VALUES(GETDATE(),@clave_admin,@concepto,@tipo_erog,@indicereferencia,@importe,@descripcion,@s_fraccionamiento,@proyecto,@actividad,ISNULL(@fecha_pago,GETDATE()));
				  SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
				  INSERT INTO Notificaciones (fraccionamiento,clave_admin,mensaje,fecha) VALUES(@s_fraccionamiento,@clave_admin,'Nuevo Gasto Registrado:' + @concepto,GETDATE());
				 END ELSE BEGIN
				  IF(@clave IS NOT NULL)BEGIN
					UPDATE RegistrosGastos SET fecha=GETDATE(),responsable=@clave_admin,concepto=@concepto,descripcion=@descripcion,fecha_pago=@fecha_pago WHERE clave=@clave;
					SELECT 1 estatus, 'OK' mensaje, @clave clave;
				  END ELSE 
					SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
				 ENd
			END ELSE BEGIN
				SELECT -1 estatus, 'No tiene habilitada esta función' mensaje;
			END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE descripcion like @catalogo;
            SELECT CONVERT(NVARCHAR(20),fecha,103) fecha_pago,CONVERT(NVARCHAR(20),fecha,113) fecha,C.*,P.usuario + ' ' + ISNULL(P.apellidos,'') nombre,G.nombre cargo FROM (SELECT * FROM RegistrosGastos WHERE clave=@claveItem)C LEFT OUTER JOIN Administracion A ON C.responsable=A.clave LEFT OUTER JOIN usuarios P ON P.clave=C.usuario LEFT OUTER JOIN Cargos G ON A.clave_cargo=G.clave;            
            SELECT 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/' + @catalogo + '/_' + CONVERT(NVARCHAR(100), clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension path, * FROM imagenes_catalogos WHERE clave=@claveItem AND catalogo=@ccatalogo;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @clave_admin INT;
            SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
						
			DECLARE @usuarioMaster INT;
			SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
			DECLARE @tiene_permiso BIT;
			SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=24;/* es la clave para registrar gastos*/
			IF @tiene_permiso IS NOT NULL BEGIN			
				DECLARE @ccatalogo INT;
				SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @catalogo;
				IF @clave_admin IS NOT NULL BEGIN
				  BEGIN TRANSACTION T1;
				  BEGIN TRY 
					DELETE FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo; 
					DELETE FROM RegistrosGastos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
					COMMIT TRANSACTION T1;
					SELECT 1 estatus, 'OK' mensaje;
				  END TRY BEGIN CATCH
					ROLLBACK TRANSACTION T1;
					SELECT -1 estatus, 'Error al borrar' mensaje;
				  END CATCH
				END
			END ELSE BEGIN
				SELECT -1 estatus, 'No tiene habilitada esta función' mensaje;
			END
          ]]>
      </sql>      
    </EliminarItem> 

  </regegresos>
  
  <solicitudes>
    
    <cargar>
      <campo leyenda="Busqueda" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="200" tipo="string"/>
      <campo leyenda="No seguridad" db_nombre="no_seg" form_nombre="no_seg" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[        
        
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
        
            DECLARE @tiene_permiso BIT;
            SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=4;/* es la clave para ver atención a residentes*/
            SELECT TOP(50) folio clave,CONVERT(NVARCHAR(20),A.fecha,113) fecha1, A.*,C.usuario + ' ' + C.apellidos nombre,C.clave usuario, D.alias, (CASE WHEN fecha_atendido IS NOT NULL THEN 'ATENDIDO' ELSE CASE WHEN fecha_visto IS NOT NULL THEN 'VISTO' ELSE 'NO VISTO' END END) estado FROM (SELECT * FROM Solicitudes WHERE fraccionamiento=@s_fraccionamiento AND ((tiposolicitud=6 AND @no_seg=0) OR @no_seg=1)) A INNER JOIN (SELECT * FROM usuarios WHERE fraccionamiento=@s_fraccionamiento) C ON C.clave=A.usuario INNER JOIN Clasificaciones D ON A.tipoSolicitud=D.indice WHERE (@usuarioMaster IS NOT NULL OR @tiene_permiso=1 OR @s_usuario=A.usuario)AND(@buscar IS NULL OR D.alias + ' ' + A.titulo like '%' + @buscar +'%') ORDER BY fecha DESC;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="4000" tipo="string"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Clave de asunto" db_nombre="tipo_asunto" form_nombre="tipo_asunto" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[        
        DECLARE @clave_admin INT;
        SELECT @clave_admin=clave FROM Administracion WHERE usuario=@s_usuario AND activo=1;
        DECLARE @frac NVARCHAR(200);SELECT @frac=nombre FROM Fraccionamientos WHERE clave=@s_fraccionamiento;
        IF @esNuevo=1 BEGIN
          INSERT INTO Solicitudes(fraccionamiento,fecha,usuario,titulo,descripcion,tipoSolicitud,clave_admin) VALUES(@s_fraccionamiento,GETDATE(),@s_usuario,@titulo,@descripcion,@tipo_asunto,@clave_admin);
          SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;
          INSERT INTO Notificaciones (funcion,usuario,mensaje,fecha) VALUES(2,@s_usuario,'Nuevo buzón:' + @titulo,GETDATE());
          SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_fun_2' para, 3 clave, @frac + ':Buzón:' titulo, UPPER(@titulo) mensaje; 
         END ELSE BEGIN
          IF(@clave IS NOT NULL)BEGIN
            UPDATE Solicitudes SET fecha=GETDATE(),titulo=@titulo,descripcion=@descripcion,tipoSolicitud=@tipo_asunto WHERE fraccionamiento=@s_fraccionamiento AND folio=@clave AND usuario=@s_usuario;
            SELECT 1 estatus, 'OK' mensaje, @clave clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         ENd
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[                     
          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
          
            DECLARE @clave_admin INT;
            SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
            DECLARE @tiene_permiso BIT;
            SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario  AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=4 ;/* es la clave para ver atención a residentes*/
            
            SELECT folio clave,CONVERT(NVARCHAR(20),A.fecha,100) fecha, A.*,C.usuario + ' ' + ISNULL(C.apellidos,'') nombre,C.clave usuario, CA.nombre cargo FROM (SELECT * FROM Solicitudes WHERE fraccionamiento=@s_fraccionamiento) A INNER JOIN (SELECT * FROM usuarios WHERE fraccionamiento=@s_fraccionamiento) C ON C.clave=A.usuario LEFT OUTER JOIN (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento) AD ON A.clave_admin=AD.clave AND AD.activo=1 LEFT OUTER JOIN (SELECT * FROM Cargos WHERE fraccionamiento=@s_fraccionamiento) CA ON CA.clave=AD.clave_cargo WHERE folio=@claveItem;
            UPDATE Solicitudes SET fecha_visto=GETDATE(),visto_resp=@clave_admin WHERE fraccionamiento=@s_fraccionamiento AND folio=@claveItem AND @tiene_permiso=1 OR @s_usuario=@usuarioMaster;
            SELECT CONVERT(NVARCHAR(20),A.fecha,100) fecha,CA.nombre cargo, 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/solicitudes/_' + CONVERT(NVARCHAR(100), A.clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension path, A.*,C.usuario + ' ' + ISNULL(C.apellidos,'') nombre,C.clave usuario FROM (SELECT * FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento) A INNER JOIN (SELECT * FROM usuarios WHERE fraccionamiento=@s_fraccionamiento) C ON A.usuario=C.clave LEFT OUTER JOIN (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento) AD ON A.clave_admin=AD.clave LEFT OUTER JOIN (SELECT * FROM Cargos WHERE fraccionamiento=@s_fraccionamiento) CA ON CA.clave=AD.clave_cargo WHERE A.clave=@claveItem AND A.catalogo=3;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @catalogo;
            BEGIN TRANSACTION T1;
            BEGIN TRY 
              DELETE FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo; 
              DELETE FROM Solicitudes WHERE fraccionamiento=@s_fraccionamiento AND folio=@claveItem;
              COMMIT TRANSACTION T1;
              SELECT 1 estatus, 'OK' mensaje;
            END TRY BEGIN CATCH
              ROLLBACK TRANSACTION T1;
              SELECT -1 estatus, 'Error al borrar' mensaje;
            END CATCH            
          ]]>
      </sql>      
    </EliminarItem> 
    
  </solicitudes>

  <Generico>
    

   <EliminarImgTexto>    
      <campo leyenda="Indice de item" db_nombre="indice" form_nombre="indice" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          DECLARE @ext NVARCHAR(10);
          SELECT @ext=extension FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
          DELETE FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
          SELECT 1 estatus, @ext ext;
        ]]>
      </sql>
    </EliminarImgTexto>
  
  <GuardarArchivo_>    
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="false" charsize="1000" tipo="string" default=""/>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="catalogo" requerido="true" charsize="100" tipo="string"/>
    <campo leyenda="Clave de item" db_nombre="clave_item" form_nombre="claveItem" requerido="true" charsize="20" tipo="string"/>
    <campo leyenda="Indice de item" db_nombre="indice" form_nombre="indice" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @clave_admin INT;
            SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE descripcion like @catalogo;
            IF @indice IS NULL  BEGIN
              INSERT INTO imagenes_catalogos(catalogo,clave,descripcion,extension,usuario,fraccionamiento) VALUES(@ccatalogo,@clave_item,@descripcion,@extension,@s_usuario,@s_fraccionamiento);              			  
			  DECLARE @indice_i INT;SET @indice_i=@@IDENTITY;
			  IF(@ccatalogo=1017)BEGIN
				UPDATE Visitas SET i_imagen=@indice_i WHERE indice=@clave_item;
			  END
              SELECT CONVERT(INT,@indice_i) clave, 1 estatus, 'Registrado correctamente' mensaje;
           END ELSE BEGIN
              DECLARE @extant NVARCHAR(10);
              SELECT @extant=extension FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice; 
              UPDATE imagenes_catalogos SET descripcion=@descripcion,extension=@extension WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
              SELECT @indice clave, 1 estatus, 'OK' mensaje,@extant extant;
           END
        ]]>
      </sql>
    </GuardarArchivo_>

    <ActualizarDescripcion>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="false" charsize="1000" tipo="string" default=""/>
      <campo leyenda="Clave de item" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Clave de item" db_nombre="indice" form_nombre="indice" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="catalogo" requerido="true" charsize="100" tipo="string"/>
      <sql>
        <![CDATA[
                
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
        
          
          DECLARE @clave_admin INT;
          SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
          IF @indice IS NULL BEGIN
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @catalogo;
            INSERT INTO imagenes_catalogos(descripcion,usuario,catalogo,clave,fecha,clave_admin,fraccionamiento) VALUES(@descripcion,@s_usuario,@ccatalogo,@clave,GETDATE(),@clave_admin,@s_fraccionamiento);
            
            SELECT 1 estatus, 'OK' mensaje,CONVERT(INT,@@IDENTITY) clave;
           END ELSE BEGIN
            UPDATE  imagenes_catalogos SET descripcion=@descripcion,fecha=GETDATE() WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
            SELECT 1 estatus, 'OK' mensaje;
           END   
		   DECLARE @aut BIT;
           DECLARE @tiene_permiso BIT;
		   SET @aut=CASE WHEN @tiene_permiso=1 OR @s_usuario=@usuarioMaster THEN 1 ELSE 0 END;
			IF @ccatalogo=3 BEGIN
              SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=4;/* es la clave para ver atención a residentes*/
              UPDATE Solicitudes SET fecha_atendido=CASE WHEN @aut=1 THEN GETDATE() ELSE NULL END,atendido_resp= CASE WHEN @aut=1 THEN @s_usuario ELSE NULL END, visto_resp= CASE WHEN @aut IS NULL THEN NULL ELSE visto_resp END, fecha_visto=CASE WHEN @aut IS NULL THEN NULL ELSE fecha_visto END WHERE fraccionamiento=@s_fraccionamiento AND folio=@clave; 
            END
        ]]>
      </sql>
    </ActualizarDescripcion>

    <ObtenerClasificacion>
      <campo leyenda="Clave de catalogo" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="No seguridad" db_nombre="exc" form_nombre="exc" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          SELECT * FROM Clasificaciones WHERE catalogo=@clave;       
        ]]>
      </sql>
    </ObtenerClasificacion>
  
  </Generico>
  
  <clasusuario>
    <cargar>      
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @_mapeo;
            SELECT * FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento AND catalogo=@ccatalogo AND (titulo like '%' + @buscar + '%' OR @buscar IS NULL) ORDER BY titulo ASC;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="500" tipo="string"/>
      <campo leyenda="Clave de usuario" db_nombre="usuario" form_nombre="usuario" requerido="true" charsize="0" tipo="int" default="3"/>
      <campo leyenda="Clave" db_nombre="indice" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Cuota por hora" db_nombre="cuotah" form_nombre="cuotah" requerido="false" charsize="0" tipo="float"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
        DECLARE @ccatalogo INT;
        SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @_mapeo;
        
        IF @esNuevo=1 BEGIN
          INSERT INTO ClasificacionesUsuario(fecha,titulo,descripcion,catalogo,realizo,fraccionamiento,cuotah) VALUES(GETDATE(),@titulo,@descripcion,@ccatalogo,@s_usuario,@s_fraccionamiento,@cuotah);
          SELECT 1 estatus, 'OK' mensaje, CONVERT(INT,@@IDENTITY) clave;
         END ELSE BEGIN
          IF(@indice IS NOT NULL)BEGIN
            UPDATE ClasificacionesUsuario SET fecha=GETDATE(),titulo=@titulo,descripcion=@descripcion,realizo=@s_usuario,cuotah=@cuotah WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
            SELECT 1 estatus, 'OK' mensaje, @indice clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT * FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
          ]]>
        </sql>
    </ObtenerItem>

    <Eliminar>
      <campo leyenda="Indice de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
              DELETE FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem; 
              SELECT 1 estatus, 'OK' mensaje;           
          ]]>
      </sql>      
    </Eliminar> 
  </clasusuario>
  
  <eventos>
    <cargar>
      <sql>
        <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @_mapeo;
            SELECT * FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento AND catalogo=@ccatalogo ORDER BY fecha DESC;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="500" tipo="string"/>
      <campo leyenda="Clave de usuario" db_nombre="usuario" form_nombre="usuario" requerido="true" charsize="0" tipo="int" default="3"/>
      <campo leyenda="Clave" db_nombre="indice" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
        DECLARE @ccatalogo INT;
        SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @_mapeo;
        
        IF @esNuevo=1 BEGIN
          INSERT INTO ClasificacionesUsuario(fecha,titulo,descripcion,catalogo,usuario,fraccionamiento) VALUES(GETDATE(),@titulo,@descripcion,@ccatalogo,@usuario,@s_fraccionamiento);
          SELECT 1 estatus, 'OK' mensaje, CONVERT(INT,@@IDENTITY) clave;
         END ELSE BEGIN
          IF(@indice IS NOT NULL)BEGIN
            UPDATE ClasificacionesUsuario SET fecha=GETDATE(),titulo=@titulo,descripcion=@descripcion,usuario=@usuario WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
            SELECT 1 estatus, 'OK' mensaje, @indice clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT * FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
          ]]>
        </sql>
    </ObtenerItem>

    <Eliminar>
      <campo leyenda="Indice de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
              DELETE FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem; 
              SELECT 1 estatus, 'OK' mensaje;           
          ]]>
      </sql>      
    </Eliminar> 
  </eventos>

  <planpresupuestal>    
    
    <RegistrarVoBoActividad>
      <campo leyenda="Clave de proyecto" db_nombre="proyecto" form_nombre="proyecto" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave de actividad" db_nombre="indice" form_nombre="indice" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          UPDATE ProyectosPresupuesto SET resuelto=1, vobo=@s_usuario,fecha_resuelto=GETDATE() WHERE fraccionamiento=@s_fraccionamiento AND proyecto=@proyecto AND indice=@indice;
          SELECT 1 estatus, 'ok' mensaje;
        ]]>
      </sql>
    </RegistrarVoBoActividad>
    
    <QuitarVoBoActividad>
      <campo leyenda="Clave de proyecto" db_nombre="proyecto" form_nombre="proyecto" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave de actividad" db_nombre="indice" form_nombre="indice" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          UPDATE ProyectosPresupuesto SET resuelto=NULL, vobo=@s_usuario,fecha_resuelto=GETDATE() WHERE fraccionamiento=@s_fraccionamiento AND proyecto=@proyecto AND indice=@indice;
          SELECT 1 estatus, 'ok' mensaje;
        ]]>
      </sql>
    </QuitarVoBoActividad>
    
    <cargar>      
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            SELECT @clave proyecto,AC.indice,AC.descripcion,ISNULL(presup,0) presup,ISNULL(invertido,0) invertido FROM
            (SELECT indice, SUM(costo) presup,descripcion FROM ProyectosPresupuesto WHERE fraccionamiento=@s_fraccionamiento AND proyecto=@clave GROUP BY indice,descripcion)AC LEFT OUTER JOIN
            (SELECT actividad, SUM(importe) invertido FROM RegistrosGastos WHERE fraccionamiento=@s_fraccionamiento AND proyecto=@clave GROUP BY actividad)PP ON AC.indice=PP.actividad
            ORDER BY AC.descripcion ASC
        ]]>
      </sql>
    </cargar>
  
    <ActualizarDescripcion>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="concepto" requerido="false" charsize="100" tipo="string" default=""/>
      <campo leyenda="Clave de proyecto" db_nombre="clave" form_nombre="proyecto" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave de actividad" db_nombre="indice" form_nombre="indice" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Monto" db_nombre="monto" form_nombre="importe" requerido="true" charsize="0" tipo="float"/>
      <sql>
        <![CDATA[
          IF @indice IS NULL BEGIN
            INSERT INTO ProyectosPresupuesto(fraccionamiento,proyecto,descripcion,costo,realizo,fecha) VALUES(@s_fraccionamiento,@clave,@descripcion,@monto,@s_usuario,GETDATE());
            SELECT 1 estatus, 'OK' mensaje,CONVERT(INT,@@IDENTITY) clave ;
           END ELSE BEGIN
              UPDATE  ProyectosPresupuesto SET descripcion=@descripcion,fecha=GETDATE(),realizo=@s_usuario,costo=@monto WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
              SELECT 1 estatus, 'OK' mensaje,@indice clave;
           END
        ]]>
      </sql>
    </ActualizarDescripcion>    
      
    <ObtenerItem>
        <campo leyenda="Clave de proyecto" db_nombre="proyecto" form_nombre="proyecto" requerido="true" charsize="0" tipo="int"/>
        <campo leyenda="Clave de actividad" db_nombre="indice" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT * FROM ProyectosPresupuesto WHERE fraccionamiento=@s_fraccionamiento AND proyecto=@proyecto AND indice=@indice;
          ]]>
        </sql>
    </ObtenerItem>
  
  </planpresupuestal>
  
  <egrepro>
    
      <ObtenerPagosRealizados>
        <campo leyenda="Clave de proyecto" db_nombre="proyecto" form_nombre="proyecto" requerido="true" charsize="0" tipo="int"/>
        <campo leyenda="Clave de actividad" db_nombre="actividad" form_nombre="actividad" requerido="true" charsize="0" tipo="int"/>
        <sql>
        <![CDATA[
            SELECT * FROM ProyectosPresupuesto WHERE fraccionamiento=@s_fraccionamiento AND proyecto=@clave;
        ]]>
      </sql>
      </ObtenerPagosRealizados>    
    
    <ObtenerPropuestasProy>
      <sql>
        <![CDATA[            
            DECLARE @tdom INT;SELECT @tdom=COUNT(clave) FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento;
            SELECT * FROM (SELECT * FROM PropuestasProyectos WHERE fraccionamiento=@s_fraccionamiento) PP INNER JOIN (SELECT pro_proyecto,ISNULL(CONVERT(INT,ROUND(100.0*COUNT(CASE WHEN voto=1 THEN 1 ELSE NULL END)/@tdom,0)),0) votacion FROM (SELECT * FROM ProyectosVotacion WHERE fraccionamiento=@s_fraccionamiento) PV LEFT OUTER JOIN (SELECT * FROM Proyectos WHERE fraccionamiento=@s_fraccionamiento) P ON PV.pro_proyecto=P.propuesta WHERE P.indice IS NULL GROUP BY pro_proyecto)Q ON PP.clave=Q.pro_proyecto AND Q.votacion>50 ORDER BY fecha DESC;
        ]]>
      </sql>
    </ObtenerPropuestasProy>
    
    <cargar>
      <sql>
        <![CDATA[
            SELECT indice,titulo, ISNULL(presup,0) presup,ISNULL(invertido,0) invertido
            FROM Proyectos P LEFT OUTER JOIN 
            (SELECT proyecto, SUM(costo) presup FROM ProyectosPresupuesto WHERE fraccionamiento=@s_fraccionamiento AND proyecto IS NOT NULL GROUP BY proyecto)AV ON P.indice=AV.proyecto LEFT OUTER JOIN
            (SELECT proyecto, SUM(importe) invertido FROM RegistrosGastos WHERE fraccionamiento=@s_fraccionamiento AND proyecto IS NOT NULL GROUP BY proyecto)PP ON P.indice=PP.proyecto
            ORDER BY P.fecha DESC;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de proyecto" db_nombre="proyecto" form_nombre="proyecto" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave" db_nombre="indice" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
        
        DECLARE @clave_admin INT;
        SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
        
        IF @esNuevo=1 BEGIN
          INSERT INTO Proyectos(fraccionamiento,fecha,titulo,proop,responsable) VALUES(@s_fraccionamiento,GETDATE(),@titulo,@proyecto,@clave_admin);
          SELECT 1 estatus, 'OK' mensaje, CONVERT(INT,@@IDENTITY) clave;
         END ELSE BEGIN
          IF(@indice IS NOT NULL)BEGIN
            UPDATE Proyectos SET fecha=GETDATE(),titulo=@titulo,responsable=@clave_admin WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
            SELECT 1 estatus, 'OK' mensaje, @indice clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         END
        ]]>
      </sql>
    </Guardar>   
        
    <ObtenerItem>
        <campo leyenda="Clave de teléfono" db_nombre="indice" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT * FROM Proyectos WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
          ]]>
        </sql>
    </ObtenerItem>

    <Eliminar>
      <campo leyenda="Indice de Item" db_nombre="indice" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
              DELETE FROM Proyectos WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice; 
              SELECT 1 estatus, 'OK' mensaje;           
          ]]>
      </sql>      
    </Eliminar> 
  </egrepro>
  
  <directorio>
    
    <cargar>
      <campo leyenda="Busqueda" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="200" tipo="string"/>
      <sql>
        <![CDATA[
		
		DECLARE @tiene_permiso BIT;          
              DECLARE @usuarioMaster INT;
              SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
              SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=3;             
		
            SELECT TOP(10) * FROM directorio WHERE fraccionamiento=@s_fraccionamiento AND (nombre like '%' + @buscar + '%' OR telefono1 like '%' + @buscar + '%' OR telefono2 like '%' + @buscar + '%'  OR telefono3 like '%' + @buscar + '%' OR @buscar IS NULL) AND ((@tiene_permiso=1 AND privado=1) OR (ISNULL(privado,0)=0));
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Nombre" db_nombre="nombre" form_nombre="nombre" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Teléfono 1" db_nombre="telefono1" form_nombre="telefono1" requerido="false" charsize="20" tipo="string"/>
      <campo leyenda="Teléfono 2" db_nombre="telefono2" form_nombre="telefono2" requerido="false" charsize="20" tipo="string"/>
      <campo leyenda="Teléfono 3" db_nombre="telefono3" form_nombre="telefono3" requerido="false" charsize="20" tipo="string"/>
      <campo leyenda="Clave" db_nombre="indice" form_nombre="indice" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Privado" db_nombre="privado" form_nombre="privado" requerido="false" charsize="0" tipo="bool"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
                
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;         
          
        DECLARE @clave_admin INT;
        SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
        IF @esNuevo=1 AND @clave_admin IS NOT NULL OR @usuarioMaster=1 BEGIN
          INSERT INTO Directorio(fecha,nombre,telefono1,telefono2,telefono3,responsable,fraccionamiento,privado) VALUES(GETDATE(),@nombre,@telefono1,@telefono2,@telefono3,@s_usuario,@s_fraccionamiento,@privado);
          SELECT 1 estatus, 'OK' mensaje, CONVERT(INT,@@IDENTITY) clave;
          INSERT INTO Notificaciones (fraccionamiento,usuario,mensaje,fecha) VALUES(@s_fraccionamiento,@s_usuario,'Teléfono de '+ @nombre + ' agregado al directorio.',GETDATE());
         END ELSE BEGIN
          IF(@clave_admin IS NULL)BEGIN
            SELECT -1 estatus, 'No tiene habilitada esta función' mensaje, @indice clave;
          END ELSE IF(@indice IS NOT NULL)BEGIN
            UPDATE Directorio SET fecha=GETDATE(),nombre=@nombre,telefono1=@telefono1,telefono2=@telefono2,telefono3=@telefono3,privado=@privado WHERE indice=@indice;
            SELECT 1 estatus, 'OK' mensaje, @indice clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         ENd
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave de teléfono" db_nombre="indice" form_nombre="indice" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT * FROM directorio WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
          ]]>
        </sql>
    </ObtenerItem>

    <Eliminar>
      <campo leyenda="Indice de Item" db_nombre="indice" form_nombre="indice" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
              DELETE FROM directorio WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice; 
              SELECT 1 estatus, 'OK' mensaje;           
          ]]>
      </sql>      
    </Eliminar> 
    
  </directorio>

  <prodserv>

    <cargar>
      <campo leyenda="Busqueda" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="200" tipo="string"/>
      <sql>
        <![CDATA[
            SET DATEFORMAT DMY;
            SET LANGUAGE ESPAÑOL;
            
            DECLARE @usuarioMaster INT;
            SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento; 
            
            DECLARE @clave_admin INT,@clave_accion INT;
            SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
            SELECT @clave_accion=AC.clave FROM Acciones AC INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) B ON AC.clave=B.clave_accion INNER JOIN (SELECT clave_cargo FROM administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND fecha_termino IS NULL)A ON A.clave_cargo=B.clave_cargo WHERE AC.clave=8 GROUP BY AC.clave;--8 clave de accion de moderar anuncios
                    
            DECLARE @dia_corte NVARCHAR(5);SELECT TOP(1) @dia_corte=dia_corte FROM Config_Pagos_Hist WHERE fraccionamiento=@s_fraccionamiento AND cat_default=(SELECT conf_pagos_default FROM Fraccionamientos WHERE clave=@s_fraccionamiento) ORDER BY fecha1 DESC;--PONER ESTE VALOR EN CONFIGURACION            
            
			SELECT IM.primerimg,QQ.* FROM( 
              SELECT TOP(30)  P.clave,P.NombreNegocio,P.clicks,P.mensaje,P.horario,P.telefonos,P.palabrasclave,COUNT(P.clave) cuantos,P.responsable FROM split(@buscar,' ')A INNER JOIN (SELECT * FROM ProductosServicios WHERE fraccionamiento=@s_fraccionamiento AND (activo=1 OR responsable=@s_usuario)) P ON ((P.NombreNegocio like '%' + A.item + '%' OR palabrasclave like '%' + A.item + '%') AND P.activo=1 AND (P.moderado=1 OR (@usuarioMaster=1 OR @clave_accion=8) ) ) OR (responsable=@s_usuario) GROUP BY P.clave,P.NombreNegocio,P.clicks,P.mensaje,P.horario,P.telefonos,P.palabrasclave,P.responsable
            )QQ  
            LEFT OUTER JOIN(
				        SELECT D.usuario FROM(
                  SELECT domicilio,DATEADD(MM,1,MAX(CONVERT(DATE, '01-' + CONVERT(NVARCHAR(20),mes) + '-' + CONVERT(NVARCHAR(20),anio) )) )UFechaP FROM (
						        SELECT domicilio,mes,anio FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento
						        UNION ALL
						        SELECT domicilio,mes,anio FROM ConciliacionesCuotas WHERE fraccionamiento=@s_fraccionamiento
						        UNION ALL
						        SELECT domicilio,mes,anio FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento
                   )T GROUP BY domicilio
					      )A INNER JOIN (SELECT D1.clave,U.usuario,D1.prorroga,D1.config_pago,D1.dia_corte FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D1 INNER JOIN (SELECT * FROM Usuarios_domicilio WHERE fraccionamiento=@s_fraccionamiento) U ON D1.clave=U.domicilio) D ON A.domicilio=D.clave LEFT OUTER JOIN (SELECT dia_corte,indice FROM (SELECT dia_corte, config_pago indice, ROW_NUMBER() OVER(PARTITION BY config_pago ORDER BY fecha1 DESC) num FROM Config_Pagos_Hist WHERE fraccionamiento=@s_fraccionamiento)Aux WHERE num=1 ) CP ON  CP.indice=D.config_pago
                WHERE CASE WHEN DATEADD(DD,ISNULL(D.dia_corte,ISNULL(CP.dia_corte, @dia_corte)),UFechaP)>CONVERT(DATE,GETDATE()) THEN 1 WHEN D.prorroga>=CONVERT(DATE,GETDATE()) THEN 2 ELSE 0 END > 0
                GROUP BY D.usuario
            )Q ON QQ.responsable=Q.usuario
			LEFT OUTER JOIN (SELECT * FROM (SELECT clave,ROW_NUMBER() OVER (PARTITION BY clave ORDER BY indice ASC) numerador, '_' + CONVERT(NVARCHAR(10),indice) + extension primerimg FROM [softronel].[imagenes_catalogos] WHERE catalogo=2 AND fraccionamiento=@s_fraccionamiento AND @s_usuario=usuario)R WHERE numerador=1)IM ON QQ.clave=IM.clave
            WHERE Q.usuario IS NOT NULL OR QQ.responsable=@s_usuario OR @usuarioMaster=1 OR @clave_accion IS NOT NULL			
          ORDER BY cuantos DESC,clicks ASC;
        ]]>
      </sql>
    </cargar>

    <Guardar>
      <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="500" tipo="string"/>
      <campo leyenda="Teléfonos" db_nombre="telefonos" form_nombre="telefonos" requerido="true" charsize="50" tipo="string"/>
      <campo leyenda="Horario" db_nombre="horario" form_nombre="horario" requerido="true" charsize="50" tipo="string"/>
      <campo leyenda="Palabras clave" db_nombre="palabrasclave" form_nombre="palabrasclave" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
          BEGIN TRY
			IF(@clave IS NULL)BEGIN
				SELECT @clave=clave FROM ProductosServicios WHERE responsable=@s_usuario;
			END
            IF @esNuevo=1 BEGIN
              INSERT INTO ProductosServicios(fraccionamiento,fecha,responsable,NombreNegocio,mensaje,palabrasclave,horario,telefonos,activo) VALUES(@s_fraccionamiento,GETDATE(),@s_usuario,@titulo,@descripcion,@palabrasclave,@horario,@telefonos,1);			  
              SELECT CONVERT(INT,@@IDENTITY) clave, 1 estatus, 'OK' mensaje;                            
			  INSERT INTO Notificaciones (fraccionamiento,mensaje,fecha) VALUES(@s_fraccionamiento,'Nuevo anuncio: '  + UPPER(@titulo),GETDATE());
             END ELSE BEGIN
              IF(@clave IS NOT NULL)BEGIN
                UPDATE ProductosServicios SET fecha=GETDATE(),NombreNegocio=@titulo,mensaje=@descripcion,palabrasclave=@palabrasclave,horario=@horario,telefonos=@telefonos,moderado=NULL WHERE fraccionamiento=@s_fraccionamiento AND clave=@clave AND responsable=@s_usuario;
                SELECT 1 estatus, 'OK' mensaje, @clave clave;
              END ELSE
                SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
             END
           END TRY BEGIN CATCH
              SELECT -1 estatus, 'No se pudo guardar, probable problema de red.' mensaje;
           END CATCH         
        ]]>
      </sql>
    </Guardar>
    
    
    <Moderar>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Habilitar" db_nombre="habilitar" form_nombre="activar" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
        DECLARE @usuarioMaster INT, @clave_accion INT;
        SELECT @usuarioMaster= responsable FROM fraccionamientos WHERE clave=@s_fraccionamiento; 
          
        SELECT @clave_accion=AC.clave FROM (SELECT clave_cargo FROM administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND fecha_termino IS NULL)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) B ON A.clave_cargo=B.clave_cargo INNER JOIN Acciones AC ON AC.clave=B.clave_accion WHERE AC.clave=8 GROUP BY AC.clave;--8 clave de accion de moderar anuncios
        
        DECLARE @clave_admin INT, @responsable INT;
        SELECT @clave_admin=clave FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND activo=1;
        IF @clave_accion IS NOT NULL OR @usuarioMaster=@s_usuario BEGIN
                DECLARE @titulo NVARCHAR(200);
                SELECT @titulo=NombreNegocio, @responsable=responsable FROM ProductosServicios WHERE fraccionamiento=@s_fraccionamiento AND clave=@clave;
              DECLARE @s_domicilio NVARCHAR(200),@domicilio INT;
              SELECT TOP(1)@domicilio=D.clave, @s_domicilio=calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D INNER JOIN (SELECT * FROM usuarios_domicilio WHERE fraccionamiento=@s_fraccionamiento) UD ON D.clave=UD.domicilio WHERE UD.usuario=@responsable;
              DECLARE @ya_existe INT; SELECT @ya_existe=moderador FROM ProductosServicios WHERE fraccionamiento=@s_fraccionamiento AND clave=@clave;
              UPDATE ProductosServicios SET fecha_modera=GETDATE(),moderado=@habilitar, moderador=@clave_admin  WHERE fraccionamiento=@s_fraccionamiento AND clave=@clave;
              SELECT 1 estatus, 'OK' mensaje, moderado activo FROM ProductosServicios WHERE fraccionamiento=@s_fraccionamiento AND clave=@clave;			  
              IF @ya_existe IS NULL AND @habilitar=1 BEGIN--SOLO LA PRIMERA VEZ SE NOTIFICA
                INSERT INTO Notificaciones (domicilio,mensaje,fecha,funcion) VALUES(@domicilio,'Se autorizó: '  + UPPER(@titulo),GETDATE(),3);                
				SELECT 1 notificar,'FRA_1_' + CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_dom_' + CONVERT(NVARCHAR(20),@domicilio) para, 3 clave, 'Se autorizó: '  + UPPER(@titulo) titulo, ISNULL(@s_domicilio,'') mensaje; 
              END           
         END ELSE BEGIN 
            SELECT -1 estatus, 'No tiene habilitada esta función.' mensaje;
          END
        ]]>
      </sql>
    </Moderar>

    <ObtenerItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE descripcion like @catalogo;
			IF(@claveItem IS NULL)BEGIN
				SELECT @claveItem=clave FROM ProductosServicios WHERE responsable=@s_usuario;
			END
            SELECT *, mensaje descripcion,CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END esmismo FROM (SELECT * FROM ProductosServicios WHERE fraccionamiento=@s_fraccionamiento) P WHERE clave=@claveItem;
            SELECT 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/' + @catalogo + '/_' + CONVERT(NVARCHAR(100), clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension path, * FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo;
          ]]>
      </sql>
    </ObtenerItem>

    <Activar>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Activar" db_nombre="activar" form_nombre="activar" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
            UPDATE ProductosServicios SET activo=@activar WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND responsable=@s_usuario;
            SELECT activo FROM ProductosServicios WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
          ]]>
      </sql>
    </Activar>

    <EliminarItem>
      <campo leyenda="Catalogo" db_nombre="catalogo" form_nombre="seccion" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Clave de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @catalogo;
            BEGIN TRANSACTION T1;
            BEGIN TRY 
              DELETE FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=@ccatalogo; 
              DELETE FROM ProductosServicios WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
              COMMIT TRANSACTION T1;
              SELECT 1 estatus, 'OK' mensaje;
            END TRY BEGIN CATCH
              ROLLBACK TRANSACTION T1;
              SELECT -1 estatus, 'Error al borrar' mensaje;
            END CATCH
            
          ]]>
      </sql>
    </EliminarItem>    

  </prodserv>

  <encuestas>

    <cargar>
      <sql tieneAnidacion="true" alias_xml="Encuestas">
        <![CDATA[
            SET LANGUAGE Spanish;
            SELECT * FROM (VALUES('Encuesta'),('Respuesta'))Q(a);
            SELECT * FROM (VALUES('encuesta_respuesta|Encuesta,Respuesta|clave:encuesta'))B(a);
            SELECT CONVERT(NVARCHAR(20),fecha)fecha, A.*, CASE WHEN B.encuesta IS NOT NULL THEN 1 ELSE NULL END yaVoto FROM (SELECT * FROM Encuestas WHERE fraccionamiento=@s_fraccionamiento) A LEFT OUTER JOIN (SELECT encuesta,usuario FROM EncuestasVotacion WHERE usuario=@s_usuario GROUP BY encuesta,usuario)B ON  A.clave=B.encuesta WHERE A.activo=1 ORDER BY A.fecha;
            SELECT A.*,ISNULL(CONVERT(INT,ROUND(100.0*A.conteo/C.total,0)),0) porc, CASE WHEN B.respuesta IS NOT NULL THEN 1 ELSE NULL END respondio FROM (SELECT * FROM RespuestasEncuesta WHERE fraccionamiento=@s_fraccionamiento) A LEFT OUTER JOIN (SELECT encuesta,respuesta FROM EncuestasVotacion WHERE usuario=@s_usuario)B ON A.encuesta=B.encuesta AND A.clave=B.respuesta
              INNER JOIN(SELECT encuesta,SUM(conteo) total FROM RespuestasEncuesta WHERE activo=1 GROUP BY encuesta)C ON A.encuesta=C.encuesta WHERE A.activo=1;
        ]]>
      </sql>
    </cargar>

    <Guardar>
      <campo leyenda="Pregunta" db_nombre="pregunta" form_nombre="pregunta" requerido="true" charsize="200" tipo="string"/>
      <campo leyenda="Clave" db_nombre="clave" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
        
        DECLARE @clave_admin INT;
        SELECT @clave_admin=clave FROM Administracion WHERE usuario=@s_usuario AND activo=1;
	    DECLARE @es_resp_fracc INT;
	    SELECT @es_resp_fracc=responsable FROM Fraccionamientos WHERE responsable=@s_usuario AND clave=@s_fraccionamiento;
        IF  @clave_admin IS NOT NULL OR @es_resp_fracc IS NOT NULL BEGIN
          IF @esNuevo=1 BEGIN
            INSERT INTO Encuestas(fecha,pregunta,responsable,activo,fraccionamiento) VALUES(GETDATE(),@pregunta,@s_usuario,1,@s_fraccionamiento);
            SELECT 1 estatus, 'OK' mensaje, CONVERT(INT,@@IDENTITY) clave;
            INSERT INTO Notificaciones (fraccionamiento,clave_admin,mensaje,fecha) VALUES(@s_fraccionamiento,@clave_admin,'Responda la nueva encuesta: '+ @pregunta ,GETDATE());
            SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento) para, 3 clave, 'Responda la nueva encuesta' titulo, UPPER(@pregunta) mensaje; 
           END ELSE BEGIN
            IF(@clave IS NOT NULL)BEGIN
              UPDATE Encuestas SET fecha=GETDATE(),pregunta=@pregunta,responsable=@s_usuario WHERE fraccionamiento=@s_fraccionamiento AND clave=@clave;
              SELECT 1 estatus, 'OK' mensaje, @clave clave;
            END ELSE 
              SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
           ENd
        END ELSE BEGIN
          SELECT -1 estatus, 'No esta autorizado para crear encuestas.' mensaje;
        END
        ]]>
      </sql>
    </Guardar>

    <ActualizarDescripcion>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="false" charsize="100" tipo="string" default=""/>
      <campo leyenda="Clave de encuesta" db_nombre="encuesta" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave de respuesta" db_nombre="indice" form_nombre="indice" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          IF NOT EXISTS(SELECT * FROM RespuestasEncuesta WHERE clave=@indice) BEGIN
            INSERT INTO RespuestasEncuesta(fraccionamiento,encuesta,respuesta,fecha,responsable,activo) VALUES(@s_fraccionamiento,@encuesta,@descripcion,GETDATE(),@s_usuario,1);
            SELECT 1 estatus, 'OK' mensaje,CONVERT(INT,@@IDENTITY) clave ;
           END ELSE BEGIN
              UPDATE  RespuestasEncuesta SET respuesta=@descripcion,fecha=GETDATE(),responsable=@s_usuario WHERE fraccionamiento=@s_fraccionamiento AND clave=@indice;
            SELECT 1 estatus, 'OK' mensaje;
           END
        ]]>
      </sql>
    </ActualizarDescripcion>

    <ObtenerItem>
      <campo leyenda="Clave de encuesta" db_nombre="clave" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            SELECT * FROM Encuestas WHERE fraccionamiento=@s_fraccionamiento AND clave=@clave;
            SELECT * FROM RespuestasEncuesta WHERE fraccionamiento=@s_fraccionamiento AND encuesta=@clave;
          ]]>
      </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Indice de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          BEGIN TRANSACTION T2;
          BEGIN TRY          
              DELETE FROM RespuestasEncuesta WHERE fraccionamiento=@s_fraccionamiento AND encuesta=@claveItem;
              DELETE FROM Encuestas WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem;
              COMMIT TRANSACTION T2;
              SELECT 1 estatus, 'resuelto' mensaje;
         END TRY BEGIN CATCH
            ROLLBACK TRANSACTION T2;
            SELECT -1 estatus, 'No puede eliminar la encuesta, alguien ya votó.' mensaje;
         END CATCH
          ]]>
      </sql>
    </EliminarItem>

    <EliminarImgTexto>
      <campo leyenda="Encuesta" db_nombre="encuesta" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Indice de item" db_nombre="indice" form_nombre="indice" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          BEGIN TRANSACTION T3;
          BEGIN TRY
            DELETE FROM RespuestasEncuesta WHERE fraccionamiento=@s_fraccionamiento AND encuesta=@encuesta AND clave=@indice;            
            COMMIT TRANSACTION T3;
            SELECT 1 estatus, 'resuelto' mensaje;
         END TRY BEGIN CATCH
            ROLLBACK TRANSACTION T3;
            SELECT -1 estatus, 'No puede eliminarse, alguien más ya voto por esta opción.' mensaje;
         END CATCH
         
        ]]>
      </sql>
    </EliminarImgTexto>

    <RegistrarVoto>
      <campo leyenda="Clave de encuesta" db_nombre="encuesta" form_nombre="encuesta" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Clave de respuesta" db_nombre="respuesta" form_nombre="respuesta" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
           DECLARE @domicilio INT;
          SET @domicilio=(SELECT TOP(1) domicilio FROM Usuarios_domicilio WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario);
          @@subquery=[ap_domicilios.ObtenerUltimaFechaPagada]  
          IF @es_activo=1 BEGIN
              IF(NOT EXISTS(SELECT * FROM EncuestasVotacion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND encuesta=@encuesta))BEGIN
                INSERT INTO EncuestasVotacion(fecha,encuesta,respuesta,domicilio,usuario,fraccionamiento) SELECT TOP(1) GETDATE(),@encuesta,@respuesta,domicilio,@s_usuario,@s_fraccionamiento FROM usuarios_domicilio WHERE usuario=@s_usuario GROUP BY domicilio; 
                UPDATE RespuestasEncuesta SET conteo=ISNULL(conteo,0)+1 WHERE fraccionamiento=@s_fraccionamiento AND encuesta=@encuesta AND clave=@respuesta;
                SELECT 1 estatus,'OK' mensaje;
              END ELSE BEGIN
                SELECT -1 estatus,'No puede volver a votar' mensaje;
              END   
          END ELSE BEGIN
              SELECT -1 estatus,'Lo sentimos, necesita tener estatus activo para poder votar.' mensaje;
            END
          ]]>
      </sql>
    </RegistrarVoto>

    <ObtenerConteo>
      <campo leyenda="Clave de encuesta" db_nombre="encuesta" form_nombre="encuesta" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
            SELECT A.*,CONVERT(INT,ROUND(100.0*A.conteo/total,0)) porc,CASE WHEN C.respuesta IS NOT NULL THEN 1 ELSE NULL END respondio FROM
	          (SELECT * FROM RespuestasEncuesta WHERE fraccionamiento=@s_fraccionamiento AND encuesta=@encuesta) A 
	          INNER JOIN (SELECT encuesta,SUM(conteo) total FROM RespuestasEncuesta WHERE fraccionamiento=@s_fraccionamiento AND encuesta=@encuesta GROUP BY encuesta)B ON A.encuesta=B.encuesta
			      LEFT OUTER JOIN (SELECT respuesta FROM EncuestasVotacion WHERE fraccionamiento=@s_fraccionamiento AND encuesta=@encuesta AND usuario=@s_usuario) C ON A.clave=C.respuesta
          ]]>
      </sql>
    </ObtenerConteo>

  </encuestas>

  <domicilios>
    <ConsultarDomicilios>
        <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
        <sql>
          <![CDATA[          
        @@subquery=[ap_domicilios3.cargar]
        ]]>
        </sql>
    </ConsultarDomicilios>
    
  </domicilios>
  
  <transparencia>
  
	<AgregarInformePeriodo>
		<campo leyenda="Fecha inicial" db_nombre="fecha1" form_nombre="fecha1" requerido="false" charsize="30" tipo="string"/>
		<campo leyenda="Fecha final" db_nombre="fecha2" form_nombre="fecha2" requerido="false" charsize="30" tipo="string"/>		
		<sql>
          <![CDATA[ 
		  DECLARE @tiene_permiso BIT;          
		  DECLARE @usuarioMaster INT;
		  SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
		  SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=24;             
		  IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
			  
			DELETE FROM PeriodosInformes WHERE fraccionamiento=@s_fraccionamiento AND fecha_inicial=@fecha1;
			INSERT INTO PeriodosInformes(fecha_inicial,fecha_final,usuario,fraccionamiento) VALUES(@fecha1,@fecha2,@s_usuario,@s_fraccionamiento);
			SELECT 1 estatus,'Guardado correctamente' mensaje;
		  END ELSE BEGIN
			SELECT -1 estatus,'No tiene habilitada esta función.' mensaje;
		  END
        ]]>
        </sql>
	</AgregarInformePeriodo>
	
    <ObtenerActivosInactivos>
      <sql>
        <![CDATA[ 
          SET DATEFORMAT DMY;
          SET LANGUAGE ESPAÑOL;
          SELECT Clave, calle +' ' +  D.numero + ISNULL(' Mz. ' + manzana,'') +ISNULL(' Lt. ' + lote,'')  Domicilio, D.segmento Fase, Q.UFechaP [Fecha_Ref], DATENAME(MM,UFechaP) Mes,DATENAME(YY,UFechaP) [Año] , CASE WHEN UFechaP>='01-' + DATENAME(MM,GETDATE()) + '-' + DATENAME(YY,GETDATE())  THEN 1 ELSE 0 END Estatus FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D LEFT OUTER JOIN (
	          SELECT domicilio, MAX(CONVERT(DATE,'01-' + CONVERT(NVARCHAR(20),mes) + '-' + CONVERT(NVARCHAR(20),anio) ))UFechaP FROM(
		          SELECT domicilio,mes,anio FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento
		          UNION ALL
		          SELECT domicilio,mes,anio FROM ConciliacionesCuotas WHERE fraccionamiento=@s_fraccionamiento
		          UNION ALL
		          SELECT domicilio,mes,anio FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento
	          )A
	          GROUP BY domicilio
          )Q ON D.clave=Q.domicilio
          ORDER BY [año] DESC, mes DESC 
        ]]>
      </sql>
    </ObtenerActivosInactivos>
      
    <place>
      <sql>
        <![CDATA[ ]]>
      </sql>
    </place>
    
    <cargar>
      <sql>
        <![CDATA[
        SET LANGUAGE ESPAÑOL;
        SET DATEFORMAT DMY;
		DECLARE @usuarioMaster INT,@cargo INT;
        SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM softronel.fraccionamientos WHERE clave=@s_fraccionamiento;
		SELECT @cargo=clave_cargo FROM softronel.Administracion WHERE usuario=@s_usuario AND fraccionamiento=@s_fraccionamiento AND activo=1;
        
		@@subquery=[transparencia.informespermiso] ORDER BY ISNULL(prioridad,100) ASC;
      ]]>
      </sql>
    </cargar>
      
    <ObtenerInforme>
        <campo leyenda="Clave" db_nombre="claveItem" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[      
			SET LANGUAGE ESPAÑOL;
			SET DATEFORMAT DMY;
			DECLARE @usuarioMaster INT,@cargo INT;
			SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM softronel.fraccionamientos WHERE clave=@s_fraccionamiento;
			SELECT @cargo=clave_cargo FROM softronel.Administracion WHERE usuario=@s_usuario AND fraccionamiento=@s_fraccionamiento AND activo=1;     
			  IF EXISTS(
				  @@subquery=[transparencia.informespermiso] AND A.clave=@claveItem
			  ) BEGIN
				SELECT 1 estatus, * FROM Informes WHERE clave=@claveItem
			  END ELSE BEGIN
				SELECT -1 estatus, 'No tiene permiso para acceder a este informe.' mensaje FROM Informes WHERE clave=@claveItem;
			  END
        ]]>
        </sql>
      </ObtenerInforme>
	  
	  
    <informespermiso>
      <sql>
        <![CDATA[        
		SELECT A.* FROM
			(SELECT INP.prioridad,I.descripcion,'-1'fecha1,'-1' fecha2, CONVERT(NVARCHAR(20),GETDATE(),23) fecha_actual, I.clave,I.descripcion d1,I.modouso,I.config, I.pdf, I.xls,INP.general
			FROM softronel.Informes I LEFT OUTER JOIN (SELECT * FROM softronel.InformesFraccionamiento WHERE fraccionamiento=@s_fraccionamiento) INP ON I.clave=INP.informe
			WHERE publico=1 OR I.clave=INP.informe)A
		LEFT OUTER JOIN (SELECT * FROM softronel.Informes_cargo_fracc WHERE cargo=@cargo AND fraccionamiento=@s_fraccionamiento) IUF ON A.clave=IUF.informe
		WHERE  (@cargo=IUF.cargo OR @usuarioMaster=1 OR A.general=1)
      ]]>
      </sql>
    </informespermiso>
  
  </transparencia>

  <ap_domicilios3>
    <cargar>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[          
          
          DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
          
          DECLARE @verTodos INT;SELECT @vertodos=A.clave_cargo FROM (SELECT clave_cargo FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND (usuario=@s_usuario AND ISNULL(activo,0)=1) )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo AND CA.clave_accion IN(2,3);/*Tiene permisos*/          

          SET @buscar=LTRIM(RTRIM(@buscar));
          IF ISNUMERIC(@buscar)=1 BEGIN             
	          DECLARE @bdomicilio INT, @rdomicilio INT;
	          SELECT @bdomicilio= domicilio FROM Tags WHERE fraccionamiento=@s_fraccionamiento AND no_tag =  @buscar;	          
			  SELECT @rdomicilio=domicilio FROM Recibos WHERE fraccionamiento=@s_fraccionamiento AND recibo=@buscar OR folio=@buscar;
	          SELECT  'T' coincide, titular, calle + ISNULL(' ' + numero,'') + ISNULL(' FASE ' + segmento,'') domicilio, clave, 0 cuenta FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND( @verTodos IS NOT NULL OR @usuarioMaster IS NOT NULL OR clave IN(SELECT domicilio FROM Usuarios_domicilio WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario GROUP BY domicilio)) AND clave=@bdomicilio) D GROUP BY titular,numero,calle,segmento,no_interior, manzana,lote,clave
            UNION ALL
            SELECT 'G' coincide, titular, calle + ISNULL(' ' + numero,'') + ISNULL(' FASE ' + segmento,'') domicilio, clave, 0 cuenta FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND(  @verTodos IS NOT NULL OR @usuarioMaster IS NOT NULL OR clave IN(SELECT domicilio FROM Usuarios_domicilio WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario GROUP BY domicilio)) AND clave=@rdomicilio) D GROUP BY titular,numero,calle,segmento,no_interior, manzana,lote,clave ;
          END ELSE BEGIN
	          DECLARE @items SMALLINT;
	          SELECT @items=COUNT(item) FROM split(LTRIM(RTRIM(@buscar)), ' ');
	          SELECT TOP(50)* FROM (SELECT titular, calle + ISNULL(' ' + numero,'') + ISNULL(' FASE ' + segmento,'') domicilio, clave, COUNT(CASE WHEN B.item IS NOT NULL THEN 1 ELSE NULL END)cuenta FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND( @verTodos IS NOT NULL OR @usuarioMaster IS NOT NULL OR clave IN(SELECT domicilio FROM Usuarios_domicilio WHERE usuario=@s_usuario GROUP BY domicilio))) D LEFT OUTER JOIN (SELECT item FROM split(LTRIM(RTRIM(@buscar)),' '))B ON ' ' + D.calle + ISNULL(' ' + D.numero,'') + ISNULL(' ' + D.no_interior,'') like '% ' + B.item + '%'  OR @buscar IS NULL OR D.titular like '%' + @buscar + '%' OR @buscar like 'c-'+ CONVERT(NVARCHAR(20),clave) GROUP BY titular,numero,calle,segmento,no_interior, manzana,lote,clave)Q WHERE cuenta=@items ORDER BY cuenta DESC;
          END 
        ]]>
      </sql>
      </cargar>
  </ap_domicilios3>

  <ap_domicilios2>
    <cargar>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[          
            @@subquery=[ap_domicilios3.cargar]
        ]]>
      </sql>
    </cargar>
    
  </ap_domicilios2>  
  
  <domiciliosconceptosini>
    
    <cargar>
      <campo leyenda="Clave de domicilio" db_nombre="domicilio" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[           
            SET LANGUAGE ESPAÑOL;
            DECLARE @StartDate DATE = '01/02/2012';
            WITH dt(MDate) AS (
		            SELECT @StartDate AS MDate
		            UNION ALL
		            SELECT DATEADD(MM, 1, MDate)
		            FROM dt
		            WHERE MDate < DATEADD(MM,12,GETDATE())
	            )
            SELECT CONVERT(NVARCHAR(10),DATEPART(MM,MDATE)) + '-' + DATENAME(YY,MDATE) mes, UPPER(DATENAME(MM,MDATE)) + ' DEL ' + DATENAME(YY,MDATE) concepto, CASE WHEN B.mes IS NOT NULL THEN 1 ELSE NULL END registrado FROM dt A LEFT OUTER JOIN (SELECT * FROM ConciliacionesCuotas WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio)B ON DATEPART(MM,MDATE)=B.mes AND DATEPART(YY,MDATE)=B.anio ORDER BY MDATE DESC
            OPTION (MAXRECURSION 150);
        ]]>
      </sql>
    </cargar>
    
  
     <Guardar>
        <campo leyenda="Meses" db_nombre="meses" form_nombre="concepto" requerido="false" charsize="1000" tipo="string"/>
        <campo leyenda="Clave de domicilio" db_nombre="domicilio" form_nombre="clavedomicilio" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
              IF((SELECT TOP(1) ISNULL(insercionesini,0) FROM domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio)<2)BEGIN
                DELETE FROM ConciliacionesCuotas WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio;
                IF LEN(@meses)>0 INSERT INTO ConciliacionesCuotas(domicilio,mes,anio,usuario_reg,fecha_reg,fraccionamiento) SELECT @domicilio,spliter1,spliter2,@s_usuario,GETDATE(),@s_fraccionamiento FROM dbo.split2(@meses,',','-');      
                UPDATE domicilios SET insercionesini=ISNULL(insercionesini,0)+1  WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio;
                SELECT 1 estatus,'OK' mensaje;
              END ELSE BEGIN
                SELECT -1 estatus,'No se puede guardar, ya registro anteriormente' mensaje;
             END
          ]]>
        </sql>
      </Guardar>  
  </domiciliosconceptosini>
  
  <ap_domicilios>
	
	<RegistroInicial>
        <campotabla nombre="domicilios" type="DOM_T"/>
        <!--<campotabla nombre="cuotasanuales" type="CUAN_T"/>-->
        <sql>
          <![CDATA[
            BEGIN TRANSACTION T10;
            SET DATEFORMAT DMY;SET LANGUAGE Español;
            BEGIN TRY
			 DELETE FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento;
             INSERT INTO Domicilios(titular,calle,manzana,fecha_entrega,lote,numero,fraccionamiento,usuario_registro,fecha_registro,telefono,emails) 
			 SELECT titular,calle,mz,CASE WHEN ISDATE(fecha_entrega)=1 THEN fecha_entrega ELSE NULL END,lt,numero,@s_fraccionamiento,@s_usuario,GETDATE(),telefono,emails  FROM @domicilios ORDER BY calle,numero ASC ;             
             COMMIT TRANSACTION T10;
             SELECT 1 estatus,'OK:'+ CONVERT(NVARCHAR(20),@@ROWCOUNT) mensaje
            END TRY BEGIN CATCH
              ROLLBACK TRANSACTION T10;
              SELECT -1 estatus, 'Error al insertar, verifique estructura, se encontraron domicilios duplicados.' + ERROR_MESSAGE() mensaje;
            END CATCH
          ]]>
        </sql>
      </RegistroInicial>
	
    <ObtenerUltimaFechaPagada>
        <sql>
          <![CDATA[ 
              SET DATEFORMAT DMY;
              SET LANGUAGE ESPAÑOL;
              DECLARE @es_activo BIT; 
              DECLARE @fprorroga DATE;
              DECLARE @dia_corte NVARCHAR(5);SELECT TOP(1) @dia_corte=dia_corte FROM Config_Pagos_Hist WHERE fraccionamiento=@s_fraccionamiento AND config_pago=(SELECT TOP(1) conf_pagos_default FROM Fraccionamientos WHERE clave=@s_fraccionamiento) ORDER BY fecha1 DESC;--PONER ESTE VALOR EN CONFIGURACION            
              DECLARE @dia_corte_dom NVARCHAR(5);SELECT @dia_corte_dom=dia_corte FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio;
              DECLARE @dia_corte_cp NVARCHAR(5);SELECT @dia_corte_cp=CP.dia_corte FROM (SELECT dia_corte,indice FROM (SELECT dia_corte, config_pago indice, ROW_NUMBER() OVER(PARTITION BY config_pago ORDER BY fecha1 DESC) num FROM Config_Pagos_Hist WHERE fraccionamiento=@s_fraccionamiento)Aux WHERE num=1 ) CP INNER JOIN (SELECT config_pago FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio)D ON CP.indice=D.config_pago;
              SELECT TOP(1) @fprorroga=prorroga FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio;                
              DECLARE @fpago DATE;                
              SELECT @fpago=DATEADD(MM,1,MAX(CONVERT(DATE,ISNULL(@dia_corte_dom,ISNULL(@dia_corte_cp, @dia_corte)) + '-' + CONVERT(NVARCHAR(20),mes) + '-' + CONVERT(NVARCHAR(20),anio) )) ) FROM(
	              SELECT domicilio,mes,anio FROM PagosREalizados WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio
	              UNION ALL
	              SELECT domicilio,mes,anio FROM ConciliacionesCuotas WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio
	              UNION ALL
	              SELECT domicilio,mes,anio FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio
              )A GROUP BY domicilio;  
              SELECT @es_activo=CASE WHEN @fprorroga >= CONVERT(DATE,GETDATE()) OR @fpago>CONVERT(DATE,GETDATE()) THEN 1 ELSE 0 END;
          ]]>
        </sql>  
    </ObtenerUltimaFechaPagada>
    
    <AgregarProrroga>
        <campo leyenda="Fecha negociada" db_nombre="fecha_negociada" form_nombre="fecha_negociada" requerido="false" charsize="30" tipo="string"/>
        <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[        
              SET DATEFORMAT DMY;
              SET LANGUAGE ESPAÑOL;
              DECLARE @tiene_permiso BIT;          
              DECLARE @usuarioMaster INT;
              SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
              SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=10;             
              IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
                UPDATE Domicilios 
                SET prorroga=@fecha_negociada, usuario_modifica=@s_usuario, fecha_modificacion=GETDATE(),tag_activo=CASE WHEN @fecha_negociada>=CONVERT(DATE,GETDATE()) THEN 1 ELSE 0 END 
                WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio;
                @@subquery=[ap_domicilios.ObtenerUltimaFechaPagada]                                            
                SELECT 1 estatus, 'Actualizado correctamente' mensaje, @es_activo es_activo; 
             END ELSE BEGIN
                SELECT -1 estatus, 'No tiene habilitada esta función' mensaje; 
             END
          ]]>
        </sql>  
    </AgregarProrroga>    
    
    <ActivarTag>
        <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
        <campo leyenda="Checked" db_nombre="poner" form_nombre="poner" requerido="true" charsize="0" tipo="bool"/>
        <sql>
          <![CDATA[        
              SET DATEFORMAT DMY;
              SET LANGUAGE ESPAÑOL;
              @@subquery=[ap_domicilios.ObtenerUltimaFechaPagada]                                            
              SELECT 1 estatus, 'Lectura correcta' mensaje, @es_activo es_activo;   
          ]]>
        </sql>  
    </ActivarTag>
    
    <ObtenerEstatusDomicilios>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="General" db_nombre="general" form_nombre="general" requerido="true" charsize="0" tipo="bool"/>
      <sql>
          <![CDATA[            
           SET DATEFORMAT DMY;
            SET LANGUAGE ESPAÑOL;
            --DECLARE @domicilio INT=22116,@general BIT;
            DECLARE @dia_corte NVARCHAR(5);SELECT TOP(1) @dia_corte=dia_corte FROM Config_Pagos_Hist WHERE fraccionamiento=@s_fraccionamiento AND fraccionamiento=@s_fraccionamiento AND cat_default=1 ORDER BY fecha1 DESC;--PONER ESTE VALOR EN CONFIGURACION            
            SELECT T.id_usuario_disp indice_tag, T.nombre_usuario usuario,T.no_tag tag,
            --Q.UFechaP [Fecha_Ref], DATENAME(MM,UFechaP) Mes,DATENAME(YY,UFechaP) [Año] ,
            --CASE WHEN UFechaP>='01-' + DATENAME(MM,GETDATE()) + '-' + DATENAME(YY,GETDATE())  THEN 'CORRIENTE' WHEN D.prorroga>=CONVERT(DATE,GETDATE()) THEN 'PRORROGA' ELSE 'MORA' END s_estatus,
            CASE WHEN T.activo=0 THEN 0 WHEN CONVERT(DATE,GETDATE())<DATEADD(DD,ISNULL(D.dia_corte,ISNULL(D.dia_corte_cp, @dia_corte)),UFechaP) THEN 1 WHEN ISNULL(D.tag_activo,1)=0 THEN 0 WHEN D.prorroga>=CONVERT(DATE,GETDATE()) THEN 2 ELSE 0 END estatus,
            CASE WHEN T.activo=0 THEN NULL WHEN CONVERT(DATE,GETDATE())<DATEADD(DD,ISNULL(D.dia_corte,ISNULL(D.dia_corte_cp, @dia_corte)),UFechaP)  OR D.prorroga>=CONVERT(DATE,GETDATE()) THEN REPLACE(CONVERT(NVARCHAR(20),GETDATE(),111),'/','') ELSE NULL END fecha_inicial,
            CASE WHEN T.activo=0 THEN NULL WHEN CONVERT(DATE,GETDATE())<DATEADD(DD,ISNULL(D.dia_corte,ISNULL(D.dia_corte_cp, @dia_corte)),UFechaP)  THEN REPLACE(CONVERT(NVARCHAR(20),DATEADD(DD,ISNULL(D.dia_corte,ISNULL(D.dia_corte_cp, @dia_corte)),UFechaP),111),'/','') WHEN D.prorroga>=CONVERT(DATE,GETDATE()) THEN REPLACE(CONVERT(NVARCHAR(20),D.prorroga,111),'/','') ELSE NULL END fecha_final
            FROM (SELECT D1.*,CP.dia_corte dia_corte_cp FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D1 LEFT OUTER JOIN (SELECT dia_corte,indice FROM (SELECT dia_corte, config_pago indice, ROW_NUMBER() OVER(PARTITION BY config_pago ORDER BY fecha1 DESC) num FROM Config_Pagos_Hist WHERE fraccionamiento=@s_fraccionamiento)Aux WHERE num=1 ) CP ON D1.config_pago=CP.indice WHERE (@general=1 AND @domicilio IS NULL) OR (@general=0 AND clave=@domicilio)) D LEFT OUTER JOIN (
	              SELECT domicilio,DATEADD(MM,1,MAX(CONVERT(DATE, '01-' + CONVERT(NVARCHAR(20),mes) + '-' + CONVERT(NVARCHAR(20),anio) )) )UFechaP FROM (
		            SELECT domicilio,mes,anio FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento AND((@general=1 AND @domicilio IS NULL) OR (@general=0 AND domicilio=@domicilio))
		            UNION ALL
		            SELECT domicilio,mes,anio FROM ConciliacionesCuotas WHERE fraccionamiento=@s_fraccionamiento AND((@general=1 AND @domicilio IS NULL) OR (@general=0 AND domicilio=@domicilio))
		            UNION ALL
		            SELECT domicilio,mes,anio FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND((@general=1 AND @domicilio IS NULL) OR (@general=0 AND domicilio=@domicilio))
	            )A
	            GROUP BY domicilio
            )Q ON D.clave=Q.domicilio
            LEFT OUTER JOIN (SELECT * FROM Tags WHERE fraccionamiento=@s_fraccionamiento) T ON D.clave=T.domicilio
            WHERE T.no_tag IS NOT NULL
            ORDER BY estatus DESC,T.domicilio ASC;
			
          ]]>
        </sql> 
    </ObtenerEstatusDomicilios>
    
      <ObtenerDomiciliosCoincidentes>
        <campo leyenda="Nombre" db_nombre="nombre" form_nombre="nombre" requerido="false" charsize="300" tipo="string"/>
        <campo leyenda="Fraccionamiento" db_nombre="s_fraccionamiento" form_nombre="s_fraccionamiento" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[          
              SELECT calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'') domicilio, clave FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND(titular LIKE '%'+LTRIM(RTRIM(@nombre))+'%') ORDER BY clave DESC;

          ]]>
        </sql>      
      </ObtenerDomiciliosCoincidentes>
    <cargar>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[          
            @@subquery=[ap_domicilios3.cargar]
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Titular" db_nombre="titular" form_nombre="titular" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Calle" db_nombre="calle" form_nombre="calle" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Número" db_nombre="numero" form_nombre="numero" requerido="true" charsize="10" tipo="string"/>
      <campo leyenda="Número interior" db_nombre="no_interior" form_nombre="no_interior" requerido="false" charsize="10" tipo="string"/>
      <campo leyenda="Manzana" db_nombre="mz" form_nombre="mz" requerido="false" charsize="10" tipo="string"/>
      <campo leyenda="Lote" db_nombre="lt" form_nombre="lt" requerido="false" charsize="10" tipo="string"/>
      <campo leyenda="Segmento" db_nombre="seg" form_nombre="seg" requerido="false" charsize="10" tipo="string"/>
      <campo leyenda="E-mail Oficial" db_nombre="email" form_nombre="email" requerido="false" charsize="100" tipo="string"/>
      <campo leyenda="Teléfono" db_nombre="telefono" form_nombre="telefono" requerido="false" charsize="20" tipo="string"/>
      <campo leyenda="Teléfono 2" db_nombre="telefono2" form_nombre="telefono2" requerido="false" charsize="20" tipo="string"/>
      <campo leyenda="Día de corte" db_nombre="dia_corte" form_nombre="dia_corte" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Configuración de pago" db_nombre="config_pago" form_nombre="config_pago" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Fecha de entrega" db_nombre="fecha_entrega" form_nombre="fecha_entrega" requerido="true" charsize="20" tipo="string"/>
      <campo leyenda="Clave" db_nombre="indice" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[  
        SET DATEFORMAT DMY;
        IF @esNuevo=1 BEGIN
          INSERT INTO Domicilios(titular,calle,manzana,lote,numero,no_interior,fecha_registro,usuario_registro,fraccionamiento,fecha_entrega,email,segmento,telefono,telefono2,dia_corte,config_pago) VALUES(@titular,@calle,@mz,@lt,@numero,@no_interior,GETDATE(),@s_usuario,@s_fraccionamiento,@fecha_entrega,@email,@seg,@telefono,@telefono2,@dia_corte,@config_pago);
          SELECT 1 estatus, 'OK' mensaje, CONVERT(INT,@@IDENTITY) clave;
         END ELSE BEGIN
          IF(@indice IS NOT NULL)BEGIN
            UPDATE Domicilios SET titular=@titular,calle=@calle,manzana=@mz,lote=@lt,numero=@numero,no_interior=@no_interior,fecha_modificacion=GETDATE(),usuario_registro=@s_usuario,fecha_entrega=@fecha_entrega,email=@email,segmento=@seg,telefono=@telefono,telefono2=@telefono2,dia_corte=@dia_corte,config_pago=@config_pago WHERE fraccionamiento=@s_fraccionamiento AND clave=@indice;
            SELECT 1 estatus, 'OK' mensaje, @indice clave;
          END ELSE 
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
         END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
          
            DECLARE @domicilio INT;SET @domicilio=@claveItem;
            
            DECLARE @proxpagosinmora INT;SELECT @proxpagosinmora=domicilio FROM PermisosDescontarMora WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND fecha_aplicado IS NULL;
            
            --AQUI ESTA DECLARADA @fprorroga, @fpago y @es_activo;
            @@subquery=[ap_domicilios.ObtenerUltimaFechaPagada];
          
            SELECT CASE WHEN @proxpagosinmora IS NOT NULL THEN CONVERT(BIT,1) ELSE NULL END proxpagosinmora, CONVERT(NVARCHAR(20), @fprorroga,103) fecha_prorroga,D.telefono,telefono2,config_pago,dia_corte, @es_activo es_activo, D.clave, calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'')  domicilio,D.titular,D.insercionesini,
            CASE WHEN U.clave IS NOT NULL THEN U.usuario + ' ' + ISNULL(U.apellidos,'') ELSE NULL END usuario_registro,
            CASE WHEN UM.clave IS NOT NULL THEN UM.usuario + ' ' + ISNULL(UM.apellidos,'') ELSE NULL END usuario_modifico,
            CONVERT(NVARCHAR(20),D.fecha_registro) fecha_alta,CONVERT(NVARCHAR(20),D.fecha_entrega,103) fecha_entrega, CONVERT(NVARCHAR(20),D.fecha_modificacion) fecha_modifico,
            D.calle,D.manzana,D.lote,D.numero,D.no_interior,D.email, D.segmento
            FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D
            LEFT OUTER JOIN (SELECT * FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento) U ON D.usuario_registro=U.clave
            LEFT OUTER JOIN (SELECT * FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento) UM ON D.usuario_modifica=UM.clave            
            WHERE D.clave=@claveItem;
            
            DECLARE @usuarioMaster INT;
            SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
        
            DECLARE @tiene_permiso BIT;
            SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=22;/* es la clave para editar historial*/
            IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN 
              SELECT 'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/expediente/_' + CONVERT(NVARCHAR(100), clave) + '/_' + CONVERT(NVARCHAR(100),indice) + extension path, * FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND catalogo=16;
            END
          ]]>
        </sql>
    </ObtenerItem>

    <Eliminar>
      <campo leyenda="Indice de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
              DELETE FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem; 
              SELECT 1 estatus, 'OK' mensaje;           
          ]]>
      </sql>      
    </Eliminar> 
  </ap_domicilios>

  <expediente>    
    <Guardar>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[  
          SELECT 1 estatus, 'OK' mensaje, @domicilio clave;
        ]]>
      </sql>
    </Guardar>
  </expediente>
    
  <depositos_banco_sel> 
    <cargar>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="100" tipo="string"/>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="false" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[          
          SET LANGUAGE ESPAÑOL;
            SELECT CASE WHEN registro_inicial=1 THEN 'Capturado desde Estado de Cuenta' WHEN registro_inicial=2 THEN 'Capturado desde Pagos' ELSE 'Capturado por Residente' END fuente_captura, CONVERT(NVARCHAR(30),DB.fecha,113) fecha, ISNULL('Folio:' +  CONVERT(NVARCHAR(20),folio),'No aplicado') sfolio, U.usuario + ' ' + ISNULL(U.apellidos,'') usuario_valida_ecb,DB.*
            FROM (SELECT * FROM DepositosBancarios WHERE fraccionamiento=@s_fraccionamiento) DB
            LEFT OUTER JOIN (SELECT * FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento) U ON U.clave=DB.u_ecb
            WHERE(CASE WHEN ISDATE(@buscar)=1 THEN CONVERT(DATETIME,@buscar) ELSE NULL END)=CONVERT(DATE,fecha) OR ISNULL(origen,'') like '%' + ISNULL(@buscar,'') + '%' AND folio IS NULL AND (@domicilio=DB.domicilio OR DB.domicilio IS NULL);
        ]]>
      </sql>
    </cargar>
   </depositos_banco_sel>
  
  <depositos_banco> 
    <cargar>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="100" tipo="string"/>
      <sql>
        <![CDATA[      
            SET LANGUAGE ESPAÑOL;
            SET DATEFORMAT DMY;
            SELECT CASE WHEN registro_inicial=1 THEN 'Capturado desde Estado de Cuenta' WHEN registro_inicial=2 THEN 'Capturado desde Pagos' ELSE 'Capturado por Residente' END fuente_captura, CONVERT(NVARCHAR(30),DB.fecha,113) fecha,ISNULL(D.calle + ' ' + D.numero + ISNULL(' FASE ' + D.segmento,''), 'No identificado') domicilio, ISNULL('Folio:' + CONVERT(NVARCHAR(20),folio),'No aplicado') sfolio, U.usuario + ' ' + ISNULL(U.apellidos,'') usuario_valida_ecb,DB.*
            FROM (SELECT * FROM DepositosBancarios WHERE fraccionamiento=@s_fraccionamiento) DB LEFT OUTER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D ON DB.domicilio=D.clave 
            LEFT OUTER JOIN (SELECT * FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento) U ON U.clave=DB.u_ecb
            WHERE(CASE WHEN ISDATE(@buscar)=1 THEN CONVERT(DATETIME,@buscar) ELSE NULL END)=CONVERT(DATE,fecha) OR ISNULL(origen,'') like '%' + ISNULL(@buscar,'') + '%' ORDER BY DB.fecha DESC;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Fecha de comprobante" db_nombre="fecha_comprobante" form_nombre="fecha" requerido="false" charsize="20" tipo="string"/>
      <campo leyenda="Origen" db_nombre="origen" form_nombre="origen" requerido="false" charsize="200" tipo="string"/>
      <campo leyenda="Monto" db_nombre="monto" form_nombre="monto" requerido="false" charsize="200" tipo="string"/>
      <campo leyenda="Clave" db_nombre="indice" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Validación" db_nombre="validacion" form_nombre="validacion" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[  
        SET DATEFORMAT DMY;        
        SET LANGUAGE ESPAÑOL;        
        DECLARE @tiene_permiso BIT;          
        DECLARE @usuarioMaster INT;
        SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
        SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=18;/* es la clave capturar depositos*/              
        IF (@tiene_permiso=1 OR @usuarioMaster=1)AND @validacion IN(1,2) OR @validacion=3 BEGIN        
          IF @esNuevo=1 BEGIN          
            INSERT INTO DepositosBancarios(fraccionamiento,fecha,fecha_comprobante,monto,origen,u_ecb,u_comprobante,u_residente,domicilio,registro_inicial) 
            VALUES(@s_fraccionamiento,GETDATE(),@fecha_comprobante,@monto,@origen,
              CASE WHEN @validacion=1 THEN @s_usuario ELSE NULL END,
              CASE WHEN @validacion=2 THEN @s_usuario ELSE NULL END,
              CASE WHEN @validacion=3 THEN @s_usuario ELSE NULL END,@domicilio,@validacion
             );
            SELECT 1 estatus, 'OK' mensaje, CONVERT(INT,@@IDENTITY) clave;
           END ELSE BEGIN
            IF(@indice IS NOT NULL)  BEGIN
              DECLARE @imagenes INT;
              IF @validacion=2 BEGIN
                SELECT @imagenes=COUNT(*) FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND(catalogo=12 AND clave= @indice);
              END
              IF (@validacion=2 AND @imagenes>0) OR @validacion IN(1,3) BEGIN                
                UPDATE DepositosBancarios SET fecha_comprobante=@fecha_comprobante,monto=ISNULL(@monto,monto),origen=ISNULL(@origen,origen)
                ,u_ecb=CASE WHEN @validacion=1 THEN @s_usuario ELSE u_ecb END,
                u_comprobante=CASE WHEN @validacion=2 THEN @s_usuario ELSE u_comprobante END,
                u_residente=CASE WHEN @validacion=3 THEN @s_usuario ELSE u_residente END 
                WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
                SELECT 1 estatus, 'OK' mensaje, @indice clave;
               END ELSE BEGIN
                  SELECT -1 estatus, 'No puede guardar validación de comprobante, no existe archivo.' mensaje;
               END
            END ELSE 
              SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
           END
         END ELSE BEGIN
            SELECT -1 estatus, 'No tiene habilitada esta función' mensaje;
        END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
			SET LANGUAGE ESPAÑOL;SET DATEFORMAT DMY;
            SELECT CONVERT(NVARCHAR(30),fecha_comprobante,103) fecha_comprobante, * FROM DepositosBancarios WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
          ]]>
        </sql>
    </ObtenerItem>

    <Eliminar>
      <campo leyenda="Indice de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
              DECLARE @tiene_permiso BIT;          
              DECLARE @usuarioMaster INT;
              SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
              SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=18;/* es la clave para acceder a todos los usuarios*/              
              IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN 
                IF EXISTS(SELECT * FROM DepositosBancarios WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem AND folio IS NOT NULL) BEGIN
                  SELECT -1 estatus, 'No se puede eliminar este item, existe un pago relacionado.' mensaje;
                END ELSE BEGIN
                   DELETE FROM DepositosBancarios WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem; 
                   SELECT 1 estatus, 'OK' mensaje;           
                END
              END ELSE BEGIN
                  SELECT -1 estatus, 'No tiene habilitada esta función' mensaje;           
            END
          ]]>
      </sql>      
    </Eliminar> 
  </depositos_banco>
  
  <tags> 
    <cargar>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="d" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[          
            SELECT * FROM Tags WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio;
        ]]>
      </sql>
    </cargar>
    
    <Guardar>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="d" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Id de Usuario en controladora" db_nombre="id_usuario_disp" form_nombre="id_usuario_disp" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Usuario de vehículo" db_nombre="usuario_vehi" form_nombre="usuario_vehi" requerido="false" charsize="200" tipo="string"/>
      <campo leyenda="Descripción de vehículo" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="300" tipo="string"/>
      <campo leyenda="Número de Tag" db_nombre="no_tag" form_nombre="no_tag" requerido="true" charsize="20" tipo="string"/>
      <campo leyenda="Marbete" db_nombre="no_marbete" form_nombre="marbete" requerido="false" charsize="20" tipo="string"/>
      <campo leyenda="Placas" db_nombre="placas" form_nombre="placas" requerido="false" charsize="20" tipo="string"/>
      <campo leyenda="Clave" db_nombre="indice" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[  
        SET DATEFORMAT DMY;        
        DECLARE @tiene_permiso BIT;          
        DECLARE @existe BIT;          
        DECLARE @usuarioMaster INT;
        SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
        SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=11;/* es la clave para acceder a todos los usuarios*/              
        IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN		  
          IF @esNuevo=1 BEGIN
			IF EXISTS(SELECT indice FROM Tags WHERE no_tag=@no_tag)BEGIN
				UPDATE Tags SET activo=1, domicilio=@domicilio, descripcion=@descripcion,placas=@placas,marbete=@no_marbete,nombre_usuario=@usuario_vehi WHERE fraccionamiento=@s_fraccionamiento AND no_tag=@no_tag;
			END ELSE BEGIN
				SELECT @id_usuario_disp=MAX(ISNULL(id_usuario_disp,0))+1 FROM Tags WHERE fraccionamiento=@s_fraccionamiento;          
				INSERT INTO Tags VALUES(@domicilio,@usuario_vehi,@descripcion,@no_tag,@no_marbete,@placas,@id_usuario_disp,1,@s_fraccionamiento);
            END
			SELECT 1 estatus, 'OK' mensaje, CONVERT(INT,@@IDENTITY) clave;
           END ELSE BEGIN
			IF @id_usuario_disp IS NULL BEGIN
				SELECT @id_usuario_disp=MAX(ISNULL(id_usuario_disp,0))+1 FROM Tags WHERE fraccionamiento=@s_fraccionamiento;
			END 
			
            IF(@indice IS NOT NULL)BEGIN
              UPDATE Tags SET descripcion=@descripcion,placas=@placas,no_tag=@no_tag,marbete=@no_marbete,nombre_usuario=@usuario_vehi,id_usuario_disp=@id_usuario_disp WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
              SELECT 1 estatus, 'OK' mensaje, @indice clave;
            END ELSE 
              SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
           END
         END ELSE BEGIN
            SELECT -1 estatus, 'No tiene habilitada esta función' mensaje;
        END
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT * FROM Tags WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
          ]]>
        </sql>
    </ObtenerItem>

    <Eliminar>
      <campo leyenda="Indice de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="REasignar" db_nombre="reasignar" form_nombre="reasignar" requerido="false" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[
              DECLARE @tiene_permiso BIT;          
              DECLARE @usuarioMaster INT;
              SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;          
              SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1 )A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=11;/* es la clave para acceder a todos los usuarios*/              
              IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN   
                  IF @reasignar=1 BEGIN
                    INSERT INTO TarjetasDesasignadas(indice,domicilio,nombre_usuario,no_tag,fecha,responsable, fraccionamiento)
                      SELECT indice,domicilio,nombre_usuario,no_tag,GETDATE(),@s_usuario,@s_fraccionamiento FROM Tags WHERE indice=@claveItem;
                    DELETE FROM Tags WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem; 
                  END ELSE BEGIN
                    UPDATE Tags SET activo=0 WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem; 
                  END
                  SELECT 1 estatus, 'OK' mensaje;           
              END ELSE BEGIN
                  SELECT -1 estatus, 'No tiene habilitada esta función' mensaje;           
            END
          ]]>
      </sql>      
    </Eliminar> 
  </tags>  
  
  <ap_conceptos>

    <LeerAsignacionesC>
      <campo leyenda="Concepto" db_nombre="concepto" form_nombre="c" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[              
            SET LANGUAGE Spanish;
            SELECT indice,D.calle + ' ' + ISNULL(numero,'') descripcion, D.clave valor FROM (SELECT * FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento AND concepto=@concepto)A INNER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) D ON A.domicilio=D.clave WHERE domicilio IS NOT NULL;
            SELECT indice,calle descripcion, calle valor FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento AND concepto=@concepto AND calle IS NOT NULL;
            SELECT indice,manzana descripcion, manzana valor FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento AND concepto=@concepto AND manzana IS NOT NULL;
            SELECT indice,segmento descripcion, segmento valor FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento AND concepto=@concepto AND segmento IS NOT NULL;            
            SELECT general valor FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento AND clave=@concepto;            
        ]]>
      </sql>
    </LeerAsignacionesC>

    <dom_s>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <campo leyenda="Concepto" db_nombre="concepto" form_nombre="c" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[          
            
            DECLARE @usuarioMaster INT;
            SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
          
            DECLARE @verTodos INT;SELECT @vertodos=A.clave_cargo FROM (SELECT clave_cargo FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND(usuario=@s_usuario AND ISNULL(activo,0)=1) )A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo AND CA.clave_accion=3;/*Tiene permisos*/
            DECLARE @domicilio INT;SELECT @domicilio=domicilio FROM Usuarios_domicilio WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario;
            DECLARE @items SMALLINT;
            SELECT @items=COUNT(item) FROM split(LTRIM(RTRIM(@buscar)), ' ');
            
            SELECT TOP(50)* FROM (SELECT titular, D.calle + ISNULL(' ' + numero,'') descripcion, clave valor, COUNT(CASE WHEN B.item IS NOT NULL THEN 1 ELSE NULL END)cuenta FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND(clave=@domicilio OR @verTodos IS NOT NULL OR @usuarioMaster IS NOT NULL)) D LEFT OUTER JOIN (SELECT item FROM split(LTRIM(RTRIM(@buscar)),' '))B ON ' ' + D.calle + ISNULL(' ' + D.numero,'') + ISNULL(' ' + D.no_interior,'') like '%' + B.item + '%'  OR @buscar IS NULL OR D.titular like '%' + @buscar + '%' LEFT OUTER JOIN (SELECT * FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento) CA ON CA.concepto=@concepto AND CA.domicilio=D.clave WHERE CA.domicilio IS NULL GROUP BY titular,numero,D.calle,no_interior, D.manzana,D.lote,clave)Q WHERE cuenta=@items ORDER BY cuenta DESC;
        ]]>
      </sql>
    </dom_s>

    <call_s>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string" default=""/>
      <campo leyenda="Concepto" db_nombre="concepto" form_nombre="c" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
           SELECT D.calle descripcion, D.calle valor FROM (SELECT DISTINCT calle FROM (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento) WHERE calle like '%' + @buscar + '%' AND LEN(LTRIM(RTRIM(calle)))>0) D LEFT OUTER JOIN (SELECT * FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento) CA ON  CA.concepto=@concepto AND D.calle=CA.calle WHERE CA.calle IS NULL;
        ]]>
      </sql>
    </call_s>

    <mz_s>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string" default=""/>
      <campo leyenda="Concepto" db_nombre="concepto" form_nombre="c" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
           SELECT D.manzana descripcion, D.manzana valor FROM (SELECT DISTINCT manzana FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND(calle like '%' + @buscar + '%' AND LEN(LTRIM(RTRIM(manzana)))>0)) D LEFT OUTER JOIN (SELECT * FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento) CA ON  CA.concepto=@concepto AND D.manzana=CA.manzana WHERE CA.manzana IS NULL;
        ]]>
      </sql>
    </mz_s>

    <seg_s>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string" default=""/>
      <campo leyenda="Concepto" db_nombre="concepto" form_nombre="c" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
           SELECT D.segmento descripcion, D.segmento valor FROM (SELECT DISTINCT segmento FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND(segmento like '%' + @buscar + '%' AND LEN(LTRIM(RTRIM(segmento)))>0)) D LEFT OUTER JOIN (SELECT * FROM Conceptos_asignaciones) CA ON  CA.concepto=@concepto AND D.segmento=CA.segmento WHERE CA.segmento IS NULL;
        ]]>
      </sql>
    </seg_s>
    
    <cargar>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[
           SELECT TOP(30) clave,nombre,monto,de_sistema FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento AND(( @buscar IS NULL OR nombre like '%' + @buscar + '%')) ORDER BY fecha_alta DESC, de_sistema DESC;
        ]]>
      </sql>
    </cargar>

    <AsignarConcepto>
       <campo leyenda="Concepto" db_nombre="concepto" form_nombre="c" requerido="true" charsize="0" tipo="int"/>
       <campo leyenda="Valor" db_nombre="valor" form_nombre="valor" requerido="true" charsize="200" tipo="string"/>
       <campo leyenda="Fecha inicio de vigencia" db_nombre="fecha_vig" form_nombre="fecha_vig" requerido="false" charsize="20" tipo="string"/>
       <campo leyenda="Tipo de asignación" db_nombre="tipo_asignacion" form_nombre="t_a" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[          
           DECLARE @monto DECIMAL(10,2);
            SELECT @monto=monto FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento AND clave=@concepto;
            DECLARE @domicilio INT,@calle NVARCHAR(200),@mz NVARCHAR(100),@seg NVARCHAR(100),@general BIT;
            SELECT @domicilio= CASE WHEN @tipo_asignacion=1 THEN @valor ELSE NULL END;
            SELECT @calle= CASE WHEN @tipo_asignacion=2 THEN @valor ELSE NULL END;
            SELECT @mz= CASE WHEN @tipo_asignacion=3 THEN @valor ELSE NULL END;
            SELECT @seg= CASE WHEN @tipo_asignacion=4 THEN @valor ELSE NULL END;          
            SELECT @general= CASE WHEN @tipo_asignacion=5 THEN @valor ELSE NULL END;          
          
            IF @tipo_asignacion=5 BEGIN
                UPDATE Conceptos SET general=@valor, fecha_alta=ISNULL(@fecha_vig,GETDATE()) WHERE fraccionamiento=@s_fraccionamiento AND clave=@concepto;  
                SELECT general estatus FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento AND clave=@concepto;
            END ELSE BEGIN
              IF NOT EXISTS(
              SELECT * FROM Conceptos_asignaciones WHERE
				fraccionamiento=@s_fraccionamiento AND(
                ((@tipo_asignacion=1 AND domicilio=@domicilio) OR 
                (@tipo_asignacion=2 AND calle=@calle) OR 
                (@tipo_asignacion=3 AND manzana=@mz) OR 
                (@tipo_asignacion=4 AND segmento=@seg))AND concepto=@concepto 
				)
              )BEGIN
                  INSERT INTO Conceptos_asignaciones VALUES(@domicilio,@calle,@mz,@seg,@concepto,@tipo_asignacion,GETDATE(),@s_usuario,@monto,@s_fraccionamiento); 
                  SELECT 1 estatus, 'Realizado correctamente.' mensaje, @concepto;
                END ELSE BEGIN                  
                  SELECT -1 estatus, 'Error ya existe asta asignación.' mensaje;
                END
             END
          ]]>
        </sql>      
    </AsignarConcepto>

    <EliminarAsigC>
       <campo leyenda="Indice" db_nombre="indice" form_nombre="i" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
              DELETE FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;     
              SELECT 1 estatus, 'Realizado correctamente. ' + CONVERT(NVARCHAR(10),@@ROWCOUNT) + ' registros.'   mensaje;
          ]]>
        </sql>      
    </EliminarAsigC>
    
    <Guardar>
      <campo leyenda="Nombre" db_nombre="nombre" form_nombre="concepto" requerido="true" charsize="100" tipo="string"/>
      <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="500" tipo="string"/>
      <campo leyenda="Monto" db_nombre="monto" form_nombre="monto" requerido="true" charsize="0" tipo="float"/>
      <campo leyenda="Clave" db_nombre="indice" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
      <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
      <sql>
        <![CDATA[      
          IF @esNuevo=1 BEGIN
            DECLARE @clave_concepto INT;
            INSERT INTO Conceptos(nombre,descripcion,monto,fecha_alta,usuario_registro,fraccionamiento) VALUES(@nombre,@descripcion,@monto,GETDATE(),@s_usuario,@s_fraccionamiento);
            SET @clave_concepto=CONVERT(INT,@@IDENTITY);    
            SELECT 1 estatus, 'OK' mensaje, @clave_concepto clave;      
          END ELSE IF(@indice IS NOT NULL)BEGIN               
              UPDATE Conceptos SET monto=@monto,fecha_modificacion=GETDATE(),usuario_modifica=@s_usuario WHERE fraccionamiento=@s_fraccionamiento AND clave=@indice;
              SELECT 1 estatus, 'OK' mensaje, @clave_concepto clave;      
          END ELSE BEGIN
            SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
          END          
        ]]>
      </sql>
    </Guardar>
    
    <ObtenerItem>
        <campo leyenda="Clave" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT  
            CASE WHEN U.clave IS NOT NULL THEN U.usuario + ' ' + ISNULL(U.apellidos,'') ELSE NULL END usuario_registro,
            CASE WHEN UM.clave IS NOT NULL THEN UM.usuario + ' ' + ISNULL(UM.apellidos,'') ELSE NULL END usuario_modifico,
            CONVERT(NVARCHAR(20),C.fecha_alta) fecha_alta, CONVERT(NVARCHAR(20),C.fecha_modificacion) fecha_modifico,
            c.* 
            FROM (SELECT * FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento) C 
            LEFT OUTER JOIN (SELECT * FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento) U ON C.usuario_registro=U.clave
            LEFT OUTER JOIN (SELECT Usuarios WHERE fraccionamiento=@s_fraccionamiento) UM ON C.usuario_modifica=UM.clave            
            WHERE C.clave=@claveItem;
          ]]>
        </sql>
    </ObtenerItem>

    <EliminarItem>
      <campo leyenda="Indice de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
      <sql>
        <![CDATA[
          --ES ELiminar sin cancelar y punto.
              IF NOT EXISTS(SELECT folio FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento AND clave_concepto=@claveItem) BEGIN    
                DELETE FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento AND clave=@claveItem AND de_sistema IS NULL; 
                SELECT 1 estatus, 'OK' mensaje;    
              END ELSE BEGIN
                SELECT -1 estatus, 'No puede borrar debido a que alguien pago este concepto.' mensaje;    
              END
          ]]>
      </sql>      
    </EliminarItem> 
    
  </ap_conceptos>
  
  <aportaciones>
	
	<PagoPorSistema>
        <campo leyenda="Referencia" db_nombre="referencia_p" form_nombre="referencia" requerido="true" charsize="0" tipo="int"/>
        <campo leyenda="Importe" db_nombre="importe" form_nombre="importe" requerido="true" charsize="30" tipo="string"/>
        <campo leyenda="Fecha" db_nombre="fecha" form_nombre="fecha" requerido="true" charsize="30" tipo="string"/>
        <campo leyenda="Rastreo" db_nombre="rastreo" form_nombre="rastreo" requerido="rastreo" charsize="100" tipo="string"/>
        <campo leyenda="Origen" db_nombre="origen" form_nombre="origen" requerido="false" charsize="200" tipo="string"/>
        <sql>
          <![CDATA[
			USE safra;
            SET LANGUAGE ESPAÑOL; 
              
			  DECLARE @s_fraccionamiento INT, @domicilio INT, @conceptos NVARCHAR(MAX),@meses NVARCHAR(MAX),@total DECIMAL(10,2);
			  SELECT @s_fraccionamiento=fraccionamiento,@domicilio=domicilio,@conceptos=conceptos,@meses=meses,@total=total FROM PromesasPago WHERE folio=@referencia_p;
			   
			  DECLARE @pagador NVARCHAR(200),@recibo INT,@ctipopago INT,@deposito_asociado INT,@tipopago NVARCHAR(30),@fecha_pago DATETIME,@recibe DECIMAL(10,2),@deja_a_cuenta DECIMAL(10,2),@es_compuesto BIT,@parte NVARCHAR(20),@gafetes NVARCHAR(500),@t_gafetes INT;
			  SELECT @ctipopago=10,@fecha_pago=@fecha,@recibe=@importe,@pagador=@rastreo;
			  
			  IF (@recibe > @total) SET @deja_a_cuenta=@recibe-@total;
			  
			  IF @recibe<@total BEGIN
				SET @es_compuesto=1;
				SET @parte=CONVERT(NVARCHAR(30),GETDATE(),106);
			  END
			  
			  DECLARE @s_usuario INT;SET @s_usuario=10229;
			  
			  @@subquery=[aportaciones.PagarTicket];
			  
           ]]>
        </sql>
	</PagoPorSistema>
                  
    <EnviarRecibo>
        <campo leyenda="Recibo" db_nombre="recibo" form_nombre="recibo" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Folio" db_nombre="folio" form_nombre="folio" requerido="true" charsize="0" tipo="int"/>
        <mail  adjunto-url="http://localhost/logic/recibo.pdf" />
        <sql>
          <![CDATA[      
            SET LANGUAGE ESPAÑOL;              
              
              DECLARE @s_domicilio NVARCHAR(500);DECLARE @emailpaga NVARCHAR(100);
              DECLARE @nombrefrac NVARCHAR(200);SELECT TOP(1) @nombrefrac=nombre FROM Fraccionamientos WHERE clave=@s_fraccionamiento;                
              DECLARE @s_cobrador NVARCHAR(500);DECLARE @fecha_registro NVARCHAR(20);
              DECLARE @domicilio INT;DECLARE @cobrador INT;DECLARE @importe_recibo DECIMAL(10,2);
              SELECT @domicilio=domicilio,@cobrador=cobrador,@importe_recibo=total,@fecha_registro=CONVERT(NVARCHAR(20),fecha_registro) FROM Recibos WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
		          SELECT @emailpaga=email, @s_domicilio= calle + ISNULL(' ' + numero,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'') FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio;
		          SELECT @s_cobrador=usuario + ' ' + ISNULL(apellidos,'') FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento AND clave=@cobrador;		                      
              
              INSERT INTO @tEmail(habilitarEnvio,alias,asunto,destinatarios,mensaje,cc,params_url,path_email) 
              SELECT 1,@nombrefrac,'Pago de cuotas',@emailpaga,'<b>Domicilio: </b>'+ @s_domicilio + '<br/><b>Fecha: </b>' + @fecha_registro + '<br/>' + '<b>Folio: S- </b>'+ CONVERT(NVARCHAR(10),@folio) + '<br/>Importe:</b>$' + CONVERT(NVARCHAR(10),@importe_recibo) + '<br/><br/>Recibió:</b>' + @s_cobrador + '<br/><h4 style="text-align:center;">¡Gracias por tu apoyo!</h4>','safra.control.residencial@gmail.com','op=GenerarRecibo&seccion=aportaciones&domicilio=' + CONVERT(NVARCHAR(10),@domicilio) + '&recibo=&folio=' + CONVERT(NVARCHAR(10),@folio) + '&s_fraccionamiento=' + CONVERT(NVARCHAR(15),@s_fraccionamiento),'src-img/fraccionamientos/_' + CONVERT(NVARCHAR(20),@s_fraccionamiento) + '/email-notificacion.xml'             
              
              SELECT 1 estatus, 'Envío procesado' mensaje;
           ]]>
        </sql>
    </EnviarRecibo>
    
    <ConcederPagoSinMora>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="40" tipo="string"/>
        <sql>
        <![CDATA[      
          DECLARE @usuarioMaster INT;SELECT @usuarioMaster= responsable FROM fraccionamientos WHERE clave=@s_fraccionamiento AND responsable=@s_usuario;        
          DECLARE @tiene_permiso BIT;SELECT @tiene_permiso=CA.clave_accion FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=23;/* es la clave para editar historial*/
          IF @tiene_permiso IS NOT NULL OR @usuarioMaster IS NOT NULL BEGIN
            IF NOT EXISTS(SELECT * FROM PermisosDescontarMora WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND fecha_aplicado IS NULL) BEGIN
              INSERT INTO PermisosDescontarMora(domicilio,responsable,fecha,fraccionamiento)VALUES(@domicilio,@s_usuario,GETDATE(),@s_fraccionamiento);              
            END              
           END 
           SELECT 1 estatus, CASE WHEN domicilio IS NOT NULL THEN CONVERT(BIT,1) ELSE NULL END existe,'Registrado.' mensaje FROM PermisosDescontarMora WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND fecha_aplicado IS NULL;
          ]]>
      </sql>
    </ConcederPagoSinMora>
    
    
    <QuitarPagoSinMora>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="40" tipo="string"/>
        <sql>
        <![CDATA[      
          DECLARE @usuarioMaster INT;SELECT @usuarioMaster= responsable FROM fraccionamientos WHERE clave=@s_fraccionamiento AND responsable=@s_usuario;        
          DECLARE @tiene_permiso BIT;SELECT @tiene_permiso=CA.clave_accion FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=23;/* es la clave para editar historial*/
          IF @tiene_permiso IS NOT NULL OR @usuarioMaster IS NOT NULL BEGIN
            DELETE FROM PermisosDescontarMora WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND fecha_aplicado IS NULL;            
           END 
           SELECT 1 estatus;
          ]]>
      </sql>
    </QuitarPagoSinMora>
    
    <ExisteProxPagoSinMora>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="40" tipo="string"/>
        <sql>
        <![CDATA[   
           SELECT CASE WHEN domicilio IS NOT NULL THEN CONVERT(BIT,1) ELSE NULL END existe,'Registrado.' mensaje FROM PermisosDescontarMora WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND fecha_aplicado IS NULL;
          ]]>
      </sql>
    </ExisteProxPagoSinMora>
    
    <ObtenerPagoHist>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="40" tipo="string"/>
      <campo leyenda="Recibo" db_nombre="recibo" form_nombre="recibo" requerido="true" charsize="40" tipo="string"/>
        <sql>
        <![CDATA[      
          SET LANGUAGE ESPAÑOL;SET DATEFORMAT DMY;
            SELECT CONVERT(NVARCHAR(20),ISNULL(CIP.fecha_pago,CIP.fecha_registro),103) fecha_recibo,detalle concepto,CIP.*,AH.nota, CASE WHEN forma_pago='EFECTIVO' THEN 11 WHEN forma_pago='DEPOSITO' THEN 10 ELSE NULL END tipopago FROM (SELECT * FROM CargaInicialPagos WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND recibo=@recibo) CIP LEFT OUTER JOIN (SELECT * FROM AjustesHistorial WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND recibo=@recibo) AH ON CIP.recibo=AH.recibo;
            IF @@ROWCOUNT=0 BEGIN
              SELECT * FROM AjustesHistorial WHERE fraccionamiento=@s_fraccionamiento AND recibo=@recibo;
            END
          ]]>
      </sql>
    </ObtenerPagoHist>
    
    <RegistrarPagoHist>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="40" tipo="string"/>
      <campo leyenda="Recibo" db_nombre="recibo" form_nombre="recibo" requerido="true" charsize="40" tipo="string"/>
      <campo leyenda="Valor" db_nombre="detalle_desc" form_nombre="detalle_desc" requerido="true" charsize="500" tipo="string"/>
        <sql>
        <![CDATA[   
        DECLARE @usuarioMaster INT;
          SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
        
          DECLARE @tiene_permiso BIT;
          SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE  fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=12;/* es la clave para editar historial*/
          IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN
          
            BEGIN TRANSACTION TX;
            BEGIN TRY
                
              SET LANGUAGE ESPAÑOL;SET DATEFORMAT DMY;
              DECLARE @tCargaInicialPagos AS TABLE (
	              indice INT ,
	              indice2 INT,
	              domicilio INT ,
	              recibo NVARCHAR(10),
	              referencia NVARCHAR(12),
	              sfecha_pago NVARCHAR(12),
	              sfecha_registro NVARCHAR(12),
	              quien_paga NVARCHAR(100),
	              calle NVARCHAR(100),
	              segmento NVARCHAR(30),
	              numero NVARCHAR(20),
	              forma_pago NVARCHAR(20),
	              tipoconcepto NVARCHAR(30),
	              importe NVARCHAR(12),
	              responsable NVARCHAR(100),
	              detalle NVARCHAR(120),
	              observaciones NVARCHAR(150),
	              fecha_pago DATE,
	              fecha_registro DATE,
	              detalle_act NVARCHAR(120)
              )
              UPDATE CargaInicialPagos SET detalle_act=@detalle_desc,detalle=@detalle_desc WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND recibo=@recibo;
              DELETE FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND recibo=@recibo;

              INSERT INTO @tCargaInicialPagos
              SELECT ROW_NUMBER() OVER(ORDER BY recibo ASC) indice,* FROM CargaInicialPagos WHERE  fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND recibo=@recibo;
 

              DECLARE @detalle NVARCHAR(300),@fecha_pago DATE,@fecha_registro DATE,@monto DECIMAL(10,2);

		          SELECT  @fecha_pago=fecha_pago,@fecha_registro=fecha_registro,@monto=CASE WHEN ISNUMERIC(importe)=1 THEN importe ELSE NULL END,@detalle=detalle_act FROM CargaInicialPagos WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND recibo=@recibo;
		          INSERT INTO PagosDesgIniciales
		          SELECT A.*,B.monto,B.mes,B.anio,B.detalle_desc,fraccionamiento FROM (SELECT TOP(1)
			          indice2,
			          domicilio,
			          recibo,
			          referencia,
			          sfecha_pago,
			          sfecha_registro,
			          quien_paga,
			          calle,
			          segmento,
			          numero,
			          forma_pago,
			          tipoconcepto,
			          importe ,
			          responsable,
			          detalle,
			          observaciones,
			          fecha_pago,
			          fecha_registro,
			          detalle_act
		            FROM  @tCargaInicialPagos WHERE fraccionamiento=@s_fraccionamiento AND domicilio =@domicilio AND recibo=@recibo )A LEFT OUTER JOIN dbo.Desglosar(@fecha_pago,@fecha_registro,@monto,@detalle)B ON 1=1;

              COMMIT TRANSACTION TX;
              SELECT 1 estatus, 'Procesado correctamente.' mensaje;
            END TRY BEGIN CATCH
              ROLLBACK TRANSACTION TX;
              SELECT -1 estatus, 'Error: ' + ERROR_MESSAGE() mensaje;
            END CATCH
          END ELSE BEGIN
            SELECT -1 estatus, 'No tiene habilitada esta función.' mensaje;
          END
          ]]>
      </sql>
    </RegistrarPagoHist>
    
    
    
    <ObtenerAdjuntoDeposito>
      <campo leyenda="clave" db_nombre="clave" form_nombre="clave" requerido="true" charsize="0" tipo="int"/>
        <sql>
        <![CDATA[      
            SELECT TOP(1) '_' + CONVERT(NVARCHAR(20),indice) + extension nombre_archivo,1 estatus FROM imagenes_catalogos WHERE fraccionamiento=@s_fraccionamiento AND catalogo=12 AND clave= @clave;
          ]]>
      </sql>
    </ObtenerAdjuntoDeposito>
    
    <ReemplazarCancelarFolio>
      <campo leyenda="Folio" db_nombre="folio" form_nombre="folio" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Recibo nuevo" db_nombre="recibo_nuevo" form_nombre="recibo_nuevo" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[      
              BEGIN TRANSACTION TP;
              BEGIN TRY
                INSERT INTO RecibosCanceladosSCP SELECT *, GETDATE(),@s_usuario,'SE CANCELA FOLIO POR ERROR EN IMPRESIÓN. CAMBIO POR ' + CONVERT(NVARCHAR(20),@recibo_nuevo) FROM Recibos WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                UPDATE PagosRealizados SET no_recibo=@recibo_nuevo WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                UPDATE Recibos SET recibo=@recibo_nuevo WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                UPDATE DepositosAcuenta SET recibo=@recibo_nuevo WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                SELECT 1 estatus, 'Recibo actualizado correctamente.' mensaje;
                COMMIT TRANSACTION TP;
              END TRY BEGIN CATCH
                ROLLBACK TRANSACTION TP;
                SELECT -1 estatus, 'Error.' + ERROR_MESSAGE() mensaje;
              END CATCH
              
           ]]>
        </sql>
    </ReemplazarCancelarFolio>

    <EliminarPago>
      <campo leyenda="Folio" db_nombre="folio" form_nombre="folio" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Observaciones" db_nombre="observaciones" form_nombre="observaciones" requerido="true" charsize="200" tipo="string"/>
        <sql>
          <![CDATA[      
              BEGIN TRANSACTION TP;
              BEGIN TRY
                INSERT INTO CancelacionPagos 
                SELECT 
	                [indice],
	                [folio],
	                [usuario_reg],
	                [fecha_reg],
	                [fecha_pago],
	                [domicilio],
	                [pagador],
	                [importe],
	                [referencia],
	                [concepto],
	                [stipopago],
	                [stipoconcepto],
	                [mes],
	                [anio],
	                [tipo_pago],
	                [tipo_concepto],
	                [no_recibo],
	                [observaciones],
	                [es_compuesto],
	                [compuesto],
	                [parte],
	                [clave_concepto],
	                [clave_c_asignacion],
	                [clave_reservacion],
                    GETDATE(),@s_usuario,@observaciones,                  
	                [convenio],
	                [descuento],
					@s_fraccionamiento
                FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                DELETE FROM PagosRealizados  WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                INSERT INTO RecibosEliminados 
                SELECT 
	                [indice],
	                [folio],
	                [recibo],
	                [domicilio],
	                [concepto],
	                [total],
	                [fecha_pago],
	                [fecha_registro],
	                [tipo_pago],
	                [a_cuenta],
	                [reunido],
	                [cobrador],
	                [es_compuesto],
	                [compuesto],
	                [parte],
	                [deja_a_cuenta],
	                [monto_conceptos],
	                [reunido_c],
                  GETDATE(),@s_usuario,@observaciones,
	                [convenio],
	                [descuento],
					@s_fraccionamiento
                FROM Recibos WHERE folio=@folio;
                DELETE FROM Recibos WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                DELETE FROM DepositosAcuenta WHERE fraccionamiento=@s_fraccionamiento AND folio_rel=@folio;                
                UPDATE Convenios SET fecha_aplico=NULL, usuario_aplico=NULL, folio=NULL WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                UPDATE PermisosDescontarMora SET fecha_aplicado=NULL,usuario_aplico=NULL WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio; 
                DELETE FROM Temp_compuestos WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                DELETE FROM GafetesAutos WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio;
                SELECT 1 estatus, 'Pago eliminado correctamente.' mensaje;
                COMMIT TRANSACTION TP;
              END TRY BEGIN CATCH
                ROLLBACK TRANSACTION TP;
                SELECT -1 estatus, 'Error.' + ERROR_MESSAGE() mensaje;
              END CATCH
              
           ]]>
        </sql>
    </EliminarPago>

    <GenerarTicket>
        <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
        <campo leyenda="Conceptos" db_nombre="conceptos" form_nombre="conceptos" requerido="false" charsize="500" tipo="string"/>
        <campo leyenda="Gallardetes" db_nombre="gafetes" form_nombre="gafetes" requerido="false" charsize="500" tipo="string"/>
        <campo leyenda="Tipo de gafetes" db_nombre="t_gafetes" form_nombre="tipo_g" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Meses" db_nombre="meses" form_nombre="meses" requerido="false" charsize="500" tipo="string"/>
        <campo leyenda="Fecha de pago" db_nombre="fecha_pago" form_nombre="fecha_pago" requerido="false" charsize="15" tipo="string"/>
        <sql>
          <![CDATA[      
              
              SET DATEFORMAT DMY;
              SET LANGUAGE ESPAÑOL; 
              DECLARE @tasa DECIMAL(5,2),@costo DECIMAL(6,2), @p_retrasos DECIMAL(10,2), @p_normales DECIMAL(10,2), @p_semestres DECIMAL(10,2); SET @tasa=0.10;--TASA DESCUENTO
              DECLARE @semestres INT, @retrasos INT, @normales INT;   
              DECLARE @fecha_pago_ DATE;SET @fecha_pago_=CASE WHEN ISDATE(@fecha_pago)=1 THEN @fecha_pago ELSE GETDATE() END;
              DECLARE @tMeses_sem AS TABLE(indice INT, spliter1 NVARCHAR(5),spliter2 NVARCHAR(5),fraccionamiento INT);               
              DECLARE @dia_corte INT;  SELECT @dia_corte=[dbo].[ObtenerDiaCorte](@domicilio,MONTH(@fecha_pago),YEAR(@fecha_pago));            
              INSERT INTO @tMeses_sem SELECT ROW_NUMBER() OVER(ORDER BY CONVERT(DATE,'01-' + spliter1 + '-' +spliter2) ASC), spliter1,spliter2,@s_fraccionamiento FROM dbo.Split2(@meses,',','-') WHERE CONVERT(DATE, (CASE WHEN DATEPART(DD,@fecha_pago_)<=@dia_corte THEN '02-' ELSE '01-' END) + spliter1 + '-' +spliter2) > CONVERT(DATE,'01-' + CONVERT(NVARCHAR(10),DATEPART(MM,@fecha_pago_)) +'-'+ CONVERT(NVARCHAR(10),DATEPART(YY,@fecha_pago_)) ) ;
              
              DECLARE @hay_convenio BIT,@continuar BIT;SELECT TOP(1) @hay_convenio= CASE WHEN indice IS NOT NULL THEN 1 ELSE NULL END FROM Convenios WHERE  fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND fecha_aplico IS NULL ORDER BY fecha ASC;--Tomamos el mas antiguo
              
              IF @hay_convenio=1 BEGIN                
                DECLARE @adelanto INT;SET @adelanto=0;
                @@subquery=[aportaciones.ObtenerListaPagos]; 
                DECLARE @meses_faltan INT;
                SELECT @meses_faltan=COUNT(mes) FROM(SELECT * FROM @tpagos WHERE fraccionamiento=@s_fraccionamiento AND p_conv=1) TP LEFT OUTER JOIN dbo.Split2(@meses,',','-') TM ON TP.mes=TM.spliter1 AND TP.anio=TM.spliter2 WHERE TM.spliter1 IS NULL;
                IF @meses_faltan>0 BEGIN
                  SELECT -1 estatus, 'Existe un convenio para este domicilio, pero no contiene ' + CONVERT(NVARCHAR(10),@meses_faltan) + ' mensualidad(es) requerida(s).' mensaje; 
                END ELSE BEGIN
                  SET @continuar=1;
                END
              END 
              
              IF NOT ISNULL(@hay_convenio,0)=1 OR @continuar=1 BEGIN               
                  DECLARE @no_gafetes SMALLINT,@coma NVARCHAR(1);SET @coma=CASE WHEN @conceptos IS NULL THEN '' ELSE ',' END;SELECT @no_gafetes= COUNT(*) FROM split(@gafetes,',');
                  DECLARE @gafs NVARCHAR(300);
                  DECLARE @i SMALLINT;SET @i=2;
                  WHILE @i< @no_gafetes BEGIN
                    SET @conceptos=ISNULL(@conceptos,'') + @coma + '157';
                    SET @coma=',';
                    SET @i=@i+1;
                  END
              
                  DECLARE @tConceptos AS TABLE(clave INT,clave_c_asignacion INT, nombre NVARCHAR(50),precio DECIMAL(10,2),fecha DATETIME);DECLARE @cont_oc SMALLINT;
                  INSERT INTO @tConceptos 
                  SELECT QQ.* FROM (
                    SELECT C.clave,R.indice clave_c_asignacion, C.nombre,ISNULL(R.monto,C.monto) monto,C.fecha_alta FROM 
                    (SELECT * FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento) C  
                    LEFT OUTER JOIN 
                      (SELECT CA.* FROM (SELECT * FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento) CA INNER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio) D ON CA.domicilio=D.clave OR CA.calle=D.calle OR CA.manzana=D.manzana OR CA.segmento=D.segmento)R ON C.clave=R.concepto
                    WHERE R.concepto IS NOT NULL OR C.general=1 OR C.clave IN(SELECT item FROM split(@conceptos,','))
                    GROUP BY C.nombre, C.clave,R.indice, R.monto,C.monto,C.fecha_alta 
                  )QQ              
                  INNER JOIN (SELECT item FROM split(@conceptos,','))CR ON QQ.clave=CR.item;
                  SET @cont_oc=@@ROWCOUNT;
              
                  DECLARE @p_conceptos DECIMAL(10,2);
                  SELECT @p_conceptos= ISNULL((SELECT SUM(precio) FROM @tconceptos GROUP BY clave),0.00);
              
                  SELECT @semestres=ISNULL(COUNT(spliter1),0) FROM @tMeses_sem;   

                  SELECT
                  @retrasos=ISNULL(COUNT(CASE WHEN softronel.ObtenerMora(@fecha_pago_,A.spliter1,A.spliter2,@domicilio)>0.00 THEN 1 ELSE NULL END),0),
                  @p_retrasos =ISNULL(SUM(CASE WHEN softronel.ObtenerMora(@fecha_pago_,A.spliter1,A.spliter2,@domicilio)>0.00 THEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) ELSE NULL END),0),
                  @normales=ISNULL(COUNT(CASE WHEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) = dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,NULL) THEN 1 ELSE NULL END),0),
                  @p_normales=ISNULL(SUM(CASE WHEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) = dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,NULL) THEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) ELSE NULL END),0),
				  @p_semestres=ISNULL(SUM(CASE WHEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) < dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,NULL) THEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) ELSE NULL END),0)
                  FROM (SELECT spliter1,spliter2 FROM dbo.Split2(@meses,',','-'))A; 
              
                  DECLARE @compuesto INT;SELECT TOP 1 @compuesto=compuesto FROM (SELECT * FROM Temp_compuestos WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio)PR1 INNER JOIN (SELECT * FROM dbo.Split2(@meses,',','-'))M1 ON PR1.mes=M1.spliter1 AND M1.spliter2=PR1.anio;
                  DECLARE @es_compuesto BIT;SET @es_compuesto=CASE WHEN @compuesto IS NOT NULL OR @es_compuesto=1 THEN 1 ELSE 0 END;
              
                  DECLARE @reunido DECIMAL(10,2);
                  SELECT @reunido=ISNULL(SUM(total),0.00) FROM Recibos WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND compuesto=@compuesto;
              
                  DECLARE @a_cuenta DECIMAL(10,2);SELECT @a_cuenta=ISNULL(SUM(monto),0.00) FROM DepositosACuenta WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio;
              
                  DECLARE @importe DECIMAL(10,2),@total DECIMAL(10,2);
                  SET @importe=CONVERT(DECIMAL(10,2),@p_semestres + @p_retrasos + @p_normales + @p_conceptos);
				  SET @total=CONVERT(DECIMAL(10,2),@importe-@a_cuenta-@reunido-ISNULL(@descuento,0.0));
                  
				  				  
                  DECLARE @usuarioMaster INT;SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
                  DECLARE @claveadmin INT, @clave_pay INT;SELECT @claveadmin=clave FROM (SELECT clave,clave_cargo FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN Cargos_Acciones CA ON CA.fraccionamiento=@s_fraccionamiento AND A.clave_cargo=CA.clave_cargo AND CA.clave_accion=3;                                                
				  IF @claveadmin IS NULL AND @usuarioMaster IS NULL BEGIN
					INSERT INTO PromesasPago VALUES(GETDATE(),@s_usuario,@domicilio,@s_fraccionamiento,@meses,@conceptos,@total);
					SET @clave_pay=@@IDENTITY;
				  END
				  
				  SELECT @clave_pay clave_pay,@compuesto comp, @a_cuenta + @reunido a_cuenta, @reunido reunido_compl,@descuento descuento,@pago_req pago_req, @c_descuento p_desc,@c_pago c_pago, CASE WHEN @p_semestres>0 THEN @semestres ELSE 0 END sem,CONVERT(DECIMAL(10,2),@p_semestres) p_sem, @retrasos ret,@p_retrasos p_ret, @normales norm, @p_normales p_norm,@cont_oc cont_oc,@p_conceptos p_conc, @importe subtotal, @total total;
				  
				  
		      END
            ]]>
        </sql>
    </GenerarTicket>
         
    <ObtenerRecibo>
        <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
        <campo leyenda="Recibo" db_nombre="recibo" form_nombre="recibo" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Folio" db_nombre="folio" form_nombre="folio" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[      
            SET LANGUAGE ESPAÑOL;
			  DECLARE @nombrefracc NVARCHAR(200),@domfracc NVARCHAR(400);
			  SELECT @nombrefracc=nombre,@domfracc=domicilio FROM Fraccionamientos WHERE clave=@s_fraccionamiento;
              SELECT TOP(1) @nombrefracc nombrefracc, @domfracc domfracc, @path_logo path_logo, UPPER(U.usuario + ' ' + ISNULL(U.apellidos,'')) recibio,ISNULL('; NO. DE GALLARDETES: ' + GA.gafetes,'') gafetes2, dbo.CantidadConLetra(total) total_letra, R.total, ISNULL(D.calle,'') calle,ISNULL(' ' + D.numero + ' ' + ISNULL(D.no_interior,''),'') numero,ISNULL(' ' + D.manzana,'') mz, ISNULL(' ' + D.lote,'') lt, R.*,D.titular,D.referencia, DATEPART(DD,R.fecha_registro) dia_h, UPPER(DATENAME(MM,R.fecha_registro)) mes_h, DATEPART(YY,R.fecha_registro) anio_h, 
              CASE WHEN tipo_pago=10 THEN 11 ELSE NULL END deposito, CASE WHEN tipo_pago=11 THEN 'X' ELSE NULL END efectivo, 
              CASE WHEN tipo_pago=10 THEN dbo.TEXTO_FECHA(fecha_pago) WHEN tipo_pago=11 THEN '' ELSE NULL END fecha_deposito
              FROM (SELECT * FROM Recibos WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND folio=@folio)R INNER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio)D ON R.domicilio=D.clave LEFT OUTER JOIN (SELECT * FROM GafetesAutos WHERE fraccionamiento=@s_fraccionamiento AND folio=@folio AND domicilio=@domicilio) GA ON 1=1
			  LEFT OUTER JOIN (SELECT * FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento) U ON U.clave=R.cobrador
           ]]>
        </sql>
    </ObtenerRecibo>
             
    <AgregarPermisoRecibosCaptura>
      <campo leyenda="Folios" db_nombre="folios" form_nombre="folios" requerido="true" charsize="1000" tipo="string"/>
        <sql>
          <![CDATA[           
            DECLARE @usuarioMaster INT;
            SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
            DECLARE @claveadmin INT;SELECT @claveadmin=clave FROM (SELECT clave,clave_cargo FROM Administracion WHERE  fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo AND CA.clave_accion=17;                                                
            IF @claveadmin IS NOT NULL OR @usuarioMaster=1 BEGIN              
              BEGIN TRY
                INSERT INTO PermisosRegistroRecibosOtrodia(responsable,recibo,fecha,fraccionamiento) SELECT @s_usuario,CONVERT(INT,RTRIM(LTRIM(item))),GETDATE(),@s_fraccionamiento FROM split(@folios,',');
                SELECT 1 estatus,'Guardado correctamente.' mensaje;
               END TRY BEGIN CATCH
                  SELECT -1 estatus, 'Error: ' + ERROR_MESSAGE() mensaje; 
              END CATCH            
            END ELSE BEGIN
                SELECT -1 estatus, 'No tiene habilitada esta función.' mensaje; 
            END
          ]]>
        </sql>
    </AgregarPermisoRecibosCaptura>
    
    <PagarTicket>
        <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
        <campo leyenda="Conceptos" db_nombre="conceptos" form_nombre="conceptos" requerido="false" charsize="500" tipo="string"/>
        <campo leyenda="Meses" db_nombre="meses" form_nombre="meses" requerido="false" charsize="500" tipo="string"/>
        <campo leyenda="Pagador" db_nombre="pagador" form_nombre="pagador" requerido="false" charsize="120" tipo="string"/>
        <campo leyenda="Recibo" db_nombre="recibo" form_nombre="recibo" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Clave de Tipo de Pago" db_nombre="ctipopago" form_nombre="ctipopago" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Deposito asociado" db_nombre="deposito_asociado" form_nombre="deposito_asociado" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Origen" db_nombre="origen" form_nombre="origen" requerido="false" charsize="50" tipo="string"/>
        <campo leyenda="Tipo de Pago" db_nombre="tipopago" form_nombre="tipopago" requerido="true" charsize="30" tipo="string"/>
        <campo leyenda="Fecha de pago" db_nombre="fecha_pago" form_nombre="fecha_pago" requerido="false" charsize="15" tipo="string"/>
        <campo leyenda="total" db_nombre="total" form_nombre="total" requerido="true" charsize="0" tipo="float"/>
        <campo leyenda="Recibe" db_nombre="recibe" form_nombre="recibe" requerido="true" charsize="0" tipo="float"/>
        <campo leyenda="Deja a cuenta" db_nombre="deja_a_cuenta" form_nombre="deja_a_cuenta" requerido="false" charsize="0" tipo="float"/>
        <campo leyenda="Es compuesto" db_nombre="es_compuesto" form_nombre="es_compuesto" requerido="false" charsize="0" tipo="bool" />
        <campo leyenda="Calve de parte" db_nombre="parte" form_nombre="parte" requerido="false" charsize="10" tipo="string"/>
        <campo leyenda="Gallardetes" db_nombre="gafetes" form_nombre="gafetes" requerido="false" charsize="500" tipo="string"/>
        <campo leyenda="Tipo de gafetes" db_nombre="t_gafetes" form_nombre="tipo_g" requerido="false" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[   
            DECLARE @dep_validadoEC BIT, @folio_dep INT;
            IF @deposito_asociado IS NOT NULL BEGIN
              SELECT @dep_validadoEC= CASE WHEN u_ecb IS NULL THEN 0 ELSE 1 END,@folio_dep=folio  FROM DepositosBancarios WHERE fraccionamiento=@s_fraccionamiento AND indice=@deposito_asociado;
            END            
            IF @folio_dep IS NOT NULL BEGIN
              SELECT -1 estatus, 'Error. El depósito ya fué utilizado.' mensaje;
            END ELSE IF ((@tipopago=10 AND @dep_validadoEC=1) OR (@tipopago=11 AND @fecha_pago<>CONVERT(DATE,GETDATE())))AND @recibo IS NULL BEGIN
              SELECT -1 estatus, 'Error. Falta capturar número de recibo.' mensaje;             
            END ELSE BEGIN          
              SET DATEFORMAT DMY;
              SET LANGUAGE ESPAÑOL; 
			  
              DECLARE @nombrefrac NVARCHAR(200);SELECT TOP(1) @nombrefrac=nombre FROM Fraccionamientos WHERE clave=@s_fraccionamiento;
			  
              DECLARE @usuarioMaster INT;
              SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
              DECLARE @claveadmin INT;SELECT @claveadmin=clave FROM (SELECT clave,clave_cargo FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN (SELECT * FROM Cargos_Acciones WHERE fraccionamiento=@s_fraccionamiento) CA ON A.clave_cargo=CA.clave_cargo AND CA.clave_accion=3;                                                
            
              DECLARE @fecha_pago_ DATE;SET @fecha_pago_=CASE WHEN ISDATE(@fecha_pago)=1 THEN @fecha_pago ELSE GETDATE() END;
            
              IF @claveadmin IS NOT NULL OR @usuarioMaster=1 OR @s_usuario=10229 BEGIN                                      
              
                DECLARE @hay_convenio BIT,@continuar BIT;SELECT TOP(1) @hay_convenio= CASE WHEN indice IS NOT NULL THEN 1 ELSE NULL END FROM Convenios WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND fecha_aplico IS NULL ORDER BY fecha ASC;--Tomamos el mas antiguo
              
                IF @hay_convenio=1 BEGIN                
                  DECLARE @adelanto INT;SET @adelanto=0;
                  @@subquery=[aportaciones.ObtenerListaPagos]; 
                  DECLARE @meses_faltan INT;
                  SELECT @meses_faltan=COUNT(mes) FROM(SELECT * FROM @tpagos WHERE fraccionamiento=@s_fraccionamiento AND p_conv=1) TP LEFT OUTER JOIN dbo.Split2(@meses,',','-') TM ON TP.mes=TM.spliter1 AND TP.anio=TM.spliter2 WHERE TM.spliter1 IS NULL;
                  IF @meses_faltan>0 BEGIN
                    SELECT -1 estatus, 'Existe un convenio para este domicilio, pero no contiene ' + CONVERT(NVARCHAR(10),@meses_faltan) + ' mensualidad(es) requerida(s).' mensaje; 
                  END ELSE BEGIN
                    SET @continuar=1;
                  END
                END 
              
                IF NOT ISNULL(@hay_convenio,0)=1 OR @continuar=1 BEGIN 
                            
                    DECLARE @sig_recibo INT;SELECT @sig_recibo=MAX(recibo)+1 FROM (
                      SELECT MAX(recibo) recibo FROM Recibos WHERE fraccionamiento=@s_fraccionamiento
                      UNION ALL 
                      SELECT MAX(recibo) FROM RecibosEliminados WHERE fraccionamiento=@s_fraccionamiento
                      UNION ALL
                      SELECT MAX(recibo) FROM RecibosCanceladosSCP WHERE fraccionamiento=@s_fraccionamiento
                     )A
					 
                    /*IF(@recibo<@sig_recibo-200 OR @recibo>@sig_recibo+200)BEGIN
                        SELECT -1 estatus,'Esta ingresando un número de recibo fuera de un rango de 200; Ingresó: ' + CONVERT(NVARCHAR(10),@recibo) mensaje;
                     END ELSE*/
                   
                     IF @tipopago=11 AND @fecha_pago_<>CONVERT(DATE,GETDATE()) AND NOT EXISTS(SELECT fecha FROM PermisosRegistroRecibosOtrodia WHERE fraccionamiento=@s_fraccionamiento AND recibo=@recibo) BEGIN
                        SELECT -1 estatus,'Este recibo ha no se ha autorizado para registrarse en una fecha distinta.' mensaje;
                     END ELSE BEGIN
          
                          SET @deja_a_cuenta=ISNULL(@deja_a_cuenta,0.00);
                          DECLARE @referencia AS NVARCHAR(15),@titular AS NVARCHAR(100);SELECT @referencia=referencia,@titular=titular FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio;
                                        
                          DECLARE @tasa DECIMAL(5,2),@costo DECIMAL(6,2), @p_retrasos DECIMAL(10,2), @p_normales DECIMAL(10,2), @p_semestres DECIMAL(10,2); SET @tasa=0.10;--TASA DESCUENTO
                          DECLARE @semestres INT, @retrasos INT, @normales INT;
						  DECLARE @dia_corte INT;  SELECT @dia_corte=[dbo].[ObtenerDiaCorte](@domicilio,MONTH(@fecha_pago),YEAR(@fecha_pago));            
                          DECLARE @tMeses_sem AS TABLE(indice INT, spliter1 NVARCHAR(5),spliter2 NVARCHAR(5));
                          
                          INSERT INTO @tMeses_sem SELECT ROW_NUMBER() OVER(ORDER BY CONVERT(DATE,'01-' + spliter1 + '-' +spliter2) ASC), spliter1,spliter2 FROM dbo.Split2(@meses,',','-') WHERE CONVERT(DATE, (CASE WHEN DATEPART(DD,@fecha_pago_)<=@dia_corte THEN '02-' ELSE '01-' END) + spliter1 + '-' +spliter2) > CONVERT(DATE,'01-' + CONVERT(NVARCHAR(10),DATEPART(MM,@fecha_pago_)) +'-'+ CONVERT(NVARCHAR(10),DATEPART(YY,@fecha_pago_)) ) ;
                          SELECT 
	                          @semestres=ISNULL(COUNT(spliter1),0)
                          FROM @tMeses_sem;   
                          
                          DECLARE @partem INT;--Parte lleva un conteo
                          SELECT @partem=COUNT(concepto)+1 FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND concepto IS NOT NULL;
                          
                          SELECT
                          @retrasos=ISNULL(COUNT(CASE WHEN softronel.ObtenerMora(@fecha_pago_,A.spliter1,A.spliter2,@domicilio)>0.00 THEN 1 ELSE NULL END),0),
                          @p_retrasos =ISNULL(SUM(CASE WHEN softronel.ObtenerMora(@fecha_pago_,A.spliter1,A.spliter2,@domicilio)>0.00 THEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) ELSE NULL END),0),
                          @normales=ISNULL(COUNT(CASE WHEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) = dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,NULL) THEN 1 ELSE NULL END),0),
						  @p_normales=ISNULL(SUM(CASE WHEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) = dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,NULL) THEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) ELSE NULL END),0),
                          @p_semestres=ISNULL(SUM(CASE WHEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) < dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,NULL) THEN dbo.ObtenerCuota(@fecha_pago_,A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres) ELSE NULL END),0)
						  FROM (SELECT spliter1,spliter2 FROM dbo.Split2(@meses,',','-'))A;
               
                          --Gafetes   
                          DECLARE @no_gafetes SMALLINT,@coma NVARCHAR(1);SET @coma=CASE WHEN @conceptos IS NULL THEN '' ELSE ',' END;SELECT @no_gafetes= COUNT(*) FROM split(@gafetes,',');
                          DECLARE @gafs NVARCHAR(300);
                          DECLARE @i SMALLINT;SET @i=2;
                          WHILE @i< @no_gafetes BEGIN
                            SET @conceptos=ISNULL(@conceptos,'') + @coma + '157';
                            SET @coma=',';
                            SET @i=@i+1;
                          END
                            
                          DECLARE @tConceptos AS TABLE(clave INT,clave_c_asignacion INT, nombre NVARCHAR(50),precio DECIMAL(10,2),fecha DATETIME,fraccionamiento INT);DECLARE @cont_oc SMALLINT;
                          INSERT INTO @tConceptos 
                          SELECT QQ.*,@s_fraccionamiento FROM (
                            SELECT C.clave,R.indice clave_c_asignacion, C.nombre,ISNULL(R.monto,C.monto) monto,C.fecha_alta FROM 
                            Conceptos C  
                            LEFT OUTER JOIN 
                              (SELECT CA.* FROM (SELECT * FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento) CA INNER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio) D ON CA.domicilio=D.clave OR CA.calle=D.calle OR CA.manzana=D.manzana OR CA.segmento=D.segmento)R ON C.clave=R.concepto
                            WHERE R.concepto IS NOT NULL OR C.general=1 OR C.clave IN(SELECT item FROM split(@conceptos,','))
                            GROUP BY C.nombre, C.clave,R.indice, R.monto,C.monto,C.fecha_alta 
                          )QQ              
                          INNER JOIN (SELECT item FROM split(@conceptos,','))CR ON QQ.clave=CR.item;
                          SET @cont_oc=@@ROWCOUNT;         
                            
                          DECLARE @p_conceptos DECIMAL(10,2);
                          SELECT @p_conceptos= ISNULL((SELECT SUM(precio) FROM @tconceptos GROUP BY clave),0.00);
                    
                          --Validar si existe pago anterior
                          DECLARE @compuesto INT;SELECT TOP 1 @compuesto=compuesto FROM (SELECT * FROM Temp_compuestos WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio)PR1 INNER JOIN (SELECT * FROM dbo.Split2(@meses,',','-'))M1 ON PR1.mes=M1.spliter1 AND M1.spliter2=PR1.anio;
                          SET @es_compuesto=CASE WHEN @compuesto IS NOT NULL OR @es_compuesto=1 THEN 1 ELSE 0 END;
              
              
                          DECLARE @reunido DECIMAL(10,2);
                          SELECT @reunido=ISNULL(SUM(total),0.00) FROM Recibos WHERE domicilio=@domicilio AND compuesto=@compuesto;
                          DECLARE @a_cuenta DECIMAL(10,2);SELECT @a_cuenta=ISNULL(SUM(monto),0.00) FROM DepositosACuenta WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio;
                          DECLARE @total_r DECIMAL(10,2), @total_rt DECIMAL(10,2),@folio INT;
                          SET @total_rt=CONVERT(DECIMAL(10,2),@p_semestres) + @p_retrasos + @p_normales + @p_conceptos;     
                          SET @total_r=@total_rt - (@a_cuenta + @reunido+ISNULL(@descuento,0.0));  
              
                           
                          IF (@recibe >= @total_r OR (@recibe < @total_r AND (@es_compuesto=1 OR @compuesto IS NOT NULL) ))BEGIN /*Le debieron haber dado el cambio al pagador*/
                            IF(EXISTS(SELECT no_recibo FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento AND no_recibo=@recibo UNION ALL SELECT recibo FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND (RTRIM(LTRIM(recibo)) like CONVERT(NVARCHAR(10),@recibo) ))) BEGIN
                              SELECT -1 estatus, 'Error. Ya existe el número de recibo.' mensaje;
                            END ELSE BEGIN
                              IF(@total_r=@total) BEGIN                      
                                  IF (ISNULL(@deja_a_cuenta,0.00)) < dbo.ObtenerCuota(GETDATE(),DATEPART(MM,GETDATE()), DATEPART(YY,GETDATE()),@domicilio,@s_fraccionamiento,@semestres) BEGIN	                             
                                    BEGIN TRANSACTION TT;
                                    BEGIN TRY
										IF NOT EXISTS(SELECT fraccionamiento FROM NumerosControl WHERE fraccionamiento=@s_fraccionamiento)
											INSERT INTO NumerosControl VALUES(0,0,@s_fraccionamiento);										
                                        SELECT @compuesto= ISNULL(@compuesto,complemento_pago + 1) ,@folio=folio_recibos_pago + 1 FROM NumerosControl WHERE fraccionamiento=@s_fraccionamiento;
                                        UPDATE NumerosControl SET complemento_pago=CASE WHEN @compuesto IS NULL THEN complemento_pago ELSE complemento_pago + 1 END, folio_recibos_pago= @folio WHERE fraccionamiento=@s_fraccionamiento;
                            
                                        IF @recibe >= @total_r BEGIN    
                                            INSERT INTO PagosRealizados 
                                            SELECT @folio,@s_usuario,GETDATE(),@fecha_pago_, @domicilio,@pagador,dbo.ObtenerCuota(ISNULL(@fecha_pago_,GETDATE()),A.spliter1,A.spliter2,@domicilio,@s_fraccionamiento,@semestres),@referencia,UPPER(DATENAME(MM,'01-' + A.spliter1 + '-1900')) + ' ' + A.spliter2,'MANTENIMIENTO','CUOTA MENSUAL',A.spliter1,A.spliter2,@tipopago,29,@recibo,CASE WHEN softronel.ObtenerMora(GETDATE(),A.spliter1,A.spliter2,@domicilio) > 0.00 THEN 'PAGO CON MORA' ELSE 'PAGO NORMAL' END,@es_compuesto, @compuesto,@parte,NULL,NULL,NULL,@convenio,@descuento,@s_fraccionamiento
                                            FROM (SELECT spliter1,spliter2 FROM dbo.Split2(@meses,',','-'))A 
											
                                            INSERT INTO PagosRealizados 
                                            SELECT @folio,@s_usuario,GETDATE(),GETDATE(), @domicilio,@pagador,@p_conceptos,@referencia,nombre,'OTRAS CUOTAS','OTRAS CUOTAS', NULL,NULL,@tipopago,30,@recibo,'OTROS PAGOS',@es_compuesto, @compuesto,@partem,clave,clave_c_asignacion,NULL,NULL,NULL,@s_fraccionamiento
                                            FROM @tConceptos GROUP BY nombre, clave,clave_c_asignacion;                                
                                            DELETE FROM Conceptos_Asignaciones WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND concepto IN (SELECT clave FROM @tConceptos);                                
                                          
                                        END
                            
                                        IF @a_cuenta >0.00 BEGIN
                                          INSERT INTO DepositosAcuenta VALUES(@folio,NULL,GETDATE(),-1*@a_cuenta,@domicilio,@pagador,@s_fraccionamiento);
                                        END   
                                        IF @deja_a_cuenta > 0.00 BEGIN
                                            INSERT INTO DepositosAcuenta VALUES(@folio,NULL,GETDATE(),@deja_a_cuenta,@domicilio,@pagador,@s_fraccionamiento); 
                                        END 
                            
                                        DECLARE @meses_p NVARCHAR(1000);                          
                                        SET @meses_p=STUFF((
                                            SELECT ',' + DATENAME(MM, CONVERT(DATE,'01-' + spliter1 + '-1900')) + ' ' + spliter2
                                              FROM dbo.Split2(@meses,',','-') ORDER BY CONVERT(DATE, '01-' + spliter1 + '-' + spliter2) ASC
                                              FOR XML PATH('')
                                            ), 1, 1, '');                                 
                            
                                        DECLARE @conceptos_p NVARCHAR(1000);                          
                                        SET @conceptos_p=STUFF((
                                            SELECT ',' + CONVERT(NVARCHAR(10),COUNT(clave)) + ' ' + nombre
                                              FROM @tConceptos WHERE fraccionamiento=@s_fraccionamiento GROUP BY nombre,clave ORDER BY nombre ASC
                                              FOR XML PATH('')
                                            ), 1, 1, ''); 
                                          
										DECLARE @total_recibe DECIMAL(10,2);
										SET @total_recibe=CASE WHEN @es_compuesto=1 AND @recibe<@total_r THEN @recibe ELSE @total_r + @deja_a_cuenta END;
                                        
										INSERT INTO Recibos 
                                        SELECT @folio, @recibo,@domicilio, UPPER(ISNULL('MANTENIMIENTO:' + @meses_p,'')) + ISNULL('; ' + UPPER(@conceptos_p),'') + (CASE WHEN @a_cuenta>0 THEN '; USO DE $' + CONVERT(NVARCHAR(20), CONVERT(DECIMAL(10,2),@a_cuenta)) + ' [TENÍA A CUENTA]' ELSE '' END) + (CASE WHEN @deja_a_cuenta>0.00 THEN '; DEJA A CUENTA $' + CONVERT(NVARCHAR(20), CONVERT(DECIMAL(10,2),@deja_a_cuenta)) ELSE '' END) + CASE WHEN @convenio IS NOT NULL THEN '; CONVENIO ' + CONVERT(NVARCHAR(10),@convenio) + ' - ' + CONVERT(NVARCHAR(10),@c_pago) + '/' + CONVERT(NVARCHAR(10),@c_descuento) ELSE '' END,CASE WHEN @es_compuesto=1 AND @recibe<@total_r THEN @recibe ELSE @total_r + @deja_a_cuenta END,@fecha_pago_,GETDATE(),@tipopago,@a_cuenta,@reunido, @s_usuario,@es_compuesto,@compuesto,@parte,@deja_a_cuenta,@total_rt,@reunido,@convenio,@descuento,@s_fraccionamiento;
                                      
                                      
                                        IF @tipopago=10 BEGIN--ES DEPOSITO
                                          IF @deposito_asociado IS NULL BEGIN
                                            INSERT INTO DepositosBancarios(fecha,fecha_comprobante,monto,origen,domicilio,u_comprobante,registro_inicial,folio,fraccionamiento) 
                                            VALUES(GETDATE(),@fecha_pago_,@total_r + @deja_a_cuenta,@origen,@domicilio,@s_usuario,2,@folio,@s_fraccionamiento);
                                            SET @deposito_asociado=@@IDENTITY;
                                          END ELSE BEGIN                                            
                                            UPDATE DepositosBancarios SET folio=@folio,domicilio=@domicilio,u_comprobante=@s_usuario,origen=ISNULL(@origen,origen),monto=@total_r + @deja_a_cuenta, fecha_comprobante=ISNULL(fecha_comprobante,@fecha_pago_) WHERE fraccionamiento=@s_fraccionamiento AND indice=@deposito_asociado;
                                          END
                                        END 
                            
                                        INSERT INTO GafetesAutos VALUES(@domicilio,@folio,@gafetes,@t_gafetes,@s_fraccionamiento);
                            
                                        INSERT INTO Temp_compuestos 
                                        SELECT @folio,spliter2,spliter1,@domicilio,@compuesto,@parte,@s_fraccionamiento FROM dbo.Split2(@meses,',','-') WHERE @es_compuesto=1;
                                      
                                        UPDATE Convenios SET fecha_aplico=GETDATE(), usuario_aplico=@s_usuario, folio=@folio WHERE fraccionamiento=@s_fraccionamiento AND indice=@convenio;
                                        
                                        UPDATE PermisosDescontarMora SET fecha_aplicado=GETDATE(),usuario_aplico=@s_usuario,folio=@folio WHERE fraccionamiento=@s_fraccionamiento AND (fecha_aplicado IS NULL AND domicilio=@domicilio); 
										INSERT INTO Notificaciones (domicilio,mensaje,fecha,funcion,fraccionamiento) VALUES(@domicilio,'Recibimos $' + CONVERT(NVARCHAR(20),@total_recibe) + ' ; Fecha: ' + CONVERT(NVARCHAR(20),GETDATE(),100) + ' ¡Gracias por su apoyo!',GETDATE(),3,@s_fraccionamiento);                
                                        SELECT 1 estatus, 'Registro correcto' mensaje, @recibo recibo, @folio folio, @domicilio domicilio, @deposito_asociado deposito_asociado;                          
										SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@s_fraccionamiento)+'_dom_' + CONVERT(NVARCHAR(10),@domicilio) para, 3 clave, @nombrefrac titulo, 'Recibimos $' + CONVERT(NVARCHAR(20),@total_recibe) + ' ; Fecha: ' + CONVERT(NVARCHAR(20),GETDATE(),100) + ' ¡Gracias por su apoyo!' mensaje; 
                                        COMMIT TRANSACTION TT;
                                    END TRY BEGIN CATCH
                                      ROLLBACK TRANSACTION TT;
                                      SELECT -1 estatus, 'No se pueden duplicar meses.' + ERROR_MESSAGE() mensaje;
                                    END CATCH                         
                                  END ELSE BEGIN
                                    SELECT -1 estatus,'El deposito a cuenta no debe ser mayor a la cuota mensual.' mensaje;
                                  END
                              END ELSE BEGIN
                                SELECT -1 estatus, 'Vuelva a revisar cuenta, no coincide con los meses recibidos:' + CONVERT(NVARCHAR(20),@total_r) + ' vs ' + CONVERT(NVARCHAR(20),@total) + ' , ' + CONVERT(NVARCHAR(50),@gafetes) mensaje;
                              END
                            END               
                            END ELSE BEGIN
                              SELECT -1 estatus, 'Error. La cantidad que recibe es menor que el total. Verifique!' mensaje;
		                        END
                     END
                  END                      
              END   ELSE BEGIN
                  SELECT -1 estatus, 'No tiene habilitada esta función.' mensaje; 
              END
          END
            ]]>
        </sql>
    </PagarTicket>
    <!--NO SE UTILIZA
    <DepositarACuenta>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Monto" db_nombre="monto" form_nombre="monto" requerido="true" charsize="0" tipo="float"/>
      <campo leyenda="Deja  a cuenta" db_nombre="deja_a_cuenta" form_nombre="deja_a_cuenta" requerido="false" charsize="0" tipo="float"/>
      <sql>
        <![CDATA[            
            SET DATEFORMAT DMY;
            SET LANGUAGE ESPAÑOL;
            DECLARE @a_cuenta DECIMAL(10,2);SELECT @a_cuenta=ISNULL(SUM(monto),0.00) FROM DepositosACuenta WHERE domicilio=@domicilio;
            DECLARE @fecha_pago NVARCHAR(20);SET @fecha_pago=DATEPART(MM,GETDATE()) + '-' + DATEPART(YY,GETDATE());
            IF (@a_cuenta + @monto) < dbo.ObtenerCuota(@fecha_pago,DATEPART(MM,GETDATE()), DATEPART(YY,GETDATE()),@domicilio,@s_fraccionamiento) BEGIN
			        INSERT INTO DepositosACuenta(fecha,monto,domicilio) VALUES(GETDATE(),@monto,@domicilio);
              select 1 estatus,'Deposito a cuenta realizado correctamente.' mensaje;
            END ELSE BEGIN
              select -1 estatus,'El deposito a cuenta no debe ser mayor a la cuota mensual.' mensaje;
            END
          ]]>
      </sql>
    </DepositarACuenta>-->
    
     <CargaMasivaPagos>       
        <campotabla nombre="cuotas" type="CUOTMAS_T"/>
         <sql>
          <![CDATA[      
              SELECT *,@s_fraccionamiento INTO COPIA_PAGOS FROM @cuotas;
              SELECT @@ROWCOUNT estatus, 'Listo' mensaje;
            ]]>
        </sql>
     </CargaMasivaPagos>
      
    <ObtenerResumenPago>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="d" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Conceptos" db_nombre="conceptos" form_nombre="c" requerido="true" charsize="4000" tipo="string"/>
      <sql>
        <![CDATA[            
			      DECLARE @s_domicilio NVARCHAR(500);
			      SELECT @s_domicilio=(SELECT calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'') FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio);
			      SELECT @domicilio domicilio,R.*,F.nombre, F.domicilio fdomicilio, F.merchantId,F.accountId,F.ApiKey FROM (SELECT 1 estatus, @s_domicilio sdomicilio, SUM(monto) total FROM dbo.split2(@conceptos,'|',',')A INNER JOIN (SELECT * FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento) C ON CONVERT(INT,A.spliter1)=C.clave)R  INNER JOIN Fraccionamientos F ON F.clave=@s_fraccionamiento WHERE F.clave=@s_fraccionamiento;
			      SELECT C.nombre, monto cuota FROM dbo.split2(@conceptos,'|',',')A INNER JOIN Conceptos C ON C.fraccionamiento=@s_fraccionamiento AND CONVERT(INT,A.spliter1)=C.clave;
          ]]>
      </sql>
    </ObtenerResumenPago>
    
     <GuardarConcepto>      
      <campo leyenda="Concepto" db_nombre="concepto" form_nombre="concepto" requerido="true" charsize="200" tipo="string"/>
      <campo leyenda="Monto" db_nombre="monto" form_nombre="monto" requerido="true" charsize="0" tipo="float"/>
      <sql>
        <![CDATA[
        IF ISNUMERIC(@monto)>0 BEGIN
            IF NOT EXISTS(SELECT clave FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento AND nombre=RTRIM(LTRIM(@concepto))) BEGIN
                INSERT INTO Conceptos(nombre,monto,fraccionamiento) VALUES(@concepto,@monto,@s_fraccionamiento);
                SELECT 1 estatus, 'Actualización correcta' mensaje;
            END ELSE BEGIN
              SELECT -1 estatus,'No se puede guardar, ya existe el concepto.' mensaje
            END
         END ELSE BEGIN
           SELECT -1 estatus,'El monto debe ser valor numérico, verifique.' mensaje
        END
          ]]>
      </sql>
    </GuardarConcepto>
          
    <RegistrarPagoPayU>
      <campo leyenda="Referencia de proveedor" db_nombre="reference_pol" form_nombre="reference_pol" requerido="true" charsize="50" tipo="string"/>
      <campo leyenda="Referencia de venta" db_nombre="reference_sale" form_nombre="reference_sale" requerido="true" charsize="4000" tipo="string"/>
      <campo leyenda="Precio" db_nombre="precio" form_nombre="value" requerido="true" charsize="0" tipo="float"/>
      <campo leyenda="Respuesta de PayU" db_nombre="response_payu" form_nombre="response_code_pol" requerido="true" charsize="0" tipo="int"/>
      <mail  adjunto-url="http://safra.softronel.com.mx/recibodemo.jpg" />
      <sql>
        <![CDATA[
              BEGIN TRANSACTION T1;
              BEGIN TRY           
                DECLARE @tPropiedades AS TABLE(propiedad NVARCHAR(100),valor NVARCHAR(200));
                INSERT INTO @tPropiedades SELECT spliter1, spliter2 FROM dbo.split2(@reference_sale,'-',':');
                DECLARE @conceptos NVARCHAR(4000);SET @conceptos=(SELECT TOP(1) valor FROM @tPropiedades WHERE propiedad='c');
                DECLARE @fraccionamiento INT;SET @fraccionamiento=(SELECT TOP(1) valor FROM @tPropiedades WHERE propiedad='f');
                DECLARE @domicilio INT;SET @domicilio=(SELECT TOP(1) valor FROM @tPropiedades WHERE propiedad='d');
                DECLARE @usuario INT;SET @usuario=(SELECT TOP(1) valor FROM @tPropiedades WHERE propiedad='usu');
                
                DECLARE @cuenta DECIMAL(10,2);
                SELECT @cuenta=SUM(C.monto) FROM dbo.split2(@conceptos,'|',',')A INNER JOIN Conceptos C ON CONVERT(INT,A.spliter1)=C.clave;
                
                IF @cuenta=@precio AND @response_payu=1 BEGIN
                    UPDATE Aportaciones
                    SET 
	                    usuario=(SELECT TOP(1) valor FROM @tPropiedades WHERE propiedad='usu'),	                
                      fecha=GETDATE(),
                      monto=CONVERT(DECIMAL(10,2),spliter2),
                      response_payu=@response_payu,
                      pago_electronico=1
                    FROM dbo.Split2(@conceptos,'|',',') C
                    WHERE domicilio=@domicilio AND concepto=CONVERT(INT,C.spliter1);
                    
                    INSERT INTO RegistrosPAYU(fecha,_data,observacion) VALUES(GETDATE(),@reference_sale,'OK:' + CONVERT(NVARCHAR(30),@cuenta));  
                    
                    DECLARE @nombrefrac NVARCHAR(200);SELECT TOP(1) @nombrefrac=nombre FROM Fraccionamientos;                 
                    DECLARE @emailpaga NVARCHAR(100);SELECT @emailpaga=correo FROM Usuarios U WHERE domicilio=@domicilio ORDER BY clave DESC; 
                    DECLARE @s_domicilio NVARCHAR(500);
		                SELECT @s_domicilio=(SELECT calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'') FROM Domicilios WHERE clave=@domicilio);
		                    
                    INSERT INTO @tEmail(habilitarEnvio,alias,asunto,destinatarios,mensaje,cc,params_url) 
                    SELECT 1,@nombrefrac,'Pago de aportaciónes',@emailpaga,'<b>Domicilio: </b>'+ @s_domicilio + '<br/><b>Fecha: </b>' + CONVERT(NVARCHAR(20),GETDATE(),100) + '<br/>' + '<b>Referencia E: </b>'+ @reference_pol + '<br/><b>Referencia: </b>' + UPPER(CONVERT(NVARCHAR(10),@domicilio) + '-' + @conceptos) + '<b><br/>Tipo de pago:</b>Electrónico<br/><br/><b>Descripción:</b><br/><table class="tabla" cellpadding=0 cellspacing=0><tr style="color:#2c5878;background-color:#eee;text-align:center;"><td>Concepto</td><td>Cuota</td>'+REPLACE(REPLACE((
                        SELECT '<tr><td style="padding-left:20px;">' + C.nombre + '</td><td style="text-align:right;"><span style="float:left;">$</span>' + CONVERT(NVARCHAR(20),monto) + '</td></tr>' AS [text()]
                        FROM dbo.split2(@conceptos,'|',',')A INNER JOIN Conceptos C ON CONVERT(INT,A.spliter1)=C.clave                                                
                        ORDER BY C.fecha_alta DESC
                        FOR XML PATH ('')
                    ),'&lt;','<'),'&gt;','>')+'<tr style="background-color:#ddd"><td style="text-align:right;padding-right:20px;">Total</td><td style="text-align:right;"><span style="float:left;">$</span>' + CONVERT(NVARCHAR(20),@cuenta) +  '</td></tr></table><h4 style="text-align:center;">Â¡Gracias por tu apoyo!</h4>','safra.control.residencial@gmail.com',NULL 
                    INSERT INTO Notificaciones (domicilio,mensaje,fecha,funcion) VALUES(@domicilio,'Recibimos $' + CONVERT(NVARCHAR(20),@cuenta) + ' ; Fecha: ' + CONVERT(NVARCHAR(20),GETDATE(),100) + ' Â¡Gracias por su aportación!',GETDATE(),3);                
                    
                    SELECT 1 estatus, 'Aportación registrada correctamente' mensaje;    
                    SELECT 1 notificar, 'FRA_1_'+CONVERT(NVARCHAR(20),@fraccionamiento)+'_dom_' + CONVERT(NVARCHAR(10),@domicilio) para, 3 clave, @nombrefrac titulo, 'Recibimos $' + CONVERT(NVARCHAR(20),@cuenta) + ' ; Fecha: ' + CONVERT(NVARCHAR(20),GETDATE(),100) + ' Â¡Gracias por su aportación!' mensaje; 
                    
                END ELSE BEGIN                 
                  INSERT INTO RegistrosPAYU(fecha,_data,observacion) VALUES(GETDATE(),@reference_sale + ': RESPUESTA: ' + CASE WHEN @response_payu=4 THEN 'RECHAZADA' ELSE 'OTRO ERROR. RESPUESTA: ' + CONVERT(NVARCHAR(2),@response_payu) END,'COMPARACION=>Cuenta=' + CONVERT(NVARCHAR(30),@cuenta) + ' vs Recibido:' + CONVERT(NVARCHAR(30),@precio));
                  SELECT 1 estatus, 'Error 4, sabotaje.' mensaje;
                END
                COMMIT TRANSACTION T1; 
              END TRY 
              BEGIN CATCH
                ROLLBACK TRANSACTION T1;
                INSERT INTO RegistrosPAYU(fecha,_data,observacion) VALUES(GETDATE(),@reference_sale + '==> RESPUESTA:' + CONVERT(NVARCHAR(2),@response_payu),'Error al insertar pago: ' + ERROR_MESSAGE());
                SELECT -1 estatus, 'Error:' + ERROR_MESSAGE() mensaje;
              END CATCH
          ]]>
      </sql>
    </RegistrarPagoPayU>
    
    
    <ValidarPagar>
          <sql>
            <![CDATA[            
                  DECLARE @usuarioMaster INT;
                  SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
                  DECLARE @claveadmin INT;SELECT @claveadmin=clave FROM (SELECT clave,clave_cargo FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN Cargos_Acciones CA ON CA.fraccionamiento=@s_fraccionamiento AND A.clave_cargo=CA.clave_cargo AND CA.clave_accion=3;                                                
                  IF @claveadmin IS NOT NULL OR @usuarioMaster=1 BEGIN                                   
                    SELECT 1 admin_pago; 
                  END ELSE BEGIN                                   
                    SELECT 1 residente; 
                  END                  
              ]]>
          </sql>
    </ValidarPagar>
    
    <ValidarFormaPago>
          <campo leyenda="Conceptos" db_nombre="conceptos" form_nombre="c" requerido="true" charsize="4000" tipo="string"/>
          <campo leyenda="Domicilios" db_nombre="domicilio" form_nombre="d" requerido="true" charsize="0" tipo="int"/>
          <sql>
            <![CDATA[
            
                  DECLARE @usuarioMaster INT;
                  SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
          
                  DECLARE @cuenta DECIMAL(10,2);
                  SELECT @cuenta=SUM(C.monto) FROM dbo.split2(@conceptos,'|',',')A INNER JOIN (SELECT * FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento) C ON CONVERT(INT,A.spliter1)=C.clave;
                  DECLARE @domicilio_u INT;SELECT TOP(1) @domicilio_u=domicilio FROM Usuarios WHERE fraccionamiento=@s_fraccionamiento AND clave=@s_usuario;
                  DECLARE @domicilio_s NVARCHAR(200);SELECT @domicilio_s=(calle + ISNULL(' ' + numero,'') + ISNULL(' ' + no_interior,'') + ISNULL(' Mz. ' + manzana,'') + ISNULL(' Lt.' + lote,'')) FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio;          
                 BEGIN TRANSACTION T1;
                  BEGIN TRY           
                    DECLARE @claveadmin INT;SELECT @claveadmin=clave FROM (SELECT clave,clave_cargo FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN Cargos_Acciones CA ON A.clave_cargo=CA.clave_cargo AND CA.clave_accion=3;                                                
                    IF (@claveadmin IS NOT NULL OR @s_usuario=@usuarioMaster) AND @domicilio=@domicilio_u BEGIN
                        SELECT 1 mismoadmin, @cuenta monto, @domicilio_s domicilio;    
                    END ELSE IF @claveadmin IS NOT NULL OR @s_usuario=@usuarioMaster BEGIN                                   
                      SELECT 1 otroadmin, @cuenta monto, @domicilio_s domicilio; 
                    END ELSE BEGIN                                   
                      SELECT 1 tarjeta, @cuenta monto, @domicilio_s domicilio; 
                    END
                    COMMIT TRANSACTION T1; 
                  END TRY 
                  BEGIN CATCH
                    ROLLBACK TRANSACTION T1;                
                    SELECT -1 estatus, 'Error:' + ERROR_MESSAGE() mensaje;
                  END CATCH
              ]]>
          </sql>
    </ValidarFormaPago>

    <ValidarAgregarPagar>
       <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="domicilio" requerido="true" charsize="0" tipo="int"/>
       <campo leyenda="Clave" db_nombre="concepto" form_nombre="concepto" requerido="true" charsize="0" tipo="int"/>
          <sql>
            <![CDATA[
              SELECT CASE WHEN fecha IS NOT NULL AND ISNULL(cancelado,0)=0 THEN 'No puede agregar este concepto, aparece como PAGADO.' ELSE 'CONTINUAR' END validacion FROM Aportaciones WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND concepto=@concepto ;
            ]]>
          </sql> 
    </ValidarAgregarPagar>
    
    <ObtenerItem>
        <sql>
          <![CDATA[            
           @@subquery=[cargar]
        ]]>
        </sql>
      </ObtenerItem>
    
      <cargar>
        <campo leyenda="Clave" db_nombre="claveItem" form_nombre="claveItem" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Es busqueda F" db_nombre="esBusquedaF" form_nombre="esBusquedaF" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Domicilio seleccionado" db_nombre="domicilio" form_nombre="domicilio_sel" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Fecha" db_nombre="fecha1" form_nombre="fecha1" requerido="false" charsize="20" tipo="string"/>
        <campo leyenda="Fecha 2" db_nombre="fecha2" form_nombre="fecha2" requerido="false" charsize="20" tipo="string"/>
        <campo leyenda="Adelanto" db_nombre="adelanto" form_nombre="adelanto" requerido="false" charsize="0" tipo="int"/>
        
        <sql>
          <![CDATA[   
            SET DATEFORMAT DMY;        
            DECLARE @fecha_busqueda DATE;
            DECLARE @fecha_busqueda2 DATE;
            SELECT @fecha_busqueda=CONVERT(DATE,@fecha1),@fecha_busqueda2=CONVERT(DATE,@fecha2);  
            DECLARE @fecha_pago_ DATE;SET @fecha_pago_=GETDATE();
            @@subquery=[aportaciones.ObtenerListaPagos]           
            SELECT recibo,concepto,es_cuotamensual,clave_concepto, mes,anio, monto, leyenda,folio, compuesto, p_conv,@domicilio domicilio
            FROM @tpagos ORDER BY anio DESC,mes DESC; --Liberamos sin procesamiento de pagos por convenio
        ]]>
        </sql>
      </cargar> 
    
    <ObtenerListaPagos>
      <sql>
        <![CDATA[
            
            DECLARE @lmes NVARCHAR(5),@lanio NVARCHAR(5);
            
            SELECT TOP 1 @lmes=mes, @lanio=anio FROM (
              SELECT mes,anio FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio 
              UNION ALL 
              SELECT mes,anio FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio
              UNION ALL
              SELECT mes,anio FROM ConciliacionesCuotas WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio
           )A1 ORDER BY anio DESC, mes DESC;
            

            DECLARE @tEC AS TABLE(descripcion NVARCHAR(50),monto DECIMAL(10,2),fecha_alta DATE,mes INT,anio INT,tipoconcepto INT);
            SET LANGUAGE ESPAÑOL;
            DECLARE @fecha_entrega DATE;
            SELECT @fecha_entrega=fecha_entrega FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio;
            DECLARE @StartDate DATE = '01-02-2012';
	          IF @lmes IS NULL BEGIN
              SET @lmes=CONVERT(NVARCHAR(10),DATEPART(MM,GETDATE()));
              SET @lanio=DATENAME(YY,GETDATE());
            END;
            ;WITH dt(MDate) AS (
		            SELECT @StartDate AS MDate
		            UNION ALL
		            SELECT DATEADD(MM, 1, MDate)
		            FROM dt
		            WHERE MDate < DATEADD(MM,ISNULL(@adelanto,0), CASE WHEN GETDATE() > '01-' + @lmes + '-' + @lanio THEN DATEADD(MM,-1,GETDATE()) ELSE '01-' + @lmes + '-' + @lanio END)
	            )
            INSERT INTO @tEC
            SELECT UPPER(DATENAME(MM,MDate)) + ' ' + CONVERT(NVARCHAR(50),DATEPART(YY,MDATE)),dbo.ObtenerCuota('01/02/2012',MONTH(MDATE),YEAR(MDATE),@domicilio,@s_fraccionamiento,NULL) ,MDATE, DATEPART(MM,MDATE),DATEPART(YY,MDATE),1 FROM dt
            OPTION(MAXRECURSION 200);

            DECLARE @tpagos AS TABLE(recibo INT, adelanto INT,concepto NVARCHAR(200), mes INT, anio INT, es_cuotamensual BIT, monto DECIMAL(10,2), fecha_inicio DATE, tipoconcepto NVARCHAR(100), leyenda NVARCHAR(50),folio INT, compuesto BIT, clave_concepto INT, clave_c_asignacion INT, p_conv BIT, fecha_control DATE,fraccionamiento INT);
            INSERT INTO @tpagos(recibo, adelanto,concepto, mes, anio, es_cuotamensual, monto, fecha_inicio, tipoconcepto, leyenda,folio, compuesto, clave_concepto, clave_c_asignacion,fraccionamiento)
            SELECT PDI.recibo, ISNULL(@adelanto,0) adelanto, C.descripcion concepto,C.mes,C.anio, CONVERT(BIT,1) es_cuotamensual, CASE WHEN pago IS NULL THEN dbo.ObtenerCuota(ISNULL(@fecha_pago_,GETDATE()),C.mes,C.anio,@domicilio,@s_fraccionamiento,NULL) ELSE pago END monto,@fecha_entrega fecha_inicio,PDI.tipoconcepto, CASE WHEN ISNULL(pago,0.0)>=C.monto AND es_historial=1 THEN 'PAGADO' WHEN es_historial=0 THEN 'PAGADO' ELSE 'PENDIENTE' END leyenda, folio,R11.compuesto,NULL clave_concepto, NULL clave_c_asignacion, @s_fraccionamiento
            FROM @tEC C LEFT OUTER JOIN (
	            SELECT recibo, mes,anio, SUM(monto) pago,tipoconcepto,1 es_historial,NULL folio
	            FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio 
	            GROUP BY recibo,mes,anio, tipoconcepto
              UNION ALL 
              SELECT NULL, mes,anio,importe pago,observaciones,0,folio FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND clave_concepto IS NULL  
              UNION ALL 
              SELECT NULL,mes,anio,0.00,'CONCILIACION CON RESIDENTE',0,NULL FROM ConciliacionesCuotas WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio              
            ) PDI ON C.mes=PDI.mes AND PDI.anio=C.anio
            LEFT OUTER JOIN (SELECT anio,mes,domicilio,compuesto FROM Temp_compuestos WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio GROUP BY anio,mes,domicilio,compuesto)R11 ON C.anio=R11.anio AND C.mes=R11.mes
            WHERE C.fecha_alta > @fecha_entrega          
            
            UNION ALL
            
            SELECT
              NULL,NULL, QQ.nombre ,DATEPART(MM,QQ.fecha_alta),DATEPART(YY,QQ.fecha_alta), CONVERT(BIT,0), QQ.monto, QQ.fecha_alta,'ADICIONAL', 'PENDIENTE' leyenda,NULL,NULL,QQ.concepto,QQ.clave_c_asignacion,@s_fraccionamiento
            FROM 
              (SELECT C.nombre, R.indice clave_c_asignacion,C.clave concepto, ISNULL(R.monto,C.monto) monto,C.fecha_alta FROM 
              (SELECT * FROM Conceptos WHERE fraccionamiento=@s_fraccionamiento) C  
              LEFT OUTER JOIN 
                (SELECT CA.* FROM (SELECT * FROM Conceptos_asignaciones WHERE fraccionamiento=@s_fraccionamiento) CA INNER JOIN (SELECT * FROM Domicilios WHERE fraccionamiento=@s_fraccionamiento AND clave=@domicilio) D ON CA.domicilio=D.clave OR CA.calle=D.calle OR CA.manzana=D.manzana OR CA.segmento=D.segmento)R ON C.clave=R.concepto
              WHERE R.concepto IS NOT NULL OR C.general=1
              GROUP BY C.nombre, R.indice,C.clave, R.monto,C.monto,C.fecha_alta 
              )QQ LEFT OUTER JOIN (
				SELECT clave_concepto,clave_c_asignacion FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND clave_concepto IS NOT NULL GROUP BY clave_concepto,clave_c_asignacion,folio,compuesto
				UNION ALL
                SELECT clave_concepto,NULL FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND clave_concepto IS NOT NULL GROUP BY clave_concepto
			  ) PR ON (PR.clave_concepto=QQ.concepto AND QQ.clave_c_asignacion IS NULL AND PR.clave_c_asignacion IS NULL) OR PR.clave_c_asignacion=QQ.clave_c_asignacion WHERE PR.clave_concepto IS NULL
            
            UNION ALL         
            
            SELECT
              NULL,NULL, CO.nombre,DATEPART(MM,CO.fecha_alta),DATEPART(YY,CO.fecha_alta), CONVERT(BIT,0), PR.pago, CO.fecha_alta,'ADICIONAL', 'PAGADO',PR.folio,PR.compuesto,PR.clave_concepto,PR.clave_c_asignacion,@s_fraccionamiento
            FROM (
				SELECT clave_concepto,clave_c_asignacion,SUM(importe) pago,folio,compuesto FROM PagosRealizados WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND clave_concepto IS NOT NULL GROUP BY clave_concepto,clave_c_asignacion,folio,compuesto
				UNION ALL
				SELECT clave_concepto,NULL,importe pago,NULL,NULL FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND clave_concepto IS NOT NULL GROUP BY clave_concepto,importe
			) PR INNER JOIN Conceptos CO ON PR.clave_concepto=CO.clave              
              
            ORDER BY C.anio DESC,C.mes DESC; 
			
            
            /***************************************************************************
            Identificación de convenios
            **************************************************************************/
            
            DECLARE @convenio INT, @c_pago DECIMAL(10,2), @c_descuento DECIMAL(10,2), @total_adeudo DECIMAL(10,2), @p_conv DECIMAL(10,2);
            DECLARE @monto_act DECIMAL(10,2), @descuento DECIMAL(10,2), @pago_req DECIMAL(10,2);
            SELECT TOP(1) @convenio=indice, @c_pago=ISNULL(porcentaje_pago,0.0), @c_descuento=ISNULL(porcentaje_dcto,0.0) FROM Convenios WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND fecha_aplico IS NULL ORDER BY fecha ASC;--Tomamos el mas antiguo
            IF (@convenio IS NOT NULL) BEGIN              
              SELECT @total_adeudo=SUM(monto), @descuento=@c_descuento*SUM(monto)/100,@pago_req=@c_pago*SUM(monto)/100 FROM @tpagos WHERE leyenda LIKE 'PENDIENTE';
              SET @p_conv=(((@c_descuento+@c_pago)*@total_adeudo)/100);
              UPDATE @tpagos SET fecha_control=CASE WHEN MONTH(GETDATE())=mes AND YEAR(GETDATE())=anio THEN '01-01-1900' ELSE '01-' + CONVERT(NVARCHAR(10),mes) + '-' + CONVERT(NVARCHAR(10),anio) END;              
              UPDATE P SET P.p_conv=(CASE WHEN Q.acum <= @p_conv THEN 1 ELSE NULL END) FROM @tpagos P INNER JOIN (SELECT anio,mes, monto, SUM(monto) OVER(ORDER BY fecha_control ASC) acum FROM @tpagos WHERE leyenda='PENDIENTE')Q ON Q.anio=P.anio AND Q.mes=P.mes;              
            END   
        ]]>
      </sql>
    </ObtenerListaPagos>
    

      <Guardar>
        <campo leyenda="Título" db_nombre="titulo" form_nombre="titulo" requerido="true" charsize="100" tipo="string"/>
        <campo leyenda="Descripción" db_nombre="descripcion" form_nombre="descripcion" requerido="true" charsize="500" tipo="string"/>
        <campo leyenda="Clave de usuario" db_nombre="usuario" form_nombre="usuario" requerido="true" charsize="0" tipo="int" default="3"/>
        <campo leyenda="Clave" db_nombre="indice" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
        <campo leyenda="Es Nuevo" db_nombre="esNuevo" form_nombre="esNuevo" requerido="true" charsize="0" tipo="bool"/>
        <sql>
          <![CDATA[
            DECLARE @ccatalogo INT;
            SELECT @ccatalogo=indice FROM Catalogos WHERE  descripcion like @_mapeo;
        
            IF @esNuevo=1 BEGIN
              INSERT INTO ClasificacionesUsuario(fecha,titulo,descripcion,catalogo,usuario,fraccionamiento) VALUES(GETDATE(),@titulo,@descripcion,@ccatalogo,@usuario,@s_Fraccionamiento);
              SELECT 1 estatus, 'OK' mensaje, CONVERT(INT,@@IDENTITY) clave;
             END ELSE BEGIN
              IF(@indice IS NOT NULL)BEGIN
                UPDATE ClasificacionesUsuario SET fecha=GETDATE(),titulo=@titulo,descripcion=@descripcion,usuario=@usuario WHERE fraccionamiento=@s_fraccionamiento AND indice=@indice;
                SELECT 1 estatus, 'OK' mensaje, @indice clave;
              END ELSE 
                SELECT -1 estatus, 'Falta clave si desea editar' mensaje;
             END
          ]]>
        </sql>
      </Guardar>
      <CancelarAportacion>
          <campo leyenda="Clave" db_nombre="indice" form_nombre="clave" requerido="false" charsize="0" tipo="int"/>
          <sql>
            <![CDATA[
              
            ]]>
          </sql>
        </CancelarAportacion>

      <ObtenerItem>
        <campo leyenda="Clave" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
            SELECT * FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem;
          ]]>
        </sql>
      </ObtenerItem>

      <Eliminar>
        <campo leyenda="Indice de Item" db_nombre="claveItem" form_nombre="claveItem" requerido="true" charsize="0" tipo="int"/>
        <sql>
          <![CDATA[
              DELETE FROM ClasificacionesUsuario WHERE fraccionamiento=@s_fraccionamiento AND indice=@claveItem; 
              SELECT 1 estatus, 'OK' mensaje;           
          ]]>
        </sql>
      </Eliminar>    
  </aportaciones>


  <ap_domiciliosH>
    <cargar>
      <campo leyenda="Buscar" db_nombre="buscar" form_nombre="buscar" requerido="false" charsize="300" tipo="string"/>
      <sql>
        <![CDATA[          
            @@subquery=[ap_domicilios3.cargar]
        ]]>
      </sql>
    </cargar>    
  </ap_domiciliosH>  
  
    <domiciliosH>
      <Guardar>
      <campo leyenda="Domicilio" db_nombre="domicilio" form_nombre="clavedomicilio" requerido="true" charsize="40" tipo="string"/>
      <campo leyenda="Recibo" db_nombre="recibo" form_nombre="recibo" requerido="true" charsize="40" tipo="string"/>
      <campo leyenda="Tipo de pago" db_nombre="tipopago" form_nombre="tipopago" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Operación" db_nombre="operacion" form_nombre="operacion" requerido="true" charsize="0" tipo="int"/>
      <campo leyenda="Fecha" db_nombre="fecha" form_nombre="fecha" requerido="true" charsize="40" tipo="string"/>
      <campo leyenda="Importe" db_nombre="importe" form_nombre="importe" requerido="true" charsize="0" tipo="float"/>
      <campo leyenda="Concepto" db_nombre="concepto" form_nombre="concepto" requerido="true" charsize="1000" tipo="string"/>
      <campo leyenda="Nota aclaratoria" db_nombre="nota" form_nombre="nota" requerido="true" charsize="1000" tipo="string"/>
        <sql>
          <![CDATA[         
            SET LANGUAGE ESPAÑOL;SET DATEFORMAT DMY;
            DECLARE @usuarioMaster INT;
            SELECT @usuarioMaster= CASE WHEN @s_usuario=responsable THEN 1 ELSE NULL END FROM fraccionamientos WHERE clave=@s_fraccionamiento;
        
            DECLARE @tiene_permiso BIT;
            SELECT @tiene_permiso=(CASE WHEN CA.clave_accion IS NOT NULL THEN 1 ELSE NULL END) FROM (SELECT * FROM Administracion WHERE fraccionamiento=@s_fraccionamiento AND usuario=@s_usuario AND ISNULL(activo,0)=1)A INNER JOIN Cargos_Acciones CA ON CA.fraccionamiento=@s_fraccionamiento AND A.clave_cargo=CA.clave_cargo WHERE CA.clave_accion=12;/* es la clave para editar historial*/
            IF @tiene_permiso=1 OR @usuarioMaster=1 BEGIN                
                BEGIN TRANSACTION TX;
                BEGIN TRY                    
                  IF @operacion IN(1,2) BEGIN
                      SET LANGUAGE ESPAÑOL;SET DATEFORMAT DMY;
                      DECLARE @tCargaInicialPagos AS TABLE (
	                      indice INT ,
	                      indice2 INT,
	                      domicilio INT ,
	                      recibo NVARCHAR(10),
	                      referencia NVARCHAR(12),
	                      sfecha_pago NVARCHAR(12),
	                      sfecha_registro NVARCHAR(12),
	                      quien_paga NVARCHAR(100),
	                      calle NVARCHAR(100),
	                      segmento NVARCHAR(30),
	                      numero NVARCHAR(20),
	                      forma_pago NVARCHAR(20),
	                      tipoconcepto NVARCHAR(30),
	                      importe NVARCHAR(12),
	                      responsable NVARCHAR(100),
	                      detalle NVARCHAR(120),
	                      observaciones NVARCHAR(150),
	                      fecha_pago DATE,
	                      fecha_registro DATE,
	                      detalle_act NVARCHAR(120),
						  fraccionamiento INT
                      )
                      UPDATE CargaInicialPagos SET detalle_act=@concepto,detalle=@concepto WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND recibo=@recibo;
                      DELETE FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND recibo=@recibo;
                      INSERT INTO @tCargaInicialPagos
                      SELECT ROW_NUMBER() OVER(ORDER BY recibo ASC) indice,*,@s_fraccionamiento FROM CargaInicialPagos WHERE fraccionamiento=@s_fraccionamiento AND domicilio =@domicilio AND recibo=@recibo;
                      DECLARE @detalle NVARCHAR(300),@fecha_pago DATE,@fecha_registro DATE,@monto DECIMAL(10,2);
		                  SELECT  @fecha_pago=fecha_pago,@fecha_registro=fecha_registro,@monto=CASE WHEN ISNUMERIC(importe)=1 THEN importe ELSE NULL END,@detalle=detalle_act FROM CargaInicialPagos WHERE fraccionamiento=@s_fraccionamiento AND domicilio =@domicilio AND recibo=@recibo;
		                  INSERT INTO PagosDesgIniciales
		                  SELECT A.*,B.monto,B.mes,B.anio,B.detalle_desc,@s_fraccionamiento FROM (SELECT TOP(1)
			                  indice2,
			                  domicilio,
			                  recibo,
			                  referencia,
			                  sfecha_pago,
			                  sfecha_registro,
			                  quien_paga,
			                  calle,
			                  segmento,
			                  numero,
			                  forma_pago,
			                  tipoconcepto,
			                  importe ,
			                  responsable,
			                  detalle,
			                  observaciones,
			                  fecha_pago,
			                  fecha_registro,
			                  detalle_act
		                    FROM  @tCargaInicialPagos WHERE domicilio =@domicilio AND recibo=@recibo )A LEFT OUTER JOIN dbo.Desglosar(@fecha_pago,@fecha_registro,@monto,@detalle,@domicilio)B ON 1=1;
                END 
                IF @operacion IN(2,3) BEGIN                
                      DELETE FROM PagosDesgIniciales WHERE fraccionamiento=@s_fraccionamiento AND domicilio=@domicilio AND recibo=@recibo;
                      INSERT INTO AjustesHistorial(responsable,domicilio,	fecha,	recibo,	fecha_recibo,	importe,	concepto,	tipopago,nota,fraccionamiento)
                      VALUES(@s_usuario,@domicilio,GETDATE(),@recibo,@fecha,@importe,@concepto,@tipopago,@nota,@s_fraccionamiento); 
		                  INSERT INTO PagosDesgIniciales(domicilio,recibo,fecha_pago,fecha_registro,detalle_act,importe,monto,mes,anio,detalle_desc,fraccionamiento)
		                  SELECT @domicilio,@recibo,@fecha,GETDATE(),@concepto,@importe,B.monto,B.mes,B.anio,B.detalle_desc,@s_fraccionamiento FROM dbo.Desglosar(@fecha,GETDATE(),@importe,@concepto,@domicilio)B;
                END 
                IF @operacion=4 BEGIN
                    DELETE FROM AjustesHistorial WHERE fraccionamiento=@s_fraccionamiento AND recibo=@recibo;
                END   
                COMMIT TRANSACTION TX;
                SELECT 1 estatus, 'Procesado correctamente.' mensaje;
              END TRY BEGIN CATCH
                ROLLBACK TRANSACTION TX;
                SELECT -1 estatus, 'Error: ' + ERROR_MESSAGE() mensaje;
              END CATCH
            END ELSE BEGIN
              SELECT -1 estatus, 'No tiene habilitada esta función.' mensaje;
            END
          ]]>
        </sql>
      </Guardar>    
  </domiciliosH> 
</Secciones>